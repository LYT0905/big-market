24-07-30.20:23:50.084 [main            ] INFO  Application            - Starting Application using Java 1.8.0_171 on LAPTOP-6UTBSJGB with PID 52624 (C:\Users\27132\Java\big-market\big-market-app\target\classes started by 27132 in C:\Users\27132\Java\big-market)
24-07-30.20:23:50.090 [main            ] INFO  Application            - The following 1 profile is active: "dev"
24-07-30.20:23:51.635 [main            ] INFO  RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
24-07-30.20:23:51.639 [main            ] INFO  RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
24-07-30.20:23:51.691 [main            ] INFO  RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 28 ms. Found 0 Redis repository interfaces.
24-07-30.20:23:52.529 [main            ] INFO  TomcatWebServer        - Tomcat initialized with port(s): 8091 (http)
24-07-30.20:23:52.542 [main            ] INFO  Http11NioProtocol      - Initializing ProtocolHandler ["http-nio-8091"]
24-07-30.20:23:52.543 [main            ] INFO  StandardService        - Starting service [Tomcat]
24-07-30.20:23:52.543 [main            ] INFO  StandardEngine         - Starting Servlet engine: [Apache Tomcat/9.0.75]
24-07-30.20:23:52.846 [main            ] INFO  [/]                    - Initializing Spring embedded WebApplicationContext
24-07-30.20:23:52.846 [main            ] INFO  ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2676 ms
24-07-30.20:23:53.377 [main            ] INFO  Version                - Redisson 3.23.4
24-07-30.20:23:54.172 [redisson-netty-2-4] INFO  MasterPubSubConnectionPool - 1 connections initialized for 8.138.41.137/8.138.41.137:16379
24-07-30.20:23:54.802 [redisson-netty-2-13] INFO  MasterConnectionPool   - 5 connections initialized for 8.138.41.137/8.138.41.137:16379
24-07-30.20:23:56.780 [main            ] INFO  EndpointLinksResolver  - Exposing 1 endpoint(s) beneath base path '/actuator'
24-07-30.20:23:56.834 [main            ] INFO  Http11NioProtocol      - Starting ProtocolHandler ["http-nio-8091"]
24-07-30.20:23:56.877 [main            ] INFO  TomcatWebServer        - Tomcat started on port(s): 8091 (http) with context path ''
24-07-30.20:23:56.909 [main            ] INFO  Application            - Started Application in 7.836 seconds (JVM running for 10.102)
24-07-30.20:23:57.328 [RMI TCP Connection(1)-192.168.43.65] INFO  HikariDataSource       - HikariPool-1 - Starting...
24-07-30.20:23:58.132 [RMI TCP Connection(3)-192.168.43.65] INFO  [/]                    - Initializing Spring DispatcherServlet 'dispatcherServlet'
24-07-30.20:23:58.132 [RMI TCP Connection(3)-192.168.43.65] INFO  DispatcherServlet      - Initializing Servlet 'dispatcherServlet'
24-07-30.20:23:58.134 [RMI TCP Connection(3)-192.168.43.65] INFO  DispatcherServlet      - Completed initialization in 2 ms
24-07-30.20:23:59.199 [RMI TCP Connection(1)-192.168.43.65] INFO  HikariDataSource       - HikariPool-1 - Start completed.
24-07-30.20:24:00.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:24:05.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:24:10.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:24:15.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:24:20.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:24:25.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:24:30.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:24:35.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:24:40.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:24:45.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:24:50.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:24:55.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:25:00.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:25:05.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:25:10.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:25:15.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:25:20.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:25:25.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:25:30.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:25:35.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:25:40.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:25:45.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:25:50.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:25:54.239 [http-nio-8091-exec-5] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：100004
24-07-30.20:25:54.239 [http-nio-8091-exec-3] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：100004
24-07-30.20:25:54.815 [http-nio-8091-exec-5] INFO  RaffleController       - 查询抽奖奖品列表配置完成 strategyId：100004 response: {"code":"0000","data":[{"awardId":101,"awardTitle":"10000积分","sort":2},{"awardId":102,"awardTitle":"随机积分","sort":1}],"info":"成功"}
24-07-30.20:25:54.815 [http-nio-8091-exec-3] INFO  RaffleController       - 查询抽奖奖品列表配置完成 strategyId：100004 response: {"code":"0000","data":[{"awardId":101,"awardTitle":"10000积分","sort":2},{"awardId":102,"awardTitle":"随机积分","sort":1}],"info":"成功"}
24-07-30.20:25:55.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:25:56.253 [http-nio-8091-exec-6] INFO  RaffleController       - 抽奖策略装配开始 strategyId：100004
24-07-30.20:25:57.010 [http-nio-8091-exec-6] INFO  RaffleController       - 抽奖策略装配完成 strategyId：100004 response: {"code":"0000","data":false,"info":"成功"}
24-07-30.20:26:00.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:26:03.353 [http-nio-8091-exec-9] INFO  RaffleController       - 随机抽奖开始 strategyId: 100004
24-07-30.20:26:04.011 [http-nio-8091-exec-9] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100004 awardId:102
24-07-30.20:26:04.013 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0000
24-07-30.20:26:04.014 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100004 awardId:102
24-07-30.20:26:04.129 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:system strategyId:100004 awardId:102
24-07-30.20:26:04.316 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_stock code:0001
24-07-30.20:26:04.320 [http-nio-8091-exec-9] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:system strategyId:100004 awardId:102 ruleValue:102:1,100
24-07-30.20:26:04.320 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-07-30.20:26:04.320 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100004 102 1,100
24-07-30.20:26:04.502 [http-nio-8091-exec-9] INFO  RaffleController       - 随机抽奖完成 strategyId: 100004 response: {"code":"0000","data":{"awardId":102,"awardIndex":1},"info":"成功"}
24-07-30.20:26:05.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:26:10.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:26:10.071 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100004 awardId:102
24-07-30.20:26:14.280 [http-nio-8091-exec-12] INFO  RaffleController       - 随机抽奖开始 strategyId: 100004
24-07-30.20:26:14.721 [http-nio-8091-exec-12] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100004 awardId:102
24-07-30.20:26:14.721 [http-nio-8091-exec-12] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0000
24-07-30.20:26:14.721 [http-nio-8091-exec-12] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100004 awardId:102
24-07-30.20:26:14.874 [http-nio-8091-exec-12] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:system strategyId:100004 awardId:102
24-07-30.20:26:14.934 [http-nio-8091-exec-12] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_stock code:0001
24-07-30.20:26:14.934 [http-nio-8091-exec-12] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:system strategyId:100004 awardId:102 ruleValue:102:1,100
24-07-30.20:26:14.935 [http-nio-8091-exec-12] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-07-30.20:26:14.935 [http-nio-8091-exec-12] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100004 102 1,100
24-07-30.20:26:14.975 [http-nio-8091-exec-12] INFO  RaffleController       - 随机抽奖完成 strategyId: 100004 response: {"code":"0000","data":{"awardId":102,"awardIndex":1},"info":"成功"}
24-07-30.20:26:15.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:26:20.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:26:20.064 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100004 awardId:102
24-07-30.20:26:25.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:26:30.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:26:30.400 [http-nio-8091-exec-17] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：100005
24-07-30.20:26:30.400 [http-nio-8091-exec-16] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：100005
24-07-30.20:26:30.769 [http-nio-8091-exec-16] INFO  RaffleController       - 查询抽奖奖品列表配置完成 strategyId：100005 response: {"code":"0000","data":[{"awardId":101,"awardTitle":"随机积分","sort":1},{"awardId":102,"awardTitle":"随机积分","sort":1},{"awardId":103,"awardTitle":"随机积分","sort":1},{"awardId":104,"awardTitle":"随机积分","sort":1},{"awardId":105,"awardTitle":"随机积分","sort":1}],"info":"成功"}
24-07-30.20:26:30.769 [http-nio-8091-exec-17] INFO  RaffleController       - 查询抽奖奖品列表配置完成 strategyId：100005 response: {"code":"0000","data":[{"awardId":101,"awardTitle":"随机积分","sort":1},{"awardId":102,"awardTitle":"随机积分","sort":1},{"awardId":103,"awardTitle":"随机积分","sort":1},{"awardId":104,"awardTitle":"随机积分","sort":1},{"awardId":105,"awardTitle":"随机积分","sort":1}],"info":"成功"}
24-07-30.20:26:31.506 [http-nio-8091-exec-19] INFO  RaffleController       - 抽奖策略装配开始 strategyId：100005
24-07-30.20:26:32.661 [http-nio-8091-exec-19] INFO  RaffleController       - 抽奖策略装配完成 strategyId：100005 response: {"code":"0000","data":false,"info":"成功"}
24-07-30.20:26:35.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:26:35.894 [http-nio-8091-exec-21] INFO  RaffleController       - 抽奖策略装配开始 strategyId：100005
24-07-30.20:26:36.467 [http-nio-8091-exec-21] INFO  RaffleController       - 抽奖策略装配完成 strategyId：100005 response: {"code":"0000","data":false,"info":"成功"}
24-07-30.20:26:40.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:26:44.366 [http-nio-8091-exec-25] INFO  RaffleController       - 随机抽奖开始 strategyId: 100005
24-07-30.20:26:45.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:26:45.037 [http-nio-8091-exec-25] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100005 awardId:105
24-07-30.20:26:45.158 [http-nio-8091-exec-25] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:system strategyId:100005 awardId:105
24-07-30.20:26:45.217 [http-nio-8091-exec-25] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-07-30.20:26:45.218 [http-nio-8091-exec-25] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100005 105 null
24-07-30.20:26:45.412 [http-nio-8091-exec-25] INFO  RaffleController       - 随机抽奖完成 strategyId: 100005 response: {"code":"0000","data":{"awardId":105,"awardIndex":1},"info":"成功"}
24-07-30.20:26:50.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:26:50.067 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100005 awardId:105
24-07-30.20:26:55.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:27:00.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:27:05.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:27:10.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:27:15.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:27:20.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:27:25.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:27:30.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:27:35.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:27:40.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:27:45.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:27:50.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:27:55.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:28:00.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:28:05.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:28:10.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:28:13.663 [http-nio-8091-exec-29] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：0
24-07-30.20:28:13.665 [http-nio-8091-exec-30] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：0
24-07-30.20:28:13.857 [http-nio-8091-exec-30] ERROR RaffleController       - 查询抽奖奖品列表配置失败 strategyId：0
java.lang.NullPointerException: null
	at com.big.market.infrastructure.trigger.http.RaffleStrategyController.queryRaffleAwardList(RaffleController.java:91)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:926)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1791)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
24-07-30.20:28:13.857 [http-nio-8091-exec-29] ERROR RaffleController       - 查询抽奖奖品列表配置失败 strategyId：0
java.lang.NullPointerException: null
	at com.big.market.infrastructure.trigger.http.RaffleStrategyController.queryRaffleAwardList(RaffleController.java:91)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:926)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1791)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
24-07-30.20:28:15.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:28:20.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:28:21.196 [http-nio-8091-exec-31] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：100005
24-07-30.20:28:21.200 [http-nio-8091-exec-32] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：100005
24-07-30.20:28:21.267 [http-nio-8091-exec-31] INFO  RaffleController       - 查询抽奖奖品列表配置完成 strategyId：100005 response: {"code":"0000","data":[{"awardId":101,"awardTitle":"随机积分","sort":1},{"awardId":102,"awardTitle":"随机积分","sort":1},{"awardId":103,"awardTitle":"随机积分","sort":1},{"awardId":104,"awardTitle":"随机积分","sort":1},{"awardId":105,"awardTitle":"随机积分","sort":1}],"info":"成功"}
24-07-30.20:28:21.267 [http-nio-8091-exec-32] INFO  RaffleController       - 查询抽奖奖品列表配置完成 strategyId：100005 response: {"code":"0000","data":[{"awardId":101,"awardTitle":"随机积分","sort":1},{"awardId":102,"awardTitle":"随机积分","sort":1},{"awardId":103,"awardTitle":"随机积分","sort":1},{"awardId":104,"awardTitle":"随机积分","sort":1},{"awardId":105,"awardTitle":"随机积分","sort":1}],"info":"成功"}
24-07-30.20:28:25.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:28:30.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:28:35.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:28:40.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:28:45.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:28:50.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:28:55.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:29:00.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:29:05.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:29:10.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:29:15.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:29:20.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:29:25.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:29:26.381 [http-nio-8091-exec-36] INFO  RaffleController       - 随机抽奖开始 strategyId: 100005
24-07-30.20:29:26.744 [http-nio-8091-exec-36] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100005 awardId:105
24-07-30.20:29:26.870 [http-nio-8091-exec-36] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:system strategyId:100005 awardId:105
24-07-30.20:29:26.918 [http-nio-8091-exec-36] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-07-30.20:29:26.918 [http-nio-8091-exec-36] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100005 105 null
24-07-30.20:29:26.960 [http-nio-8091-exec-36] INFO  RaffleController       - 随机抽奖完成 strategyId: 100005 response: {"code":"0000","data":{"awardId":105,"awardIndex":1},"info":"成功"}
24-07-30.20:29:30.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:29:30.077 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100005 awardId:105
24-07-30.20:29:35.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:29:40.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:29:45.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:29:50.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:29:55.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:30:00.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:30:05.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:30:10.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:30:15.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:30:20.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:30:25.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:30:30.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:30:35.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:30:40.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:30:45.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:30:50.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:30:55.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:31:00.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:31:05.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:31:10.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:31:12.358 [http-nio-8091-exec-38] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：100004
24-07-30.20:31:12.358 [http-nio-8091-exec-39] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：100004
24-07-30.20:31:12.447 [http-nio-8091-exec-39] INFO  RaffleController       - 查询抽奖奖品列表配置完成 strategyId：100004 response: {"code":"0000","data":[{"awardId":101,"awardTitle":"10000积分","sort":2},{"awardId":102,"awardTitle":"随机积分","sort":1}],"info":"成功"}
24-07-30.20:31:12.452 [http-nio-8091-exec-38] INFO  RaffleController       - 查询抽奖奖品列表配置完成 strategyId：100004 response: {"code":"0000","data":[{"awardId":101,"awardTitle":"10000积分","sort":2},{"awardId":102,"awardTitle":"随机积分","sort":1}],"info":"成功"}
24-07-30.20:31:14.594 [http-nio-8091-exec-40] INFO  RaffleController       - 抽奖策略装配开始 strategyId：100004
24-07-30.20:31:15.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:31:15.132 [http-nio-8091-exec-40] INFO  RaffleController       - 抽奖策略装配完成 strategyId：100004 response: {"code":"0000","data":false,"info":"成功"}
24-07-30.20:31:19.086 [http-nio-8091-exec-41] INFO  RaffleController       - 随机抽奖开始 strategyId: 100004
24-07-30.20:31:19.565 [http-nio-8091-exec-41] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100004 awardId:102
24-07-30.20:31:19.566 [http-nio-8091-exec-41] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0000
24-07-30.20:31:19.566 [http-nio-8091-exec-41] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100004 awardId:102
24-07-30.20:31:19.683 [http-nio-8091-exec-41] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:system strategyId:100004 awardId:102
24-07-30.20:31:19.820 [http-nio-8091-exec-41] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_stock code:0001
24-07-30.20:31:19.821 [http-nio-8091-exec-41] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:system strategyId:100004 awardId:102 ruleValue:102:1,100
24-07-30.20:31:19.821 [http-nio-8091-exec-41] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-07-30.20:31:19.821 [http-nio-8091-exec-41] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100004 102 1,100
24-07-30.20:31:19.872 [http-nio-8091-exec-41] INFO  RaffleController       - 随机抽奖完成 strategyId: 100004 response: {"code":"0000","data":{"awardId":102,"awardIndex":1},"info":"成功"}
24-07-30.20:31:20.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:31:25.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:31:25.067 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100004 awardId:102
24-07-30.20:31:30.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:31:30.731 [http-nio-8091-exec-44] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：100004
24-07-30.20:31:30.734 [http-nio-8091-exec-45] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：100004
24-07-30.20:31:30.778 [http-nio-8091-exec-44] INFO  RaffleController       - 查询抽奖奖品列表配置完成 strategyId：100004 response: {"code":"0000","data":[{"awardId":101,"awardTitle":"10000积分","sort":2},{"awardId":102,"awardTitle":"随机积分","sort":1}],"info":"成功"}
24-07-30.20:31:30.782 [http-nio-8091-exec-45] INFO  RaffleController       - 查询抽奖奖品列表配置完成 strategyId：100004 response: {"code":"0000","data":[{"awardId":101,"awardTitle":"10000积分","sort":2},{"awardId":102,"awardTitle":"随机积分","sort":1}],"info":"成功"}
24-07-30.20:31:35.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:31:35.169 [http-nio-8091-exec-48] INFO  RaffleController       - 随机抽奖开始 strategyId: 100004
24-07-30.20:31:35.602 [http-nio-8091-exec-48] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100004 awardId:102
24-07-30.20:31:35.602 [http-nio-8091-exec-48] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0000
24-07-30.20:31:35.602 [http-nio-8091-exec-48] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100004 awardId:102
24-07-30.20:31:35.731 [http-nio-8091-exec-48] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:system strategyId:100004 awardId:102
24-07-30.20:31:35.806 [http-nio-8091-exec-48] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_stock code:0001
24-07-30.20:31:35.806 [http-nio-8091-exec-48] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:system strategyId:100004 awardId:102 ruleValue:102:1,100
24-07-30.20:31:35.806 [http-nio-8091-exec-48] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-07-30.20:31:35.806 [http-nio-8091-exec-48] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100004 102 1,100
24-07-30.20:31:35.862 [http-nio-8091-exec-48] INFO  RaffleController       - 随机抽奖完成 strategyId: 100004 response: {"code":"0000","data":{"awardId":102,"awardIndex":1},"info":"成功"}
24-07-30.20:31:40.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:31:40.050 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100004 awardId:102
24-07-30.20:31:45.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:31:50.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:31:55.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:32:00.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:32:05.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:32:10.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:32:15.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:32:20.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:32:25.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:32:30.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:32:33.482 [http-nio-8091-exec-1] INFO  RaffleController       - 抽奖策略装配开始 strategyId：100004
24-07-30.20:32:34.172 [http-nio-8091-exec-1] INFO  RaffleController       - 抽奖策略装配完成 strategyId：100004 response: {"code":"0000","data":false,"info":"成功"}
24-07-30.20:32:35.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:32:38.377 [http-nio-8091-exec-2] INFO  RaffleController       - 随机抽奖开始 strategyId: 100004
24-07-30.20:32:39.059 [http-nio-8091-exec-2] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100004 awardId:102
24-07-30.20:32:39.059 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0000
24-07-30.20:32:39.059 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100004 awardId:102
24-07-30.20:32:39.180 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:system strategyId:100004 awardId:102
24-07-30.20:32:39.231 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_stock code:0001
24-07-30.20:32:39.231 [http-nio-8091-exec-2] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:system strategyId:100004 awardId:102 ruleValue:102:1,100
24-07-30.20:32:39.231 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-07-30.20:32:39.231 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100004 102 1,100
24-07-30.20:32:39.453 [http-nio-8091-exec-2] INFO  RaffleController       - 随机抽奖完成 strategyId: 100004 response: {"code":"0000","data":{"awardId":102,"awardIndex":2},"info":"成功"}
24-07-30.20:32:40.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:32:45.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:32:45.064 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100004 awardId:102
24-07-30.20:32:50.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:32:55.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:33:00.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:33:05.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:33:10.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:33:15.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:33:20.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:33:25.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:33:30.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:33:31.675 [http-nio-8091-exec-5] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：100004
24-07-30.20:33:31.681 [http-nio-8091-exec-3] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：100004
24-07-30.20:33:31.725 [http-nio-8091-exec-5] INFO  RaffleController       - 查询抽奖奖品列表配置完成 strategyId：100004 response: {"code":"0000","data":[{"awardId":101,"awardTitle":"10000积分","sort":1},{"awardId":102,"awardTitle":"随机积分","sort":2}],"info":"成功"}
24-07-30.20:33:31.726 [http-nio-8091-exec-3] INFO  RaffleController       - 查询抽奖奖品列表配置完成 strategyId：100004 response: {"code":"0000","data":[{"awardId":101,"awardTitle":"10000积分","sort":1},{"awardId":102,"awardTitle":"随机积分","sort":2}],"info":"成功"}
24-07-30.20:33:35.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:33:40.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:33:45.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:33:50.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:33:55.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:34:00.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:34:05.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:34:10.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:34:15.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:34:20.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:34:25.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:34:30.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:34:35.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:34:40.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:34:45.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:34:50.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:34:55.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:35:00.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:35:05.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:35:10.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:35:15.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:35:20.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:35:25.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:35:30.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:35:35.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:35:40.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:35:45.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:35:50.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:35:55.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:36:00.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:36:05.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:36:10.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:36:15.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:36:20.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:36:25.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:36:30.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:36:35.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:36:40.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:36:45.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:36:46.484 [http-nio-8091-exec-6] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：0
24-07-30.20:36:46.487 [http-nio-8091-exec-7] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：0
24-07-30.20:36:46.612 [http-nio-8091-exec-7] ERROR RaffleController       - 查询抽奖奖品列表配置失败 strategyId：0
java.lang.NullPointerException: null
	at com.big.market.infrastructure.trigger.http.RaffleStrategyController.queryRaffleAwardList(RaffleController.java:91)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:926)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1791)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
24-07-30.20:36:46.618 [http-nio-8091-exec-6] ERROR RaffleController       - 查询抽奖奖品列表配置失败 strategyId：0
java.lang.NullPointerException: null
	at com.big.market.infrastructure.trigger.http.RaffleStrategyController.queryRaffleAwardList(RaffleController.java:91)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:926)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1791)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
24-07-30.20:36:50.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:36:55.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:37:00.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:37:05.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:37:10.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:37:15.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:37:20.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:37:25.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:37:26.172 [http-nio-8091-exec-9] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：100004
24-07-30.20:37:26.174 [http-nio-8091-exec-10] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：100004
24-07-30.20:37:26.361 [http-nio-8091-exec-9] INFO  RaffleController       - 查询抽奖奖品列表配置完成 strategyId：100004 response: {"code":"0000","data":[{"awardId":101,"awardTitle":"10000积分","sort":2},{"awardId":102,"awardTitle":"随机积分","sort":1}],"info":"成功"}
24-07-30.20:37:26.375 [http-nio-8091-exec-10] INFO  RaffleController       - 查询抽奖奖品列表配置完成 strategyId：100004 response: {"code":"0000","data":[{"awardId":101,"awardTitle":"10000积分","sort":2},{"awardId":102,"awardTitle":"随机积分","sort":1}],"info":"成功"}
24-07-30.20:37:27.135 [http-nio-8091-exec-11] INFO  RaffleController       - 抽奖策略装配开始 strategyId：100004
24-07-30.20:37:27.682 [http-nio-8091-exec-11] INFO  RaffleController       - 抽奖策略装配完成 strategyId：100004 response: {"code":"0000","data":false,"info":"成功"}
24-07-30.20:37:30.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:37:32.235 [http-nio-8091-exec-12] INFO  RaffleController       - 随机抽奖开始 strategyId: 100004
24-07-30.20:37:33.031 [http-nio-8091-exec-12] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100004 awardId:102
24-07-30.20:37:33.031 [http-nio-8091-exec-12] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0000
24-07-30.20:37:33.031 [http-nio-8091-exec-12] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100004 awardId:102
24-07-30.20:37:33.113 [http-nio-8091-exec-12] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:system strategyId:100004 awardId:102
24-07-30.20:37:33.157 [http-nio-8091-exec-12] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_stock code:0001
24-07-30.20:37:33.157 [http-nio-8091-exec-12] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:system strategyId:100004 awardId:102 ruleValue:102:1,100
24-07-30.20:37:33.157 [http-nio-8091-exec-12] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-07-30.20:37:33.157 [http-nio-8091-exec-12] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100004 102 1,100
24-07-30.20:37:33.326 [http-nio-8091-exec-12] INFO  RaffleController       - 随机抽奖完成 strategyId: 100004 response: {"code":"0000","data":{"awardId":102,"awardIndex":1},"info":"成功"}
24-07-30.20:37:35.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:37:40.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:37:40.069 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100004 awardId:102
24-07-30.20:37:40.181 [scheduling-1    ] INFO  StrategyRepository     - 奖品库存不足，数据库兜底查询处理，奖品库存0
24-07-30.20:37:45.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:37:50.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:37:55.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:38:00.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:38:05.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:38:10.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:38:15.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:38:20.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:38:25.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:38:30.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:38:35.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:38:40.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:38:45.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:38:50.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:38:55.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:39:00.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:39:04.382 [http-nio-8091-exec-14] INFO  RaffleController       - 随机抽奖开始 strategyId: 100004
24-07-30.20:39:04.766 [http-nio-8091-exec-14] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100004 awardId:102
24-07-30.20:39:04.766 [http-nio-8091-exec-14] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0000
24-07-30.20:39:04.766 [http-nio-8091-exec-14] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100004 awardId:102
24-07-30.20:39:04.851 [http-nio-8091-exec-14] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:system strategyId:100004 awardId:102
24-07-30.20:39:04.911 [http-nio-8091-exec-14] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_stock code:0001
24-07-30.20:39:04.911 [http-nio-8091-exec-14] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:system strategyId:100004 awardId:102 ruleValue:102:1,100
24-07-30.20:39:04.911 [http-nio-8091-exec-14] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-07-30.20:39:04.911 [http-nio-8091-exec-14] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100004 102 1,100
24-07-30.20:39:04.958 [http-nio-8091-exec-14] INFO  RaffleController       - 随机抽奖完成 strategyId: 100004 response: {"code":"0000","data":{"awardId":102,"awardIndex":1},"info":"成功"}
24-07-30.20:39:05.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:39:10.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:39:10.057 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100004 awardId:102
24-07-30.20:39:10.194 [scheduling-1    ] INFO  StrategyRepository     - 奖品库存不足，数据库兜底查询处理，奖品库存0
24-07-30.20:39:15.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:39:16.373 [http-nio-8091-exec-16] INFO  RaffleController       - 随机抽奖开始 strategyId: 100004
24-07-30.20:39:16.752 [http-nio-8091-exec-16] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100004 awardId:102
24-07-30.20:39:16.752 [http-nio-8091-exec-16] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0000
24-07-30.20:39:16.753 [http-nio-8091-exec-16] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100004 awardId:102
24-07-30.20:39:16.883 [http-nio-8091-exec-16] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:system strategyId:100004 awardId:102
24-07-30.20:39:16.927 [http-nio-8091-exec-16] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_stock code:0001
24-07-30.20:39:16.927 [http-nio-8091-exec-16] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:system strategyId:100004 awardId:102 ruleValue:102:1,100
24-07-30.20:39:16.928 [http-nio-8091-exec-16] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-07-30.20:39:16.928 [http-nio-8091-exec-16] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100004 102 1,100
24-07-30.20:39:16.969 [http-nio-8091-exec-16] INFO  RaffleController       - 随机抽奖完成 strategyId: 100004 response: {"code":"0000","data":{"awardId":102,"awardIndex":1},"info":"成功"}
24-07-30.20:39:20.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:39:20.085 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100004 awardId:102
24-07-30.20:39:20.174 [scheduling-1    ] INFO  StrategyRepository     - 奖品库存不足，数据库兜底查询处理，奖品库存0
24-07-30.20:39:25.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:39:30.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:39:35.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:39:40.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:39:45.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:39:46.074 [http-nio-8091-exec-17] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：100005
24-07-30.20:39:46.078 [http-nio-8091-exec-18] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：100005
24-07-30.20:39:46.317 [http-nio-8091-exec-18] INFO  RaffleController       - 查询抽奖奖品列表配置完成 strategyId：100005 response: {"code":"0000","data":[{"awardId":101,"awardTitle":"随机积分","sort":1},{"awardId":102,"awardTitle":"随机积分","sort":1},{"awardId":103,"awardTitle":"随机积分","sort":1},{"awardId":104,"awardTitle":"随机积分","sort":1},{"awardId":105,"awardTitle":"随机积分","sort":1}],"info":"成功"}
24-07-30.20:39:46.317 [http-nio-8091-exec-17] INFO  RaffleController       - 查询抽奖奖品列表配置完成 strategyId：100005 response: {"code":"0000","data":[{"awardId":101,"awardTitle":"随机积分","sort":1},{"awardId":102,"awardTitle":"随机积分","sort":1},{"awardId":103,"awardTitle":"随机积分","sort":1},{"awardId":104,"awardTitle":"随机积分","sort":1},{"awardId":105,"awardTitle":"随机积分","sort":1}],"info":"成功"}
24-07-30.20:39:46.898 [http-nio-8091-exec-20] INFO  RaffleController       - 抽奖策略装配开始 strategyId：100005
24-07-30.20:39:47.804 [http-nio-8091-exec-20] INFO  RaffleController       - 抽奖策略装配完成 strategyId：100005 response: {"code":"0000","data":false,"info":"成功"}
24-07-30.20:39:50.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:39:53.731 [http-nio-8091-exec-21] INFO  RaffleController       - 随机抽奖开始 strategyId: 100005
24-07-30.20:39:54.367 [http-nio-8091-exec-21] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100005 awardId:105
24-07-30.20:39:54.447 [http-nio-8091-exec-21] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:system strategyId:100005 awardId:105
24-07-30.20:39:54.501 [http-nio-8091-exec-21] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-07-30.20:39:54.501 [http-nio-8091-exec-21] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100005 105 null
24-07-30.20:39:54.694 [http-nio-8091-exec-21] INFO  RaffleController       - 随机抽奖完成 strategyId: 100005 response: {"code":"0000","data":{"awardId":105,"awardIndex":1},"info":"成功"}
24-07-30.20:39:55.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:40:00.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:40:00.093 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100005 awardId:105
24-07-30.20:40:05.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:40:08.512 [http-nio-8091-exec-22] INFO  RaffleController       - 随机抽奖开始 strategyId: 100005
24-07-30.20:40:08.928 [http-nio-8091-exec-22] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100005 awardId:105
24-07-30.20:40:09.039 [http-nio-8091-exec-22] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:system strategyId:100005 awardId:105
24-07-30.20:40:09.093 [http-nio-8091-exec-22] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-07-30.20:40:09.094 [http-nio-8091-exec-22] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100005 105 null
24-07-30.20:40:09.139 [http-nio-8091-exec-22] INFO  RaffleController       - 随机抽奖完成 strategyId: 100005 response: {"code":"0000","data":{"awardId":105,"awardIndex":1},"info":"成功"}
24-07-30.20:40:10.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:40:15.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:40:15.377 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100005 awardId:105
24-07-30.20:40:20.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:40:25.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:40:30.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:40:35.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:40:40.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:40:45.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:40:50.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:40:55.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:41:00.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:41:05.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:41:10.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:41:15.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:41:20.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:41:25.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:41:30.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:41:35.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:41:36.378 [http-nio-8091-exec-25] INFO  RaffleController       - 随机抽奖开始 strategyId: 100005
24-07-30.20:41:36.779 [http-nio-8091-exec-25] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100005 awardId:105
24-07-30.20:41:36.888 [http-nio-8091-exec-25] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:system strategyId:100005 awardId:105
24-07-30.20:41:36.939 [http-nio-8091-exec-25] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-07-30.20:41:36.939 [http-nio-8091-exec-25] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100005 105 null
24-07-30.20:41:36.991 [http-nio-8091-exec-25] INFO  RaffleController       - 随机抽奖完成 strategyId: 100005 response: {"code":"0000","data":{"awardId":105,"awardIndex":1},"info":"成功"}
24-07-30.20:41:40.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:41:40.078 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100005 awardId:105
24-07-30.20:41:45.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:41:50.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:41:50.771 [http-nio-8091-exec-26] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：100005
24-07-30.20:41:50.774 [http-nio-8091-exec-27] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：100005
24-07-30.20:41:50.849 [http-nio-8091-exec-26] INFO  RaffleController       - 查询抽奖奖品列表配置完成 strategyId：100005 response: {"code":"0000","data":[{"awardId":101,"awardTitle":"随机积分","sort":1},{"awardId":102,"awardTitle":"随机积分","sort":1},{"awardId":103,"awardTitle":"随机积分","sort":1},{"awardId":104,"awardTitle":"随机积分","sort":1},{"awardId":105,"awardTitle":"随机积分","sort":1}],"info":"成功"}
24-07-30.20:41:50.849 [http-nio-8091-exec-27] INFO  RaffleController       - 查询抽奖奖品列表配置完成 strategyId：100005 response: {"code":"0000","data":[{"awardId":101,"awardTitle":"随机积分","sort":1},{"awardId":102,"awardTitle":"随机积分","sort":1},{"awardId":103,"awardTitle":"随机积分","sort":1},{"awardId":104,"awardTitle":"随机积分","sort":1},{"awardId":105,"awardTitle":"随机积分","sort":1}],"info":"成功"}
24-07-30.20:41:55.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:41:58.284 [http-nio-8091-exec-28] INFO  RaffleController       - 随机抽奖开始 strategyId: 100005
24-07-30.20:41:58.812 [http-nio-8091-exec-28] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100005 awardId:105
24-07-30.20:41:58.923 [http-nio-8091-exec-28] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:system strategyId:100005 awardId:105
24-07-30.20:41:58.964 [http-nio-8091-exec-28] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-07-30.20:41:58.964 [http-nio-8091-exec-28] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100005 105 null
24-07-30.20:41:59.003 [http-nio-8091-exec-28] INFO  RaffleController       - 随机抽奖完成 strategyId: 100005 response: {"code":"0000","data":{"awardId":105,"awardIndex":1},"info":"成功"}
24-07-30.20:42:00.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:42:05.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:42:05.054 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100005 awardId:105
24-07-30.20:42:10.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:42:15.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:42:20.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:42:25.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:42:30.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:42:35.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:42:40.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:42:45.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:42:50.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:42:55.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:43:00.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:43:05.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:43:10.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:43:15.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:43:20.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:43:25.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:43:30.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:43:35.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:43:40.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:43:45.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:43:50.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:43:55.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:44:00.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:44:05.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:44:10.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:44:15.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:44:20.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:44:25.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:44:30.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:44:35.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:44:40.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:44:45.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:44:50.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:44:55.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:45:00.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:45:05.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:45:10.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:45:15.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:45:20.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:45:25.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:45:30.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:45:35.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:45:40.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:45:45.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:45:50.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:45:53.138 [http-nio-8091-exec-32] INFO  RaffleController       - 随机抽奖开始 strategyId: 100005
24-07-30.20:45:53.574 [http-nio-8091-exec-32] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100005 awardId:103
24-07-30.20:45:53.673 [http-nio-8091-exec-32] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:system strategyId:100005 awardId:103
24-07-30.20:45:53.723 [http-nio-8091-exec-32] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-07-30.20:45:53.723 [http-nio-8091-exec-32] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100005 103 null
24-07-30.20:45:53.924 [http-nio-8091-exec-32] INFO  RaffleController       - 随机抽奖完成 strategyId: 100005 response: {"code":"0000","data":{"awardId":103,"awardIndex":1},"info":"成功"}
24-07-30.20:45:55.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:46:00.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:46:00.069 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100005 awardId:103
24-07-30.20:46:05.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:46:10.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:46:15.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:46:20.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:46:25.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:46:30.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:46:35.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:46:40.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:46:45.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:46:50.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:46:55.017 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:47:00.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:47:05.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:47:10.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:47:15.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:47:20.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:47:25.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:47:30.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:47:35.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:47:40.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:47:45.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:47:50.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:47:55.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:48:00.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:48:05.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:48:10.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:48:15.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:48:20.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:48:25.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:48:30.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:48:35.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:48:40.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:48:45.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:48:50.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:48:55.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:49:00.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:49:05.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:49:10.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:49:15.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:49:20.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:49:25.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:49:30.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:49:35.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:49:40.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:49:45.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:49:50.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:49:55.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:50:00.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:50:05.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:50:10.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:50:10.520 [http-nio-8091-exec-33] INFO  RaffleController       - 抽奖策略装配开始 strategyId：100005
24-07-30.20:50:12.018 [http-nio-8091-exec-33] INFO  RaffleController       - 抽奖策略装配完成 strategyId：100005 response: {"code":"0000","data":false,"info":"成功"}
24-07-30.20:50:12.871 [http-nio-8091-exec-34] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：100005
24-07-30.20:50:12.874 [http-nio-8091-exec-35] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：100005
24-07-30.20:50:12.928 [http-nio-8091-exec-35] INFO  RaffleController       - 查询抽奖奖品列表配置完成 strategyId：100005 response: {"code":"0000","data":[{"awardId":101,"awardTitle":"随机积分","sort":1},{"awardId":102,"awardTitle":"随机积分","sort":2},{"awardId":103,"awardTitle":"随机积分","sort":3},{"awardId":104,"awardTitle":"随机积分","sort":4},{"awardId":105,"awardTitle":"随机积分","sort":5}],"info":"成功"}
24-07-30.20:50:12.928 [http-nio-8091-exec-34] INFO  RaffleController       - 查询抽奖奖品列表配置完成 strategyId：100005 response: {"code":"0000","data":[{"awardId":101,"awardTitle":"随机积分","sort":1},{"awardId":102,"awardTitle":"随机积分","sort":2},{"awardId":103,"awardTitle":"随机积分","sort":3},{"awardId":104,"awardTitle":"随机积分","sort":4},{"awardId":105,"awardTitle":"随机积分","sort":5}],"info":"成功"}
24-07-30.20:50:15.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:50:17.735 [http-nio-8091-exec-36] INFO  RaffleController       - 随机抽奖开始 strategyId: 100005
24-07-30.20:50:18.369 [http-nio-8091-exec-36] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100005 awardId:105
24-07-30.20:50:18.510 [http-nio-8091-exec-36] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:system strategyId:100005 awardId:105
24-07-30.20:50:18.567 [http-nio-8091-exec-36] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-07-30.20:50:18.568 [http-nio-8091-exec-36] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100005 105 null
24-07-30.20:50:18.750 [http-nio-8091-exec-36] INFO  RaffleController       - 随机抽奖完成 strategyId: 100005 response: {"code":"0000","data":{"awardId":105,"awardIndex":5},"info":"成功"}
24-07-30.20:50:20.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:50:25.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:50:25.073 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100005 awardId:105
24-07-30.20:50:30.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:50:35.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:50:40.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:50:45.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:50:50.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:50:55.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:51:00.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:51:05.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:51:10.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:51:15.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:51:20.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:51:25.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:51:30.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:51:35.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:51:40.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:51:45.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:51:50.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:51:55.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:52:00.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:52:05.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:52:10.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:52:15.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:52:20.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:52:25.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:52:30.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:52:35.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:52:40.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:52:45.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:52:50.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:52:55.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:53:00.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:53:05.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:53:10.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:53:15.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:53:20.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:53:25.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:53:30.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:53:35.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:53:40.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:53:45.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:53:50.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:53:55.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:54:00.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:54:05.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:54:10.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:54:14.336 [http-nio-8091-exec-38] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：100005
24-07-30.20:54:14.342 [http-nio-8091-exec-40] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：100005
24-07-30.20:54:14.391 [http-nio-8091-exec-38] INFO  RaffleController       - 查询抽奖奖品列表配置完成 strategyId：100005 response: {"code":"0000","data":[{"awardId":101,"awardTitle":"随机积分","sort":1},{"awardId":102,"awardTitle":"随机积分","sort":2},{"awardId":103,"awardTitle":"随机积分","sort":3},{"awardId":104,"awardTitle":"随机积分","sort":4},{"awardId":105,"awardTitle":"随机积分","sort":5}],"info":"成功"}
24-07-30.20:54:14.395 [http-nio-8091-exec-40] INFO  RaffleController       - 查询抽奖奖品列表配置完成 strategyId：100005 response: {"code":"0000","data":[{"awardId":101,"awardTitle":"随机积分","sort":1},{"awardId":102,"awardTitle":"随机积分","sort":2},{"awardId":103,"awardTitle":"随机积分","sort":3},{"awardId":104,"awardTitle":"随机积分","sort":4},{"awardId":105,"awardTitle":"随机积分","sort":5}],"info":"成功"}
24-07-30.20:54:15.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:54:20.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:54:25.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:54:30.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:54:35.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:54:40.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:54:45.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:54:50.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:54:55.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:55:00.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:55:05.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:55:10.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:55:15.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:55:20.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:55:25.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:55:30.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:55:35.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:55:40.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:55:45.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:55:50.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:55:55.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:56:00.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:56:05.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:56:10.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:56:15.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:56:20.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:56:25.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:56:30.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:56:35.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:56:40.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:56:45.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:56:50.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:56:55.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:57:00.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:57:05.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:57:10.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:57:15.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:57:20.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:57:25.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:57:30.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:57:35.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:57:40.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:57:45.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:57:50.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:57:55.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:58:00.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:58:05.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:58:10.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:58:15.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:58:20.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:58:25.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:58:30.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:58:35.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:58:40.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:58:45.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:58:50.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:58:55.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:59:00.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:59:05.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:59:10.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:59:15.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:59:20.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:59:25.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:59:30.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:59:35.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:59:40.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:59:45.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:59:50.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.20:59:55.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:00:00.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:00:05.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:00:10.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:00:15.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:00:20.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:00:25.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:00:30.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:00:35.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:00:40.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:00:45.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:00:50.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:00:55.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:01:00.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:03:52.926 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:03:55.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:04:00.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:04:05.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:04:10.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:04:15.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:04:17.792 [HikariPool-1 housekeeper] WARN  HikariPool             - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=3m17s921ms305µs800ns).
24-07-30.21:04:20.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:04:25.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:04:30.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:04:35.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:04:40.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:04:45.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:04:50.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:04:55.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:05:00.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:05:05.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:05:10.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:05:15.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:05:20.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:05:25.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:05:30.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:05:35.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:05:40.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:05:45.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:05:50.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:05:55.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:06:00.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:06:05.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:06:10.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:06:15.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:06:20.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:06:25.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:06:30.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:06:35.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:06:40.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:06:45.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:06:50.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:06:55.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:07:00.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:07:05.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:07:10.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:07:15.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:07:20.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:07:25.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:07:30.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:07:35.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:07:40.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:07:45.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:07:50.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:07:55.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:08:00.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:08:05.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:08:10.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:08:15.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:08:20.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:08:25.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:08:30.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:08:35.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:08:40.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:08:45.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:08:50.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:08:55.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:09:00.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:09:55.741 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:10:00.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:10:04.671 [http-nio-8091-exec-44] INFO  RaffleController       - 随机抽奖开始 strategyId: 100004
24-07-30.21:10:04.996 [http-nio-8091-exec-44] ERROR RaffleController       - 随机抽奖失败 strategyId：100004
com.big.market.infrastructure.types.exception.AppException: null
	at com.big.market.infrastructure.infrastructure.persistent.repository.StrategyRepository.getRateRange(StrategyRepository.java:121)
	at com.big.market.infrastructure.infrastructure.persistent.repository.StrategyRepository.getRateRange(StrategyRepository.java:110)
	at com.big.market.infrastructure.infrastructure.persistent.repository.StrategyRepository$$FastClassBySpringCGLIB$$47613a41.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)
	at com.big.market.infrastructure.infrastructure.persistent.repository.StrategyRepository$$EnhancerBySpringCGLIB$$74073689.getRateRange(<generated>)
	at com.big.market.infrastructure.domain.strategy.service.armory.StrategyArmoryDispatchService.getRandomAwardId(StrategyArmoryDispatchService.java:99)
	at com.big.market.infrastructure.domain.strategy.service.rule.chain.impl.DefaultLogicChain.logic(DefaultLogicChain.java:32)
	at com.big.market.infrastructure.domain.strategy.service.raffle.DefaultRaffleStrategy.raffleLogicChain(DefaultRaffleStrategy.java:46)
	at com.big.market.infrastructure.domain.strategy.service.AbstractRaffleStrategy.performRaffle(AbstractRaffleStrategy.java:51)
	at com.big.market.infrastructure.trigger.http.RaffleStrategyController.randomRaffle(RaffleController.java:134)
	at sun.reflect.GeneratedMethodAccessor45.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:926)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1791)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
24-07-30.21:10:05.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:10:08.607 [HikariPool-1 housekeeper] WARN  HikariPool             - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m20s738ms866µs900ns).
24-07-30.21:10:10.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:10:12.210 [http-nio-8091-exec-47] INFO  RaffleController       - 抽奖策略装配开始 strategyId：100004
24-07-30.21:10:12.895 [http-nio-8091-exec-47] INFO  RaffleController       - 抽奖策略装配完成 strategyId：100004 response: {"code":"0000","data":false,"info":"成功"}
24-07-30.21:10:15.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:10:16.224 [http-nio-8091-exec-46] INFO  RaffleController       - 随机抽奖开始 strategyId: 100004
24-07-30.21:10:16.923 [http-nio-8091-exec-46] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100004 awardId:102
24-07-30.21:10:16.923 [http-nio-8091-exec-46] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0000
24-07-30.21:10:16.923 [http-nio-8091-exec-46] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100004 awardId:102
24-07-30.21:10:17.049 [http-nio-8091-exec-46] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:system strategyId:100004 awardId:102
24-07-30.21:10:17.114 [http-nio-8091-exec-46] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_stock code:0001
24-07-30.21:10:17.114 [http-nio-8091-exec-46] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:system strategyId:100004 awardId:102 ruleValue:102:1,100
24-07-30.21:10:17.114 [http-nio-8091-exec-46] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-07-30.21:10:17.114 [http-nio-8091-exec-46] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100004 102 1,100
24-07-30.21:10:17.335 [http-nio-8091-exec-46] INFO  RaffleController       - 随机抽奖完成 strategyId: 100004 response: {"code":"0000","data":{"awardId":102,"awardIndex":1},"info":"成功"}
24-07-30.21:10:20.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:10:25.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:10:25.061 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100004 awardId:102
24-07-30.21:10:25.177 [scheduling-1    ] INFO  StrategyRepository     - 奖品库存不足，数据库兜底查询处理，奖品库存0
24-07-30.21:10:30.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:10:35.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:10:40.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:10:45.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:10:50.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:10:50.539 [http-nio-8091-exec-50] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：100004
24-07-30.21:10:50.540 [http-nio-8091-exec-1] INFO  RaffleController       - 查询抽奖奖品列表配开始 strategyId：100004
24-07-30.21:10:50.612 [http-nio-8091-exec-1] INFO  RaffleController       - 查询抽奖奖品列表配置完成 strategyId：100004 response: {"code":"0000","data":[{"awardId":101,"awardTitle":"10000积分","sort":2},{"awardId":102,"awardTitle":"随机积分","sort":1}],"info":"成功"}
24-07-30.21:10:50.612 [http-nio-8091-exec-50] INFO  RaffleController       - 查询抽奖奖品列表配置完成 strategyId：100004 response: {"code":"0000","data":[{"awardId":101,"awardTitle":"10000积分","sort":2},{"awardId":102,"awardTitle":"随机积分","sort":1}],"info":"成功"}
24-07-30.21:10:53.786 [http-nio-8091-exec-2] INFO  RaffleController       - 随机抽奖开始 strategyId: 100004
24-07-30.21:10:54.087 [http-nio-8091-exec-2] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100004 awardId:102
24-07-30.21:10:54.087 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0000
24-07-30.21:10:54.087 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100004 awardId:102
24-07-30.21:10:54.276 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:system strategyId:100004 awardId:102
24-07-30.21:10:54.326 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_stock code:0001
24-07-30.21:10:54.326 [http-nio-8091-exec-2] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:system strategyId:100004 awardId:102 ruleValue:102:1,100
24-07-30.21:10:54.326 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-07-30.21:10:54.326 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100004 102 1,100
24-07-30.21:10:54.365 [http-nio-8091-exec-2] INFO  RaffleController       - 随机抽奖完成 strategyId: 100004 response: {"code":"0000","data":{"awardId":102,"awardIndex":1},"info":"成功"}
24-07-30.21:10:55.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:11:00.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:11:00.059 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100004 awardId:102
24-07-30.21:11:00.155 [scheduling-1    ] INFO  StrategyRepository     - 奖品库存不足，数据库兜底查询处理，奖品库存0
24-07-30.21:11:05.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:11:05.296 [http-nio-8091-exec-3] INFO  RaffleController       - 随机抽奖开始 strategyId: 100004
24-07-30.21:11:05.703 [http-nio-8091-exec-3] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100004 awardId:102
24-07-30.21:11:05.703 [http-nio-8091-exec-3] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0000
24-07-30.21:11:05.703 [http-nio-8091-exec-3] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100004 awardId:102
24-07-30.21:11:05.783 [http-nio-8091-exec-3] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:system strategyId:100004 awardId:102
24-07-30.21:11:05.832 [http-nio-8091-exec-3] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_stock code:0001
24-07-30.21:11:05.832 [http-nio-8091-exec-3] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:system strategyId:100004 awardId:102 ruleValue:102:1,100
24-07-30.21:11:05.832 [http-nio-8091-exec-3] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-07-30.21:11:05.832 [http-nio-8091-exec-3] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100004 102 1,100
24-07-30.21:11:05.878 [http-nio-8091-exec-3] INFO  RaffleController       - 随机抽奖完成 strategyId: 100004 response: {"code":"0000","data":{"awardId":102,"awardIndex":1},"info":"成功"}
24-07-30.21:11:10.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:11:10.052 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100004 awardId:102
24-07-30.21:11:10.165 [scheduling-1    ] INFO  StrategyRepository     - 奖品库存不足，数据库兜底查询处理，奖品库存0
24-07-30.21:11:13.206 [http-nio-8091-exec-4] INFO  RaffleController       - 随机抽奖开始 strategyId: 100004
24-07-30.21:11:13.558 [http-nio-8091-exec-4] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100004 awardId:102
24-07-30.21:11:13.558 [http-nio-8091-exec-4] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0000
24-07-30.21:11:13.559 [http-nio-8091-exec-4] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100004 awardId:102
24-07-30.21:11:13.694 [http-nio-8091-exec-4] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:system strategyId:100004 awardId:102
24-07-30.21:11:13.746 [http-nio-8091-exec-4] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_stock code:0001
24-07-30.21:11:13.746 [http-nio-8091-exec-4] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:system strategyId:100004 awardId:102 ruleValue:102:1,100
24-07-30.21:11:13.746 [http-nio-8091-exec-4] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-07-30.21:11:13.746 [http-nio-8091-exec-4] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100004 102 1,100
24-07-30.21:11:13.783 [http-nio-8091-exec-4] INFO  RaffleController       - 随机抽奖完成 strategyId: 100004 response: {"code":"0000","data":{"awardId":102,"awardIndex":1},"info":"成功"}
24-07-30.21:11:15.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:11:20.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:11:20.089 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100004 awardId:102
24-07-30.21:11:20.186 [scheduling-1    ] INFO  StrategyRepository     - 奖品库存不足，数据库兜底查询处理，奖品库存0
24-07-30.21:11:25.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:11:30.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:11:35.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:11:40.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:11:45.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:11:50.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:11:55.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:12:00.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:12:05.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:12:10.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:12:15.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:12:16.553 [http-nio-8091-exec-10] INFO  RaffleController       - 随机抽奖开始 strategyId: 100004
24-07-30.21:12:16.936 [http-nio-8091-exec-10] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100004 awardId:102
24-07-30.21:12:16.936 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0000
24-07-30.21:12:16.936 [http-nio-8091-exec-10] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100004 awardId:102
24-07-30.21:12:17.069 [http-nio-8091-exec-10] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:system strategyId:100004 awardId:102
24-07-30.21:12:17.114 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_stock code:0001
24-07-30.21:12:17.115 [http-nio-8091-exec-10] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:system strategyId:100004 awardId:102 ruleValue:102:1,100
24-07-30.21:12:17.115 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-07-30.21:12:17.115 [http-nio-8091-exec-10] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100004 102 1,100
24-07-30.21:12:17.146 [http-nio-8091-exec-10] INFO  RaffleController       - 随机抽奖完成 strategyId: 100004 response: {"code":"0000","data":{"awardId":102,"awardIndex":1},"info":"成功"}
24-07-30.21:12:20.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:12:25.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:12:25.053 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100004 awardId:102
24-07-30.21:12:25.162 [scheduling-1    ] INFO  StrategyRepository     - 奖品库存不足，数据库兜底查询处理，奖品库存0
24-07-30.21:12:30.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:12:35.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:12:40.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:12:45.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:12:50.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:12:55.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:13:00.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:13:05.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:13:10.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:13:15.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:13:20.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:13:25.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:13:30.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:13:35.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:13:40.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:13:45.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:13:50.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:13:55.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:14:00.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:14:05.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:14:10.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:14:15.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:14:20.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:14:25.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:14:30.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:14:35.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:14:40.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:14:45.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:14:50.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:14:55.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:15:00.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:15:05.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:15:10.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:15:15.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:15:20.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:15:25.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:15:30.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:15:35.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:15:40.016 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:15:45.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:15:50.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:15:55.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:16:00.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:16:05.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:16:10.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:16:15.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:16:20.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:16:25.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:16:30.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:16:35.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:16:40.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:16:45.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:16:50.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:16:55.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:17:00.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:17:05.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:17:10.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:17:15.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:17:20.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:17:25.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:17:30.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:17:35.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:17:40.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:17:45.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:17:50.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:17:55.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:18:00.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:18:05.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:18:10.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:18:15.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:18:20.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:18:25.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:18:30.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:18:35.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:18:40.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-07-30.21:18:40.316 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown initiated...
24-07-30.21:18:40.323 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown completed.
24-09-02.20:26:49.311 [main            ] INFO  Application            - Starting Application using Java 1.8.0_171 on LAPTOP-6UTBSJGB with PID 17160 (C:\Users\27132\Java\big-market\big-market-app\target\classes started by 27132 in C:\Users\27132\Java\big-market)
24-09-02.20:26:49.314 [main            ] INFO  Application            - The following 1 profile is active: "dev"
24-09-02.20:26:50.587 [main            ] INFO  RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
24-09-02.20:26:50.589 [main            ] INFO  RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
24-09-02.20:26:50.642 [main            ] INFO  RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 40 ms. Found 0 Redis repository interfaces.
24-09-02.20:26:50.973 [main            ] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
24-09-02.20:26:50.984 [main            ] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
24-09-02.20:26:51.165 [main            ] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$EnhancerBySpringCGLIB$$dea446f5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
24-09-02.20:26:51.467 [main            ] INFO  TomcatWebServer        - Tomcat initialized with port(s): 8091 (http)
24-09-02.20:26:51.476 [main            ] INFO  Http11NioProtocol      - Initializing ProtocolHandler ["http-nio-8091"]
24-09-02.20:26:51.477 [main            ] INFO  StandardService        - Starting service [Tomcat]
24-09-02.20:26:51.477 [main            ] INFO  StandardEngine         - Starting Servlet engine: [Apache Tomcat/9.0.75]
24-09-02.20:26:51.704 [main            ] INFO  [/]                    - Initializing Spring embedded WebApplicationContext
24-09-02.20:26:51.704 [main            ] INFO  ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2217 ms
24-09-02.20:26:51.992 [main            ] INFO  HikariDataSource       - HikariPool-1 - Starting...
24-09-02.20:26:52.649 [main            ] INFO  HikariDataSource       - HikariPool-1 - Start completed.
24-09-02.20:26:52.661 [main            ] INFO  HikariDataSource       - HikariPool-2 - Starting...
24-09-02.20:26:52.897 [main            ] INFO  HikariDataSource       - HikariPool-2 - Start completed.
24-09-02.20:26:54.679 [main            ] INFO  Version                - Redisson 3.23.4
24-09-02.20:26:55.167 [redisson-netty-2-6] INFO  MasterPubSubConnectionPool - 1 connections initialized for 8.138.41.137/8.138.41.137:16379
24-09-02.20:26:55.331 [redisson-netty-2-13] INFO  MasterConnectionPool   - 5 connections initialized for 8.138.41.137/8.138.41.137:16379
24-09-02.20:26:56.205 [main            ] INFO  StdSchedulerFactory    - Using default implementation for ThreadExecutor
24-09-02.20:26:56.215 [main            ] INFO  SchedulerSignalerImpl  - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
24-09-02.20:26:56.215 [main            ] INFO  QuartzScheduler        - Quartz Scheduler v.2.3.2 created.
24-09-02.20:26:56.216 [main            ] INFO  RAMJobStore            - RAMJobStore initialized.
24-09-02.20:26:56.216 [main            ] INFO  QuartzScheduler        - Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

24-09-02.20:26:56.216 [main            ] INFO  StdSchedulerFactory    - Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
24-09-02.20:26:56.216 [main            ] INFO  StdSchedulerFactory    - Quartz scheduler version: 2.3.2
24-09-02.20:26:56.216 [main            ] INFO  QuartzScheduler        - JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@32180efb
24-09-02.20:26:56.498 [main            ] INFO  EndpointLinksResolver  - Exposing 1 endpoint(s) beneath base path '/actuator'
24-09-02.20:26:56.625 [main            ] INFO  Http11NioProtocol      - Starting ProtocolHandler ["http-nio-8091"]
24-09-02.20:26:56.641 [main            ] INFO  TomcatWebServer        - Tomcat started on port(s): 8091 (http) with context path ''
24-09-02.20:26:56.644 [main            ] INFO  CachingConnectionFactory - Attempting to connect to: [8.138.41.137:5672]
24-09-02.20:26:56.767 [main            ] INFO  CachingConnectionFactory - Created new connection: rabbitConnectionFactory#735dc133:0/SimpleConnection@7734ddb8 [delegate=amqp://admin@8.138.41.137:5672/, localPort= 59984]
24-09-02.20:26:57.075 [main            ] INFO  SchedulerFactoryBean   - Starting Quartz Scheduler now
24-09-02.20:26:57.075 [main            ] INFO  QuartzScheduler        - Scheduler quartzScheduler_$_NON_CLUSTERED started.
24-09-02.20:26:57.092 [main            ] INFO  Application            - Started Application in 8.263 seconds (JVM running for 9.697)
24-09-02.20:26:58.040 [RMI TCP Connection(2)-172.19.166.31] INFO  [/]                    - Initializing Spring DispatcherServlet 'dispatcherServlet'
24-09-02.20:26:58.040 [RMI TCP Connection(2)-172.19.166.31] INFO  DispatcherServlet      - Initializing Servlet 'dispatcherServlet'
24-09-02.20:26:58.041 [RMI TCP Connection(2)-172.19.166.31] INFO  DispatcherServlet      - Completed initialization in 1 ms
24-09-02.20:27:00.010 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:27:00.038 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:27:00.559 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:27:00.560 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:27:00.560 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:27:00.560 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:27:05.008 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:27:05.009 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:27:05.010 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:27:05.010 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:27:05.010 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:27:05.028 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:27:10.013 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:27:10.032 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:27:10.033 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:27:10.033 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:27:10.034 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:27:10.034 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:27:15.013 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:27:15.048 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:27:15.069 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:27:15.069 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:27:15.069 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:27:15.069 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:27:20.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:27:20.026 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:27:20.045 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:27:20.046 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:27:20.046 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:27:20.046 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:27:25.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:27:25.025 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:27:25.045 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:27:25.045 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:27:25.045 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:27:25.045 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:27:30.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:27:30.007 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:27:30.007 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:27:30.007 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:27:30.007 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:27:30.024 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:27:35.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:27:35.016 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:27:35.016 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:27:35.016 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:27:35.016 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:27:35.034 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:27:40.006 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:27:40.007 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:27:40.007 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:27:40.007 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:27:40.007 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:27:40.025 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:27:45.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:27:45.026 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:27:45.046 [pool-7-thread-10] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:27:45.046 [pool-7-thread-10] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:27:45.046 [pool-7-thread-10] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:27:45.046 [pool-7-thread-10] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:27:50.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:27:50.024 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:27:50.043 [pool-7-thread-11] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:27:50.043 [pool-7-thread-11] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:27:50.043 [pool-7-thread-11] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:27:50.043 [pool-7-thread-11] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:27:55.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:27:55.026 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:27:55.047 [pool-7-thread-12] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:27:55.047 [pool-7-thread-12] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:27:55.047 [pool-7-thread-12] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:27:55.047 [pool-7-thread-12] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:28:00.001 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:28:00.020 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:28:00.040 [pool-7-thread-13] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:28:00.040 [pool-7-thread-13] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:28:00.040 [pool-7-thread-13] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:28:00.041 [pool-7-thread-13] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:28:05.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:28:05.032 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:28:05.033 [pool-7-thread-14] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:28:05.033 [pool-7-thread-14] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:28:05.033 [pool-7-thread-14] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:28:05.033 [pool-7-thread-14] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:28:10.008 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:28:10.010 [pool-7-thread-15] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:28:10.010 [pool-7-thread-15] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:28:10.010 [pool-7-thread-15] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:28:10.010 [pool-7-thread-15] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:28:10.027 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:28:15.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:28:15.028 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:28:15.055 [pool-7-thread-16] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:28:15.055 [pool-7-thread-16] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:28:15.055 [pool-7-thread-16] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:28:15.055 [pool-7-thread-16] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:28:20.001 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:28:20.025 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:28:20.026 [pool-7-thread-17] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:28:20.026 [pool-7-thread-17] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:28:20.026 [pool-7-thread-17] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:28:20.026 [pool-7-thread-17] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:28:25.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:28:25.030 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:28:25.031 [pool-7-thread-18] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:28:25.032 [pool-7-thread-18] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:28:25.032 [pool-7-thread-18] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:28:25.032 [pool-7-thread-18] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:28:30.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:28:30.031 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:28:30.032 [pool-7-thread-19] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:28:30.032 [pool-7-thread-19] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:28:30.032 [pool-7-thread-19] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:28:30.032 [pool-7-thread-19] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:28:35.006 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:28:35.007 [pool-7-thread-20] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:28:35.007 [pool-7-thread-20] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:28:35.007 [pool-7-thread-20] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:28:35.007 [pool-7-thread-20] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:28:35.032 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:28:40.004 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:28:40.004 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:28:40.004 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:28:40.005 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:28:40.005 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:28:40.022 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:28:45.009 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:28:45.009 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:28:45.009 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:28:45.009 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:28:45.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:28:45.258 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:28:50.005 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:28:50.023 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:28:50.024 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:28:50.024 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:28:50.024 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:28:50.024 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:28:55.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:28:55.033 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:28:55.054 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:28:55.054 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:28:55.054 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:28:55.055 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:29:00.006 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:29:00.024 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:29:00.025 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:29:00.025 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:29:00.025 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:29:00.025 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:29:05.012 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:29:05.035 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:29:05.036 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:29:05.036 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:29:05.037 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:29:05.037 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:29:10.003 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:29:10.022 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:29:10.023 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:29:10.023 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:29:10.023 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:29:10.023 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:29:15.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:29:15.042 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:29:15.062 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:29:15.062 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:29:15.062 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:29:15.062 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:29:20.002 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:29:20.020 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:29:20.021 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:29:20.021 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:29:20.021 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:29:20.022 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:29:25.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:29:25.021 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:29:25.040 [pool-7-thread-10] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:29:25.040 [pool-7-thread-10] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:29:25.040 [pool-7-thread-10] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:29:25.040 [pool-7-thread-10] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:29:30.006 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:29:30.024 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:29:30.025 [pool-7-thread-11] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:29:30.025 [pool-7-thread-11] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:29:30.025 [pool-7-thread-11] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:29:30.026 [pool-7-thread-11] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:29:35.002 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:29:35.021 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:29:35.023 [pool-7-thread-12] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:29:35.023 [pool-7-thread-12] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:29:35.023 [pool-7-thread-12] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:29:35.023 [pool-7-thread-12] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:29:40.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:29:40.032 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:29:40.052 [pool-7-thread-13] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:29:40.052 [pool-7-thread-13] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:29:40.052 [pool-7-thread-13] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:29:40.052 [pool-7-thread-13] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:29:45.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:29:45.019 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:29:45.039 [pool-7-thread-14] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:29:45.039 [pool-7-thread-14] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:29:45.039 [pool-7-thread-14] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:29:45.039 [pool-7-thread-14] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:29:50.015 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:29:50.033 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:29:50.034 [pool-7-thread-15] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:29:50.034 [pool-7-thread-15] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:29:50.034 [pool-7-thread-15] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:29:50.034 [pool-7-thread-15] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:29:52.468 [http-nio-8091-exec-2] INFO  RaffleActivityController - 活动装配，数据预热，开始 activityId:101
24-09-02.20:29:52.486 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: select sku,
               activity_id,
               activity_count_id,
               stock_count,
               stock_count_surplus
        from raffle_activity_sku where activity_id = ?;
24-09-02.20:29:52.486 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:29:52.486 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select sku,
               activity_id,
               activity_count_id,
               stock_count,
               stock_count_surplus
        from raffle_activity_sku where activity_id = ?; ::: [101]
24-09-02.20:29:52.589 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: select id,
               activity_count_id,
               total_count,
               day_count,
               month_count,
               create_time,
               update_time
        from raffle_activity_count where activity_count_id = ?;
24-09-02.20:29:52.589 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:29:52.589 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select id,
               activity_count_id,
               total_count,
               day_count,
               month_count,
               create_time,
               update_time
        from raffle_activity_count where activity_count_id = ?; ::: [101]
24-09-02.20:29:52.686 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: select strategy_id
        from raffle_activity where activity_id = ?;
24-09-02.20:29:52.686 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:29:52.686 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select strategy_id
        from raffle_activity where activity_id = ?; ::: [101]
24-09-02.20:29:52.726 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: select strategy_id,
               award_id,
               award_title,
               award_subtitle,
               award_count,
               award_count_surplus,
               award_rate,
               sort
        from strategy_award
        where strategy_id = ?
24-09-02.20:29:52.726 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:29:52.726 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select strategy_id,
               award_id,
               award_title,
               award_subtitle,
               award_count,
               award_count_surplus,
               award_rate,
               sort
        from strategy_award
        where strategy_id = ? ::: [100004]
24-09-02.20:29:52.920 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: select
            id,
            strategy_id,
            strategy_desc,
            rule_models,
            create_time,
            update_time
        from strategy
        where strategy_id = ?
24-09-02.20:29:52.920 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:29:52.920 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select
            id,
            strategy_id,
            strategy_desc,
            rule_models,
            create_time,
            update_time
        from strategy
        where strategy_id = ? ::: [100004]
24-09-02.20:29:52.962 [http-nio-8091-exec-2] INFO  RaffleActivityController - 活动装配，数据预热，完成 activityId:101
24-09-02.20:29:55.015 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:29:55.033 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:29:55.034 [pool-7-thread-16] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:29:55.034 [pool-7-thread-16] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:29:55.034 [pool-7-thread-16] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:29:55.035 [pool-7-thread-16] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:30:00.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:30:00.021 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:30:00.039 [pool-7-thread-17] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:30:00.039 [pool-7-thread-17] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:30:00.039 [pool-7-thread-17] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:30:00.039 [pool-7-thread-17] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:30:05.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:30:05.024 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:30:05.043 [pool-7-thread-18] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:30:05.044 [pool-7-thread-18] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:30:05.044 [pool-7-thread-18] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:30:05.044 [pool-7-thread-18] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:30:10.008 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:30:10.028 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:30:10.029 [pool-7-thread-19] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:30:10.029 [pool-7-thread-19] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:30:10.029 [pool-7-thread-19] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:30:10.029 [pool-7-thread-19] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:30:15.003 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:30:15.020 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:30:15.021 [pool-7-thread-20] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:30:15.021 [pool-7-thread-20] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:30:15.021 [pool-7-thread-20] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:30:15.021 [pool-7-thread-20] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:30:17.686 [http-nio-8091-exec-3] INFO  RaffleActivityController - 活动装配，数据预热，开始 activityId:101
24-09-02.20:30:17.688 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: select sku,
               activity_id,
               activity_count_id,
               stock_count,
               stock_count_surplus
        from raffle_activity_sku where activity_id = ?;
24-09-02.20:30:17.688 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:30:17.688 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select sku,
               activity_id,
               activity_count_id,
               stock_count,
               stock_count_surplus
        from raffle_activity_sku where activity_id = ?; ::: [101]
24-09-02.20:30:17.784 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: select id,
               activity_count_id,
               total_count,
               day_count,
               month_count,
               create_time,
               update_time
        from raffle_activity_count where activity_count_id = ?;
24-09-02.20:30:17.785 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:30:17.785 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select id,
               activity_count_id,
               total_count,
               day_count,
               month_count,
               create_time,
               update_time
        from raffle_activity_count where activity_count_id = ?; ::: [101]
24-09-02.20:30:17.844 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: select id,
               activity_id,
               activity_name,
               activity_desc,
               begin_date_time,
               end_date_time,
               stock_count,
               stock_count_surplus,
               activity_count_id,
               strategy_id,
               `state`,
               create_time,
               update_time
        from raffle_activity where activity_id = ?;
24-09-02.20:30:17.844 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:30:17.844 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select id,
               activity_id,
               activity_name,
               activity_desc,
               begin_date_time,
               end_date_time,
               stock_count,
               stock_count_surplus,
               activity_count_id,
               strategy_id,
               `state`,
               create_time,
               update_time
        from raffle_activity where activity_id = ?; ::: [101]
24-09-02.20:30:17.887 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: select strategy_id
        from raffle_activity where activity_id = ?;
24-09-02.20:30:17.888 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:30:17.888 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select strategy_id
        from raffle_activity where activity_id = ?; ::: [101]
24-09-02.20:30:17.927 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: select strategy_id,
               award_id,
               award_title,
               award_subtitle,
               award_count,
               award_count_surplus,
               award_rate,
               sort
        from strategy_award
        where strategy_id = ?
24-09-02.20:30:17.927 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:30:17.927 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select strategy_id,
               award_id,
               award_title,
               award_subtitle,
               award_count,
               award_count_surplus,
               award_rate,
               sort
        from strategy_award
        where strategy_id = ? ::: [100004]
24-09-02.20:30:18.195 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: select
            id,
            strategy_id,
            strategy_desc,
            rule_models,
            create_time,
            update_time
        from strategy
        where strategy_id = ?
24-09-02.20:30:18.195 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:30:18.195 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select
            id,
            strategy_id,
            strategy_desc,
            rule_models,
            create_time,
            update_time
        from strategy
        where strategy_id = ? ::: [100004]
24-09-02.20:30:18.233 [http-nio-8091-exec-3] INFO  RaffleActivityController - 活动装配，数据预热，完成 activityId:101
24-09-02.20:30:20.003 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:30:20.020 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:30:20.021 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:30:20.021 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:30:20.021 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:30:20.021 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:30:25.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:30:25.018 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:30:25.037 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:30:25.037 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:30:25.037 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:30:25.037 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:30:30.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:30:30.028 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:30:30.047 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:30:30.047 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:30:30.047 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:30:30.047 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:30:35.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:30:35.028 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:30:35.046 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:30:35.046 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:30:35.046 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:30:35.046 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:30:40.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:30:40.029 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:30:40.049 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:30:40.049 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:30:40.049 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:30:40.049 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:30:45.013 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:30:45.030 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:30:45.031 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:30:45.031 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:30:45.031 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:30:45.031 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:30:50.002 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:30:50.019 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:30:50.020 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:30:50.020 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:30:50.020 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:30:50.020 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:30:55.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:30:55.020 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:30:55.040 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:30:55.040 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:30:55.040 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:30:55.040 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:31:00.011 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:31:00.028 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:31:00.029 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:31:00.029 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:31:00.029 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:31:00.029 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:31:05.013 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:31:05.030 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:31:05.031 [pool-7-thread-10] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:31:05.031 [pool-7-thread-10] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:31:05.031 [pool-7-thread-10] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:31:05.031 [pool-7-thread-10] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:31:10.002 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:31:10.019 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:31:10.020 [pool-7-thread-11] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:31:10.020 [pool-7-thread-11] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:31:10.020 [pool-7-thread-11] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:31:10.020 [pool-7-thread-11] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:31:15.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:31:15.029 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:31:15.048 [pool-7-thread-12] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:31:15.048 [pool-7-thread-12] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:31:15.048 [pool-7-thread-12] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:31:15.048 [pool-7-thread-12] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:31:20.002 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:31:20.020 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:31:20.021 [pool-7-thread-13] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:31:20.021 [pool-7-thread-13] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:31:20.021 [pool-7-thread-13] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:31:20.021 [pool-7-thread-13] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:31:25.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:31:25.023 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:31:25.042 [pool-7-thread-14] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:31:25.042 [pool-7-thread-14] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:31:25.042 [pool-7-thread-14] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:31:25.042 [pool-7-thread-14] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:31:30.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:31:30.021 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:31:30.041 [pool-7-thread-15] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:31:30.041 [pool-7-thread-15] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:31:30.041 [pool-7-thread-15] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:31:30.041 [pool-7-thread-15] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:31:35.002 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:31:35.020 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:31:35.021 [pool-7-thread-16] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:31:35.021 [pool-7-thread-16] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:31:35.021 [pool-7-thread-16] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:31:35.021 [pool-7-thread-16] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:31:40.001 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:31:40.019 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:31:40.036 [pool-7-thread-17] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:31:40.036 [pool-7-thread-17] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:31:40.036 [pool-7-thread-17] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:31:40.036 [pool-7-thread-17] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:31:45.014 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:31:45.032 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:31:45.050 [pool-7-thread-18] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:31:45.051 [pool-7-thread-18] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:31:45.051 [pool-7-thread-18] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:31:45.051 [pool-7-thread-18] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:31:50.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:31:50.025 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:31:50.027 [pool-7-thread-19] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:31:50.027 [pool-7-thread-19] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:31:50.027 [pool-7-thread-19] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:31:50.027 [pool-7-thread-19] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:31:55.001 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:31:55.018 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:31:55.037 [pool-7-thread-20] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:31:55.037 [pool-7-thread-20] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:31:55.037 [pool-7-thread-20] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:31:55.037 [pool-7-thread-20] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:31:55.417 [http-nio-8091-exec-6] WARN  DefaultHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public com.big.market.infrastructure.types.model.Response<com.big.market.api.dto.ActivityDrawResponseDTO> com.big.market.infrastructure.trigger.http.RaffleActivityController.draw(com.big.market.api.dto.ActivityDrawRequestDTO)]
24-09-02.20:32:00.002 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:32:00.003 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:32:00.003 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:32:00.003 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:32:00.003 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:32:00.020 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:32:01.576 [http-nio-8091-exec-8] INFO  RaffleActivityController - 活动抽奖 userId:lyt activityId:101
24-09-02.20:32:01.693 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order where activity_id = ? and user_id = ? and order_state = 'create'
24-09-02.20:32:01.693 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:32:01.693 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order_0 where activity_id = ? and user_id = ? and order_state = 'create' ::: [101, lyt]
24-09-02.20:32:01.883 [http-nio-8091-exec-8] INFO  AbstractRaffleActivityPartake - 创建参与活动【已存在未消费】userId:lyt activityId:101 userRaffleEntity:{"activityName":"测试","orderId":"182735359748","orderState":"create","orderTime":"2024-08-24 22:33:41","strategyId":100004,"userId":"lyt"}
24-09-02.20:32:01.883 [http-nio-8091-exec-8] INFO  RaffleActivityController - 活动抽奖，创建订单 userId:lyt activityId:101 orderId:182735359748
24-09-02.20:32:01.959 [http-nio-8091-exec-8] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userId: lyt strategyId: 100004 ruleModel: rule_default awardId: 102
24-09-02.20:32:01.963 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ?
24-09-02.20:32:01.963 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:32:01.963 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ? ::: [100004, 102]
24-09-02.20:32:02.018 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: select
            tree_id,
            tree_name,
            tree_desc,
            tree_root_rule_key
        from rule_tree
        where tree_id = ?;
24-09-02.20:32:02.018 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:32:02.018 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select
            tree_id,
            tree_name,
            tree_desc,
            tree_root_rule_key
        from rule_tree
        where tree_id = ?; ::: [tree_lock]
24-09-02.20:32:02.039 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: select
            tree_id,
            rule_key,
            rule_desc,
            rule_value
        from rule_tree_node
        where tree_id = ?;
24-09-02.20:32:02.039 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:32:02.039 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select
            tree_id,
            rule_key,
            rule_desc,
            rule_value
        from rule_tree_node
        where tree_id = ?; ::: [tree_lock]
24-09-02.20:32:02.058 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: select
            tree_id,
            rule_node_from,
            rule_node_to,
            rule_limit_type,
            rule_limit_value
        from rule_tree_node_line
        where tree_id = ?;
24-09-02.20:32:02.058 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:32:02.058 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select
            tree_id,
            rule_node_from,
            rule_node_to,
            rule_limit_type,
            rule_limit_value
        from rule_tree_node_line
        where tree_id = ?; ::: [tree_lock]
24-09-02.20:32:02.107 [http-nio-8091-exec-8] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:lyt strategyId:100004 awardId:102
24-09-02.20:32:02.109 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: select activity_id
        from raffle_activity where strategy_id = ?;
24-09-02.20:32:02.109 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:32:02.109 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select activity_id
        from raffle_activity where strategy_id = ?; ::: [100004]
24-09-02.20:32:02.140 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:32:02.140 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:32:02.140 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:32:02.160 [http-nio-8091-exec-8] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0001
24-09-02.20:32:02.161 [http-nio-8091-exec-8] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:lyt strategyId:100004 awardId:102 ruleValue:100:1,100
24-09-02.20:32:02.161 [http-nio-8091-exec-8] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-09-02.20:32:02.161 [http-nio-8091-exec-8] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 lyt 100004 100 1,100
24-09-02.20:32:02.180 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: select strategy_id,
               award_id,
               award_title,
               award_subtitle,
               award_count,
               award_count_surplus,
               award_rate,
               sort
        from strategy_award
        where strategy_id = ?
        and award_id = ?
24-09-02.20:32:02.180 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:32:02.180 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select strategy_id,
               award_id,
               award_title,
               award_subtitle,
               award_count,
               award_count_surplus,
               award_rate,
               sort
        from strategy_award
        where strategy_id = ?
        and award_id = ? ::: [100004, 100]
24-09-02.20:32:02.296 [http-nio-8091-exec-8] INFO  SnowflakeUUIDUtils     - 11位数字的UUID:18305844673
24-09-02.20:32:02.355 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_award_record(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state) values(?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?);
24-09-02.20:32:02.355 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:32:02.355 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_award_record_0(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state, id) values(?, ?, ?, ?, ?, ?, ?, ?, ?); ::: [lyt, 101, 100004, 182735359748, 100, 随机积分, 2024-09-02 20:32:02.221, create, 1037464124101472256]
24-09-02.20:32:02.421 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        ) values (?,
                 ?,
                 ?,
                 ?,
                 ?);
24-09-02.20:32:02.421 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:32:02.421 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        , id) values (?, ?, ?, ?, ?, ?); ::: [send_award, lyt, {"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305844673","timeStamp":"2024-09-02 20:32:02.296"}, 18305844673, create, 1037464124407656449]
24-09-02.20:32:02.627 [http-nio-8091-exec-8] ERROR RaffleActivityController - 活动抽奖失败 userId:lyt activityId:101
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.executor.ExecutorException: Error preparing statement.  Cause: com.google.common.util.concurrent.UncheckedExecutionException: org.apache.shardingsphere.sql.parser.exception.SQLParsingException: You have an error in your SQL syntax
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:96)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:441)
	at com.sun.proxy.$Proxy240.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:288)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:67)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:152)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85)
	at com.sun.proxy.$Proxy252.updateUserRaffleOrderStatusUsed(Unknown Source)
	at com.big.market.infrastructure.infrastructure.persistent.repository.AwardRepository.lambda$saveUserAwardRecord$0(AwardRepository.java:89)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at com.big.market.infrastructure.infrastructure.persistent.repository.AwardRepository.saveUserAwardRecord(AwardRepository.java:82)
	at com.big.market.infrastructure.infrastructure.persistent.repository.AwardRepository$$FastClassBySpringCGLIB$$39a0c0e3.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)
	at com.big.market.infrastructure.infrastructure.persistent.repository.AwardRepository$$EnhancerBySpringCGLIB$$13cc43da.saveUserAwardRecord(<generated>)
	at com.big.market.infrastructure.domain.award.service.AwardService.saveUserAwardRecord(AwardService.java:57)
	at com.big.market.infrastructure.trigger.http.RaffleActivityController.draw(RaffleActivityController.java:135)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:926)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1791)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.ibatis.executor.ExecutorException: Error preparing statement.  Cause: com.google.common.util.concurrent.UncheckedExecutionException: org.apache.shardingsphere.sql.parser.exception.SQLParsingException: You have an error in your SQL syntax
	at org.apache.ibatis.executor.statement.BaseStatementHandler.prepare(BaseStatementHandler.java:97)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.prepare(RoutingStatementHandler.java:59)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:87)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:49)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:427)
	... 75 common frames omitted
Caused by: com.google.common.util.concurrent.UncheckedExecutionException: org.apache.shardingsphere.sql.parser.exception.SQLParsingException: You have an error in your SQL syntax
	at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2087)
	at com.google.common.cache.LocalCache.get(LocalCache.java:4019)
	at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:4042)
	at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:5024)
	at com.google.common.cache.LocalCache$LocalLoadingCache.getUnchecked(LocalCache.java:5031)
	at org.apache.shardingsphere.infra.parser.sql.SQLStatementParserEngine.parse(SQLStatementParserEngine.java:48)
	at org.apache.shardingsphere.infra.parser.ShardingSphereSQLParserEngine.parse0(ShardingSphereSQLParserEngine.java:71)
	at org.apache.shardingsphere.infra.parser.ShardingSphereSQLParserEngine.parse(ShardingSphereSQLParserEngine.java:60)
	at org.apache.shardingsphere.driver.jdbc.core.statement.ShardingSpherePreparedStatement.<init>(ShardingSpherePreparedStatement.java:157)
	at org.apache.shardingsphere.driver.jdbc.core.statement.ShardingSpherePreparedStatement.<init>(ShardingSpherePreparedStatement.java:128)
	at org.apache.shardingsphere.driver.jdbc.core.connection.ShardingSphereConnection.prepareStatement(ShardingSphereConnection.java:78)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.instantiateStatement(PreparedStatementHandler.java:86)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.prepare(BaseStatementHandler.java:88)
	... 86 common frames omitted
Caused by: org.apache.shardingsphere.sql.parser.exception.SQLParsingException: You have an error in your SQL syntax
	at org.apache.shardingsphere.sql.parser.core.database.parser.SQLParserExecutor.twoPhaseParse(SQLParserExecutor.java:68)
	at org.apache.shardingsphere.sql.parser.core.database.parser.SQLParserExecutor.parse(SQLParserExecutor.java:49)
	at org.apache.shardingsphere.sql.parser.api.SQLParserEngine.parse(SQLParserEngine.java:51)
	at org.apache.shardingsphere.infra.parser.sql.SQLStatementParserExecutor.parse(SQLStatementParserExecutor.java:47)
	at org.apache.shardingsphere.infra.parser.cache.SQLStatementCacheLoader.load(SQLStatementCacheLoader.java:40)
	at org.apache.shardingsphere.infra.parser.cache.SQLStatementCacheLoader.load(SQLStatementCacheLoader.java:29)
	at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3576)
	at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2318)
	at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2191)
	at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2081)
	... 98 common frames omitted
24-09-02.20:32:05.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:32:05.004 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:32:05.004 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:32:05.004 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:32:05.004 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:32:05.020 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:32:10.002 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:32:10.002 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:32:10.002 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:32:10.002 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:32:10.002 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:32:10.020 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:32:15.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:32:15.002 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:32:15.002 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:32:15.002 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:32:15.002 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:32:15.020 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:32:20.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:32:20.008 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:32:20.008 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:32:20.008 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:32:20.008 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:32:20.025 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:32:25.010 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:32:25.010 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:32:25.010 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:32:25.010 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:32:25.010 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:32:25.028 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:32:30.000 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:32:30.018 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:32:30.018 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:32:30.018 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:32:30.018 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:32:30.018 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:32:35.013 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:32:35.030 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:32:35.031 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:32:35.031 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:32:35.031 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:32:35.031 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:32:40.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:32:40.034 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:32:40.052 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:32:40.052 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:32:40.052 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:32:40.052 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:32:45.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:32:45.031 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:32:45.050 [pool-7-thread-10] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:32:45.050 [pool-7-thread-10] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:32:45.050 [pool-7-thread-10] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:32:45.050 [pool-7-thread-10] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:32:50.004 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:32:50.021 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:32:50.022 [pool-7-thread-11] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:32:50.022 [pool-7-thread-11] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:32:50.022 [pool-7-thread-11] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:32:50.022 [pool-7-thread-11] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:32:55.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:32:55.027 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:32:55.046 [pool-7-thread-12] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:32:55.046 [pool-7-thread-12] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:32:55.046 [pool-7-thread-12] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:32:55.046 [pool-7-thread-12] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:33:00.009 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:33:00.026 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:33:00.027 [pool-7-thread-13] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:33:00.027 [pool-7-thread-13] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:33:00.027 [pool-7-thread-13] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:33:00.027 [pool-7-thread-13] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:33:05.007 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:33:05.025 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:33:05.044 [pool-7-thread-14] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:33:05.044 [pool-7-thread-14] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:33:05.044 [pool-7-thread-14] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:33:05.044 [pool-7-thread-14] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:33:10.012 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:33:10.029 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:33:10.048 [pool-7-thread-15] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:33:10.048 [pool-7-thread-15] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:33:10.048 [pool-7-thread-15] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:33:10.048 [pool-7-thread-15] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:33:15.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:33:15.023 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:33:15.024 [pool-7-thread-16] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:33:15.024 [pool-7-thread-16] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:33:15.024 [pool-7-thread-16] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:33:15.024 [pool-7-thread-16] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:33:20.007 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:33:20.024 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:33:20.042 [pool-7-thread-17] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:33:20.042 [pool-7-thread-17] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:33:20.042 [pool-7-thread-17] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:33:20.042 [pool-7-thread-17] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:33:25.000 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:33:25.000 [pool-7-thread-18] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:33:25.000 [pool-7-thread-18] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:33:25.000 [pool-7-thread-18] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:33:25.000 [pool-7-thread-18] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:33:25.017 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:33:30.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:33:30.018 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:33:30.019 [pool-7-thread-19] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:33:30.019 [pool-7-thread-19] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@752c26b3], lock=Optional.empty, window=Optional.empty)
24-09-02.20:33:30.019 [pool-7-thread-19] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:33:30.019 [pool-7-thread-19] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:33:34.460 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-2] INFO  SimpleMessageListenerContainer - Waiting for workers to finish.
24-09-02.20:33:34.479 [SpringApplicationShutdownHook] INFO  QuartzScheduler        - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
24-09-02.20:33:34.479 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-2] INFO  SimpleMessageListenerContainer - Waiting for workers to finish.
24-09-02.20:33:34.759 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-2] INFO  SimpleMessageListenerContainer - Successfully waited for workers to finish.
24-09-02.20:33:34.759 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-2] INFO  SimpleMessageListenerContainer - Successfully waited for workers to finish.
24-09-02.20:33:34.971 [SpringApplicationShutdownHook] INFO  SchedulerFactoryBean   - Shutting down Quartz Scheduler
24-09-02.20:33:34.971 [SpringApplicationShutdownHook] INFO  QuartzScheduler        - Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
24-09-02.20:33:34.971 [SpringApplicationShutdownHook] INFO  QuartzScheduler        - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
24-09-02.20:33:34.972 [SpringApplicationShutdownHook] INFO  QuartzScheduler        - Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
24-09-02.20:33:34.972 [SpringApplicationShutdownHook] INFO  SimpleMessageListenerContainer - Shutdown ignored - container is already stopped
24-09-02.20:33:34.972 [SpringApplicationShutdownHook] INFO  SimpleMessageListenerContainer - Shutdown ignored - container is already stopped
24-09-02.20:33:35.056 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown initiated...
24-09-02.20:33:35.063 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown completed.
24-09-02.20:33:35.063 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-2 - Shutdown initiated...
24-09-02.20:33:35.068 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-2 - Shutdown completed.
24-09-02.20:33:38.644 [main            ] INFO  Application            - Starting Application using Java 1.8.0_171 on LAPTOP-6UTBSJGB with PID 36000 (C:\Users\27132\Java\big-market\big-market-app\target\classes started by 27132 in C:\Users\27132\Java\big-market)
24-09-02.20:33:38.647 [main            ] INFO  Application            - The following 1 profile is active: "dev"
24-09-02.20:33:39.908 [main            ] INFO  RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
24-09-02.20:33:39.911 [main            ] INFO  RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
24-09-02.20:33:39.969 [main            ] INFO  RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 43 ms. Found 0 Redis repository interfaces.
24-09-02.20:33:40.320 [main            ] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
24-09-02.20:33:40.332 [main            ] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
24-09-02.20:33:40.525 [main            ] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$EnhancerBySpringCGLIB$$1eda7804] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
24-09-02.20:33:40.845 [main            ] INFO  TomcatWebServer        - Tomcat initialized with port(s): 8091 (http)
24-09-02.20:33:40.855 [main            ] INFO  Http11NioProtocol      - Initializing ProtocolHandler ["http-nio-8091"]
24-09-02.20:33:40.855 [main            ] INFO  StandardService        - Starting service [Tomcat]
24-09-02.20:33:40.857 [main            ] INFO  StandardEngine         - Starting Servlet engine: [Apache Tomcat/9.0.75]
24-09-02.20:33:41.076 [main            ] INFO  [/]                    - Initializing Spring embedded WebApplicationContext
24-09-02.20:33:41.076 [main            ] INFO  ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2253 ms
24-09-02.20:33:41.357 [main            ] INFO  HikariDataSource       - HikariPool-1 - Starting...
24-09-02.20:33:42.004 [main            ] INFO  HikariDataSource       - HikariPool-1 - Start completed.
24-09-02.20:33:42.023 [main            ] INFO  HikariDataSource       - HikariPool-2 - Starting...
24-09-02.20:33:42.254 [main            ] INFO  HikariDataSource       - HikariPool-2 - Start completed.
24-09-02.20:33:44.204 [main            ] INFO  Version                - Redisson 3.23.4
24-09-02.20:33:44.681 [redisson-netty-2-5] INFO  MasterPubSubConnectionPool - 1 connections initialized for 8.138.41.137/8.138.41.137:16379
24-09-02.20:33:44.837 [redisson-netty-2-13] INFO  MasterConnectionPool   - 5 connections initialized for 8.138.41.137/8.138.41.137:16379
24-09-02.20:33:45.734 [main            ] INFO  StdSchedulerFactory    - Using default implementation for ThreadExecutor
24-09-02.20:33:45.744 [main            ] INFO  SchedulerSignalerImpl  - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
24-09-02.20:33:45.745 [main            ] INFO  QuartzScheduler        - Quartz Scheduler v.2.3.2 created.
24-09-02.20:33:45.745 [main            ] INFO  RAMJobStore            - RAMJobStore initialized.
24-09-02.20:33:45.746 [main            ] INFO  QuartzScheduler        - Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

24-09-02.20:33:45.746 [main            ] INFO  StdSchedulerFactory    - Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
24-09-02.20:33:45.746 [main            ] INFO  StdSchedulerFactory    - Quartz scheduler version: 2.3.2
24-09-02.20:33:45.746 [main            ] INFO  QuartzScheduler        - JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@57386162
24-09-02.20:33:46.067 [main            ] INFO  EndpointLinksResolver  - Exposing 1 endpoint(s) beneath base path '/actuator'
24-09-02.20:33:46.183 [main            ] INFO  Http11NioProtocol      - Starting ProtocolHandler ["http-nio-8091"]
24-09-02.20:33:46.204 [main            ] INFO  TomcatWebServer        - Tomcat started on port(s): 8091 (http) with context path ''
24-09-02.20:33:46.207 [main            ] INFO  CachingConnectionFactory - Attempting to connect to: [8.138.41.137:5672]
24-09-02.20:33:46.318 [main            ] INFO  CachingConnectionFactory - Created new connection: rabbitConnectionFactory#1e8b0ab5:0/SimpleConnection@161974d1 [delegate=amqp://admin@8.138.41.137:5672/, localPort= 60259]
24-09-02.20:33:46.585 [main            ] INFO  SchedulerFactoryBean   - Starting Quartz Scheduler now
24-09-02.20:33:46.585 [main            ] INFO  QuartzScheduler        - Scheduler quartzScheduler_$_NON_CLUSTERED started.
24-09-02.20:33:46.602 [main            ] INFO  Application            - Started Application in 8.475 seconds (JVM running for 9.599)
24-09-02.20:33:47.134 [RMI TCP Connection(2)-172.19.166.31] INFO  [/]                    - Initializing Spring DispatcherServlet 'dispatcherServlet'
24-09-02.20:33:47.134 [RMI TCP Connection(2)-172.19.166.31] INFO  DispatcherServlet      - Initializing Servlet 'dispatcherServlet'
24-09-02.20:33:47.136 [RMI TCP Connection(2)-172.19.166.31] INFO  DispatcherServlet      - Completed initialization in 2 ms
24-09-02.20:33:50.014 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:33:50.041 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:33:50.556 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:33:50.556 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@52389520], lock=Optional.empty, window=Optional.empty)
24-09-02.20:33:50.556 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:33:50.556 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:33:53.977 [http-nio-8091-exec-1] INFO  RaffleActivityController - 活动抽奖 userId:lyt activityId:101
24-09-02.20:33:54.109 [http-nio-8091-exec-1] INFO  ShardingSphere-SQL     - Logic SQL: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order where activity_id = ? and user_id = ? and order_state = 'create'
24-09-02.20:33:54.109 [http-nio-8091-exec-1] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:33:54.109 [http-nio-8091-exec-1] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order_0 where activity_id = ? and user_id = ? and order_state = 'create' ::: [101, lyt]
24-09-02.20:33:54.295 [http-nio-8091-exec-1] INFO  AbstractRaffleActivityPartake - 创建参与活动【已存在未消费】userId:lyt activityId:101 userRaffleEntity:{"activityName":"测试","orderId":"182735359748","orderState":"create","orderTime":"2024-08-24 22:33:41","strategyId":100004,"userId":"lyt"}
24-09-02.20:33:54.295 [http-nio-8091-exec-1] INFO  RaffleActivityController - 活动抽奖，创建订单 userId:lyt activityId:101 orderId:182735359748
24-09-02.20:33:54.387 [http-nio-8091-exec-1] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userId: lyt strategyId: 100004 ruleModel: rule_default awardId: 101
24-09-02.20:33:54.393 [http-nio-8091-exec-1] INFO  ShardingSphere-SQL     - Logic SQL: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ?
24-09-02.20:33:54.393 [http-nio-8091-exec-1] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:33:54.393 [http-nio-8091-exec-1] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ? ::: [100004, 101]
24-09-02.20:33:54.469 [http-nio-8091-exec-1] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:lyt strategyId:100004 awardId:101
24-09-02.20:33:54.471 [http-nio-8091-exec-1] INFO  ShardingSphere-SQL     - Logic SQL: select activity_id
        from raffle_activity where strategy_id = ?;
24-09-02.20:33:54.471 [http-nio-8091-exec-1] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:33:54.471 [http-nio-8091-exec-1] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select activity_id
        from raffle_activity where strategy_id = ?; ::: [100004]
24-09-02.20:33:54.502 [http-nio-8091-exec-1] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:33:54.502 [http-nio-8091-exec-1] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:33:54.502 [http-nio-8091-exec-1] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:33:54.525 [http-nio-8091-exec-1] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0001
24-09-02.20:33:54.526 [http-nio-8091-exec-1] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:lyt strategyId:100004 awardId:101 ruleValue:100:1,100
24-09-02.20:33:54.528 [http-nio-8091-exec-1] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-09-02.20:33:54.528 [http-nio-8091-exec-1] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 lyt 100004 100 1,100
24-09-02.20:33:54.623 [http-nio-8091-exec-1] INFO  SnowflakeUUIDUtils     - 11位数字的UUID:18305849385
24-09-02.20:33:54.670 [http-nio-8091-exec-1] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_award_record(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state) values(?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?);
24-09-02.20:33:54.670 [http-nio-8091-exec-1] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:33:54.670 [http-nio-8091-exec-1] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_award_record_0(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state, id) values(?, ?, ?, ?, ?, ?, ?, ?, ?); ::: [lyt, 101, 100004, 182735359748, 100, 随机积分, 2024-09-02 20:33:54.559, create, 1037464595197308928]
24-09-02.20:33:54.739 [http-nio-8091-exec-1] INFO  ShardingSphere-SQL     - Logic SQL: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        ) values (?,
                 ?,
                 ?,
                 ?,
                 ?);
24-09-02.20:33:54.739 [http-nio-8091-exec-1] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:33:54.739 [http-nio-8091-exec-1] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        , id) values (?, ?, ?, ?, ?, ?); ::: [send_award, lyt, {"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305849385","timeStamp":"2024-09-02 20:33:54.623"}, 18305849385, create, 1037464595503493121]
24-09-02.20:33:54.931 [http-nio-8091-exec-1] ERROR RaffleActivityController - 活动抽奖失败 userId:lyt activityId:101
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.executor.ExecutorException: Error preparing statement.  Cause: com.google.common.util.concurrent.UncheckedExecutionException: org.apache.shardingsphere.sql.parser.exception.SQLParsingException: You have an error in your SQL syntax
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:96)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:441)
	at com.sun.proxy.$Proxy240.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:288)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:67)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:152)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85)
	at com.sun.proxy.$Proxy252.updateUserRaffleOrderStatusUsed(Unknown Source)
	at com.big.market.infrastructure.infrastructure.persistent.repository.AwardRepository.lambda$saveUserAwardRecord$0(AwardRepository.java:89)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at com.big.market.infrastructure.infrastructure.persistent.repository.AwardRepository.saveUserAwardRecord(AwardRepository.java:82)
	at com.big.market.infrastructure.infrastructure.persistent.repository.AwardRepository$$FastClassBySpringCGLIB$$39a0c0e3.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)
	at com.big.market.infrastructure.infrastructure.persistent.repository.AwardRepository$$EnhancerBySpringCGLIB$$f65af817.saveUserAwardRecord(<generated>)
	at com.big.market.infrastructure.domain.award.service.AwardService.saveUserAwardRecord(AwardService.java:57)
	at com.big.market.infrastructure.trigger.http.RaffleActivityController.draw(RaffleActivityController.java:135)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:926)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1791)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.ibatis.executor.ExecutorException: Error preparing statement.  Cause: com.google.common.util.concurrent.UncheckedExecutionException: org.apache.shardingsphere.sql.parser.exception.SQLParsingException: You have an error in your SQL syntax
	at org.apache.ibatis.executor.statement.BaseStatementHandler.prepare(BaseStatementHandler.java:97)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.prepare(RoutingStatementHandler.java:59)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:87)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:49)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:427)
	... 75 common frames omitted
Caused by: com.google.common.util.concurrent.UncheckedExecutionException: org.apache.shardingsphere.sql.parser.exception.SQLParsingException: You have an error in your SQL syntax
	at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2087)
	at com.google.common.cache.LocalCache.get(LocalCache.java:4019)
	at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:4042)
	at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:5024)
	at com.google.common.cache.LocalCache$LocalLoadingCache.getUnchecked(LocalCache.java:5031)
	at org.apache.shardingsphere.infra.parser.sql.SQLStatementParserEngine.parse(SQLStatementParserEngine.java:48)
	at org.apache.shardingsphere.infra.parser.ShardingSphereSQLParserEngine.parse0(ShardingSphereSQLParserEngine.java:71)
	at org.apache.shardingsphere.infra.parser.ShardingSphereSQLParserEngine.parse(ShardingSphereSQLParserEngine.java:60)
	at org.apache.shardingsphere.driver.jdbc.core.statement.ShardingSpherePreparedStatement.<init>(ShardingSpherePreparedStatement.java:157)
	at org.apache.shardingsphere.driver.jdbc.core.statement.ShardingSpherePreparedStatement.<init>(ShardingSpherePreparedStatement.java:128)
	at org.apache.shardingsphere.driver.jdbc.core.connection.ShardingSphereConnection.prepareStatement(ShardingSphereConnection.java:78)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.instantiateStatement(PreparedStatementHandler.java:86)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.prepare(BaseStatementHandler.java:88)
	... 86 common frames omitted
Caused by: org.apache.shardingsphere.sql.parser.exception.SQLParsingException: You have an error in your SQL syntax
	at org.apache.shardingsphere.sql.parser.core.database.parser.SQLParserExecutor.twoPhaseParse(SQLParserExecutor.java:68)
	at org.apache.shardingsphere.sql.parser.core.database.parser.SQLParserExecutor.parse(SQLParserExecutor.java:49)
	at org.apache.shardingsphere.sql.parser.api.SQLParserEngine.parse(SQLParserEngine.java:51)
	at org.apache.shardingsphere.infra.parser.sql.SQLStatementParserExecutor.parse(SQLStatementParserExecutor.java:47)
	at org.apache.shardingsphere.infra.parser.cache.SQLStatementCacheLoader.load(SQLStatementCacheLoader.java:40)
	at org.apache.shardingsphere.infra.parser.cache.SQLStatementCacheLoader.load(SQLStatementCacheLoader.java:29)
	at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3576)
	at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2318)
	at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2191)
	at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2081)
	... 98 common frames omitted
24-09-02.20:33:55.006 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:33:55.008 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:33:55.008 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@52389520], lock=Optional.empty, window=Optional.empty)
24-09-02.20:33:55.008 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:33:55.008 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:33:55.025 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:34:00.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:34:00.029 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:34:00.031 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:34:00.031 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@52389520], lock=Optional.empty, window=Optional.empty)
24-09-02.20:34:00.031 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:34:00.031 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:34:05.016 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:34:05.034 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:34:05.054 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:34:05.054 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@52389520], lock=Optional.empty, window=Optional.empty)
24-09-02.20:34:05.054 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:34:05.054 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:34:10.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:34:10.028 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:34:10.031 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:34:10.031 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@52389520], lock=Optional.empty, window=Optional.empty)
24-09-02.20:34:10.031 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:34:10.031 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:34:15.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:34:15.027 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:34:15.047 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:34:15.047 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@52389520], lock=Optional.empty, window=Optional.empty)
24-09-02.20:34:15.047 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:34:15.047 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:34:20.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:34:20.025 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:34:20.044 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:34:20.044 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@52389520], lock=Optional.empty, window=Optional.empty)
24-09-02.20:34:20.044 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:34:20.045 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:34:25.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:34:25.023 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:34:25.044 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:34:25.044 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@52389520], lock=Optional.empty, window=Optional.empty)
24-09-02.20:34:25.044 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:34:25.044 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:34:25.882 [http-nio-8091-exec-3] INFO  RaffleActivityController - 活动抽奖 userId:lyt activityId:101
24-09-02.20:34:25.901 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order where activity_id = ? and user_id = ? and order_state = 'create'
24-09-02.20:34:25.901 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:34:25.901 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order_0 where activity_id = ? and user_id = ? and order_state = 'create' ::: [101, lyt]
24-09-02.20:34:25.938 [http-nio-8091-exec-3] INFO  AbstractRaffleActivityPartake - 创建参与活动【已存在未消费】userId:lyt activityId:101 userRaffleEntity:{"activityName":"测试","orderId":"182735359748","orderState":"create","orderTime":"2024-08-24 22:33:41","strategyId":100004,"userId":"lyt"}
24-09-02.20:34:25.938 [http-nio-8091-exec-3] INFO  RaffleActivityController - 活动抽奖，创建订单 userId:lyt activityId:101 orderId:182735359748
24-09-02.20:34:25.998 [http-nio-8091-exec-3] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userId: lyt strategyId: 100004 ruleModel: rule_default awardId: 103
24-09-02.20:34:25.999 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ?
24-09-02.20:34:25.999 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:34:25.999 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ? ::: [100004, 103]
24-09-02.20:34:26.052 [http-nio-8091-exec-3] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:lyt strategyId:100004 awardId:103
24-09-02.20:34:26.055 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: select activity_id
        from raffle_activity where strategy_id = ?;
24-09-02.20:34:26.055 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:34:26.055 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select activity_id
        from raffle_activity where strategy_id = ?; ::: [100004]
24-09-02.20:34:26.073 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:34:26.073 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:34:26.073 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:34:26.092 [http-nio-8091-exec-3] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0001
24-09-02.20:34:26.092 [http-nio-8091-exec-3] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:lyt strategyId:100004 awardId:103 ruleValue:100:1,100
24-09-02.20:34:26.092 [http-nio-8091-exec-3] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-09-02.20:34:26.092 [http-nio-8091-exec-3] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 lyt 100004 100 1,100
24-09-02.20:34:26.111 [http-nio-8091-exec-3] INFO  SnowflakeUUIDUtils     - 11位数字的UUID:18305850705
24-09-02.20:34:28.901 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_award_record(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state) values(?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?);
24-09-02.20:34:28.901 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:34:28.901 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_award_record_0(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state, id) values(?, ?, ?, ?, ?, ?, ?, ?, ?); ::: [lyt, 101, 100004, 182735359748, 100, 随机积分, 2024-09-02 20:34:26.109, create, 1037464738831249408]
24-09-02.20:34:29.773 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        ) values (?,
                 ?,
                 ?,
                 ?,
                 ?);
24-09-02.20:34:29.773 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:34:29.773 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        , id) values (?, ?, ?, ?, ?, ?); ::: [send_award, lyt, {"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305850705","timeStamp":"2024-09-02 20:34:26.111"}, 18305850705, create, 1037464742484488193]
24-09-02.20:35:38.331 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:35:38.332 [HikariPool-2 housekeeper] WARN  HikariPool             - HikariPool-2 - Thread starvation or clock leap detected (housekeeper delta=1m25s947ms249µs700ns).
24-09-02.20:35:38.332 [HikariPool-1 housekeeper] WARN  HikariPool             - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m26s211ms380µs100ns).
24-09-02.20:35:38.352 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:35:38.353 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:35:38.353 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@52389520], lock=Optional.empty, window=Optional.empty)
24-09-02.20:35:38.353 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:35:38.353 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:35:38.381 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-2] INFO  SimpleMessageListenerContainer - Waiting for workers to finish.
24-09-02.20:35:38.399 [SpringApplicationShutdownHook] INFO  QuartzScheduler        - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
24-09-02.20:35:38.399 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-2] INFO  SimpleMessageListenerContainer - Waiting for workers to finish.
24-09-02.20:35:38.411 [http-nio-8091-exec-3] ERROR RaffleActivityController - 活动抽奖失败 userId:lyt activityId:101
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.executor.ExecutorException: Error preparing statement.  Cause: com.google.common.util.concurrent.UncheckedExecutionException: org.apache.shardingsphere.sql.parser.exception.SQLParsingException: You have an error in your SQL syntax
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:96)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:441)
	at com.sun.proxy.$Proxy240.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:288)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:67)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:152)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85)
	at com.sun.proxy.$Proxy252.updateUserRaffleOrderStatusUsed(Unknown Source)
	at com.big.market.infrastructure.infrastructure.persistent.repository.AwardRepository.lambda$saveUserAwardRecord$0(AwardRepository.java:89)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at com.big.market.infrastructure.infrastructure.persistent.repository.AwardRepository.saveUserAwardRecord(AwardRepository.java:82)
	at com.big.market.infrastructure.infrastructure.persistent.repository.AwardRepository$$FastClassBySpringCGLIB$$39a0c0e3.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)
	at com.big.market.infrastructure.infrastructure.persistent.repository.AwardRepository$$EnhancerBySpringCGLIB$$f65af817.saveUserAwardRecord(<generated>)
	at com.big.market.infrastructure.domain.award.service.AwardService.saveUserAwardRecord(AwardService.java:57)
	at com.big.market.infrastructure.trigger.http.RaffleActivityController.draw(RaffleActivityController.java:135)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:926)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1791)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.ibatis.executor.ExecutorException: Error preparing statement.  Cause: com.google.common.util.concurrent.UncheckedExecutionException: org.apache.shardingsphere.sql.parser.exception.SQLParsingException: You have an error in your SQL syntax
	at org.apache.ibatis.executor.statement.BaseStatementHandler.prepare(BaseStatementHandler.java:97)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.prepare(RoutingStatementHandler.java:59)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:87)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:49)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:427)
	... 75 common frames omitted
Caused by: com.google.common.util.concurrent.UncheckedExecutionException: org.apache.shardingsphere.sql.parser.exception.SQLParsingException: You have an error in your SQL syntax
	at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2087)
	at com.google.common.cache.LocalCache.get(LocalCache.java:4019)
	at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:4042)
	at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:5024)
	at com.google.common.cache.LocalCache$LocalLoadingCache.getUnchecked(LocalCache.java:5031)
	at org.apache.shardingsphere.infra.parser.sql.SQLStatementParserEngine.parse(SQLStatementParserEngine.java:48)
	at org.apache.shardingsphere.infra.parser.ShardingSphereSQLParserEngine.parse0(ShardingSphereSQLParserEngine.java:71)
	at org.apache.shardingsphere.infra.parser.ShardingSphereSQLParserEngine.parse(ShardingSphereSQLParserEngine.java:60)
	at org.apache.shardingsphere.driver.jdbc.core.statement.ShardingSpherePreparedStatement.<init>(ShardingSpherePreparedStatement.java:157)
	at org.apache.shardingsphere.driver.jdbc.core.statement.ShardingSpherePreparedStatement.<init>(ShardingSpherePreparedStatement.java:128)
	at org.apache.shardingsphere.driver.jdbc.core.connection.ShardingSphereConnection.prepareStatement(ShardingSphereConnection.java:78)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.instantiateStatement(PreparedStatementHandler.java:86)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.prepare(BaseStatementHandler.java:88)
	... 86 common frames omitted
Caused by: org.apache.shardingsphere.sql.parser.exception.SQLParsingException: You have an error in your SQL syntax
	at org.apache.shardingsphere.sql.parser.core.database.parser.SQLParserExecutor.twoPhaseParse(SQLParserExecutor.java:68)
	at org.apache.shardingsphere.sql.parser.core.database.parser.SQLParserExecutor.parse(SQLParserExecutor.java:49)
	at org.apache.shardingsphere.sql.parser.api.SQLParserEngine.parse(SQLParserEngine.java:51)
	at org.apache.shardingsphere.infra.parser.sql.SQLStatementParserExecutor.parse(SQLStatementParserExecutor.java:47)
	at org.apache.shardingsphere.infra.parser.cache.SQLStatementCacheLoader.load(SQLStatementCacheLoader.java:40)
	at org.apache.shardingsphere.infra.parser.cache.SQLStatementCacheLoader.load(SQLStatementCacheLoader.java:29)
	at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3576)
	at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2318)
	at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2191)
	at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2081)
	... 98 common frames omitted
24-09-02.20:35:39.366 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-2] INFO  SimpleMessageListenerContainer - Successfully waited for workers to finish.
24-09-02.20:35:39.366 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-2] INFO  SimpleMessageListenerContainer - Successfully waited for workers to finish.
24-09-02.20:35:39.581 [SpringApplicationShutdownHook] INFO  SchedulerFactoryBean   - Shutting down Quartz Scheduler
24-09-02.20:35:39.581 [SpringApplicationShutdownHook] INFO  QuartzScheduler        - Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
24-09-02.20:35:39.581 [SpringApplicationShutdownHook] INFO  QuartzScheduler        - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
24-09-02.20:35:39.583 [SpringApplicationShutdownHook] INFO  QuartzScheduler        - Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
24-09-02.20:35:39.583 [SpringApplicationShutdownHook] INFO  SimpleMessageListenerContainer - Shutdown ignored - container is already stopped
24-09-02.20:35:39.583 [SpringApplicationShutdownHook] INFO  SimpleMessageListenerContainer - Shutdown ignored - container is already stopped
24-09-02.20:35:39.665 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown initiated...
24-09-02.20:35:39.672 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown completed.
24-09-02.20:35:39.674 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-2 - Shutdown initiated...
24-09-02.20:35:39.681 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-2 - Shutdown completed.
24-09-02.20:35:42.828 [main            ] INFO  Application            - Starting Application using Java 1.8.0_171 on LAPTOP-6UTBSJGB with PID 8688 (C:\Users\27132\Java\big-market\big-market-app\target\classes started by 27132 in C:\Users\27132\Java\big-market)
24-09-02.20:35:42.831 [main            ] INFO  Application            - The following 1 profile is active: "dev"
24-09-02.20:35:44.144 [main            ] INFO  RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
24-09-02.20:35:44.146 [main            ] INFO  RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
24-09-02.20:35:44.204 [main            ] INFO  RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 43 ms. Found 0 Redis repository interfaces.
24-09-02.20:35:44.578 [main            ] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
24-09-02.20:35:44.592 [main            ] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
24-09-02.20:35:44.796 [main            ] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$EnhancerBySpringCGLIB$$707c8221] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
24-09-02.20:35:45.148 [main            ] INFO  TomcatWebServer        - Tomcat initialized with port(s): 8091 (http)
24-09-02.20:35:45.158 [main            ] INFO  Http11NioProtocol      - Initializing ProtocolHandler ["http-nio-8091"]
24-09-02.20:35:45.159 [main            ] INFO  StandardService        - Starting service [Tomcat]
24-09-02.20:35:45.159 [main            ] INFO  StandardEngine         - Starting Servlet engine: [Apache Tomcat/9.0.75]
24-09-02.20:35:45.408 [main            ] INFO  [/]                    - Initializing Spring embedded WebApplicationContext
24-09-02.20:35:45.408 [main            ] INFO  ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2396 ms
24-09-02.20:35:45.712 [main            ] INFO  HikariDataSource       - HikariPool-1 - Starting...
24-09-02.20:35:46.373 [main            ] INFO  HikariDataSource       - HikariPool-1 - Start completed.
24-09-02.20:35:46.385 [main            ] INFO  HikariDataSource       - HikariPool-2 - Starting...
24-09-02.20:35:46.622 [main            ] INFO  HikariDataSource       - HikariPool-2 - Start completed.
24-09-02.20:35:48.561 [main            ] INFO  Version                - Redisson 3.23.4
24-09-02.20:35:49.026 [redisson-netty-2-4] INFO  MasterPubSubConnectionPool - 1 connections initialized for 8.138.41.137/8.138.41.137:16379
24-09-02.20:35:49.183 [redisson-netty-2-13] INFO  MasterConnectionPool   - 5 connections initialized for 8.138.41.137/8.138.41.137:16379
24-09-02.20:35:50.081 [main            ] INFO  StdSchedulerFactory    - Using default implementation for ThreadExecutor
24-09-02.20:35:50.091 [main            ] INFO  SchedulerSignalerImpl  - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
24-09-02.20:35:50.091 [main            ] INFO  QuartzScheduler        - Quartz Scheduler v.2.3.2 created.
24-09-02.20:35:50.093 [main            ] INFO  RAMJobStore            - RAMJobStore initialized.
24-09-02.20:35:50.093 [main            ] INFO  QuartzScheduler        - Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

24-09-02.20:35:50.093 [main            ] INFO  StdSchedulerFactory    - Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
24-09-02.20:35:50.093 [main            ] INFO  StdSchedulerFactory    - Quartz scheduler version: 2.3.2
24-09-02.20:35:50.093 [main            ] INFO  QuartzScheduler        - JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@77fa2dcc
24-09-02.20:35:50.385 [main            ] INFO  EndpointLinksResolver  - Exposing 1 endpoint(s) beneath base path '/actuator'
24-09-02.20:35:50.504 [main            ] INFO  Http11NioProtocol      - Starting ProtocolHandler ["http-nio-8091"]
24-09-02.20:35:50.523 [main            ] INFO  TomcatWebServer        - Tomcat started on port(s): 8091 (http) with context path ''
24-09-02.20:35:50.526 [main            ] INFO  CachingConnectionFactory - Attempting to connect to: [8.138.41.137:5672]
24-09-02.20:35:50.640 [main            ] INFO  CachingConnectionFactory - Created new connection: rabbitConnectionFactory#3652dd19:0/SimpleConnection@14bb16ee [delegate=amqp://admin@8.138.41.137:5672/, localPort= 60422]
24-09-02.20:35:50.907 [main            ] INFO  SchedulerFactoryBean   - Starting Quartz Scheduler now
24-09-02.20:35:50.908 [main            ] INFO  QuartzScheduler        - Scheduler quartzScheduler_$_NON_CLUSTERED started.
24-09-02.20:35:50.928 [main            ] INFO  Application            - Started Application in 8.612 seconds (JVM running for 9.776)
24-09-02.20:35:51.091 [RMI TCP Connection(1)-172.19.166.31] INFO  [/]                    - Initializing Spring DispatcherServlet 'dispatcherServlet'
24-09-02.20:35:51.091 [RMI TCP Connection(1)-172.19.166.31] INFO  DispatcherServlet      - Initializing Servlet 'dispatcherServlet'
24-09-02.20:35:51.092 [RMI TCP Connection(1)-172.19.166.31] INFO  DispatcherServlet      - Completed initialization in 1 ms
24-09-02.20:35:55.006 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:35:55.034 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:35:55.547 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:35:55.547 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:35:55.549 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:35:55.549 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:36:00.016 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:36:00.036 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:36:00.037 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:36:00.038 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:36:00.038 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:36:00.038 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:36:00.287 [http-nio-8091-exec-2] INFO  RaffleActivityController - 活动抽奖 userId:lyt activityId:101
24-09-02.20:36:00.422 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order where activity_id = ? and user_id = ? and order_state = 'create'
24-09-02.20:36:00.422 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:36:00.422 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order_0 where activity_id = ? and user_id = ? and order_state = 'create' ::: [101, lyt]
24-09-02.20:36:00.592 [http-nio-8091-exec-2] INFO  AbstractRaffleActivityPartake - 创建参与活动【已存在未消费】userId:lyt activityId:101 userRaffleEntity:{"activityName":"测试","orderId":"182735359748","orderState":"create","orderTime":"2024-08-24 22:33:41","strategyId":100004,"userId":"lyt"}
24-09-02.20:36:00.592 [http-nio-8091-exec-2] INFO  RaffleActivityController - 活动抽奖，创建订单 userId:lyt activityId:101 orderId:182735359748
24-09-02.20:36:00.681 [http-nio-8091-exec-2] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userId: lyt strategyId: 100004 ruleModel: rule_default awardId: 101
24-09-02.20:36:00.686 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ?
24-09-02.20:36:00.686 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:36:00.686 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ? ::: [100004, 101]
24-09-02.20:36:00.764 [http-nio-8091-exec-2] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:lyt strategyId:100004 awardId:101
24-09-02.20:36:00.767 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: select activity_id
        from raffle_activity where strategy_id = ?;
24-09-02.20:36:00.767 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:36:00.767 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select activity_id
        from raffle_activity where strategy_id = ?; ::: [100004]
24-09-02.20:36:00.802 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:36:00.802 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:36:00.802 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:36:00.823 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0001
24-09-02.20:36:00.824 [http-nio-8091-exec-2] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:lyt strategyId:100004 awardId:101 ruleValue:100:1,100
24-09-02.20:36:00.825 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-09-02.20:36:00.825 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 lyt 100004 100 1,100
24-09-02.20:36:01.019 [http-nio-8091-exec-2] INFO  SnowflakeUUIDUtils     - 11位数字的UUID:18305854686
24-09-02.20:36:03.730 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_award_record(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state) values(?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?);
24-09-02.20:36:03.731 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:36:03.731 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_award_record_0(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state, id) values(?, ?, ?, ?, ?, ?, ?, ?, ?); ::: [lyt, 101, 100004, 182735359748, 100, 随机积分, 2024-09-02 20:36:00.969, create, 1037465136308662272]
24-09-02.20:36:04.303 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        ) values (?,
                 ?,
                 ?,
                 ?,
                 ?);
24-09-02.20:36:04.304 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:36:04.304 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        , id) values (?, ?, ?, ?, ?, ?); ::: [send_award, lyt, {"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305854686","timeStamp":"2024-09-02 20:36:01.019"}, 18305854686, create, 1037465138758135809]
24-09-02.20:36:08.601 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: update user_raffle_order set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create';
24-09-02.20:36:08.602 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:36:08.602 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update user_raffle_order_0 set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create'; ::: [lyt, 182735359748]
24-09-02.20:36:12.247 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:36:12.249 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: update user_raffle_order set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create';
24-09-02.20:36:12.249 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:36:12.249 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update user_raffle_order_0 set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create'; ::: [lyt, 182735359748]
24-09-02.20:36:12.266 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:36:12.268 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:36:12.268 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:36:12.268 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:36:12.269 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:36:12.286 [http-nio-8091-exec-2] ERROR AwardRepository        - 写入中奖记录，用户抽奖单已使用过，不可重复抽奖 userId: lyt activityId: 101 awardId: 100
24-09-02.20:36:12.369 [http-nio-8091-exec-2] ERROR RaffleActivityController - 活动抽奖失败 userId:lyt activityId:101
com.big.market.infrastructure.types.exception.AppException: null
	at com.big.market.infrastructure.infrastructure.persistent.repository.AwardRepository.lambda$saveUserAwardRecord$0(AwardRepository.java:93)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at com.big.market.infrastructure.infrastructure.persistent.repository.AwardRepository.saveUserAwardRecord(AwardRepository.java:82)
	at com.big.market.infrastructure.infrastructure.persistent.repository.AwardRepository$$FastClassBySpringCGLIB$$39a0c0e3.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)
	at com.big.market.infrastructure.infrastructure.persistent.repository.AwardRepository$$EnhancerBySpringCGLIB$$bf4a1390.saveUserAwardRecord(<generated>)
	at com.big.market.infrastructure.domain.award.service.AwardService.saveUserAwardRecord(AwardService.java:57)
	at com.big.market.infrastructure.trigger.http.RaffleActivityController.draw(RaffleActivityController.java:135)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:926)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1791)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
24-09-02.20:36:15.009 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:36:15.027 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:36:15.028 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:36:15.028 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:36:15.028 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:36:15.028 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:36:20.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:36:20.009 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:36:20.009 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:36:20.009 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:36:20.009 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:36:20.027 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:36:25.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:36:25.022 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:36:25.023 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:36:25.023 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:36:25.023 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:36:25.025 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:36:30.016 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:36:30.038 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:36:30.058 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:36:30.058 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:36:30.058 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:36:30.058 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:36:35.009 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:36:35.011 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:36:35.011 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:36:35.011 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:36:35.011 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:36:35.028 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:36:40.001 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:36:40.028 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:36:40.051 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:36:40.051 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:36:40.051 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:36:40.051 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:36:45.003 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:36:45.021 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:36:45.023 [pool-7-thread-10] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:36:45.023 [pool-7-thread-10] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:36:45.023 [pool-7-thread-10] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:36:45.023 [pool-7-thread-10] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:36:50.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:36:50.020 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:36:50.040 [pool-7-thread-11] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:36:50.040 [pool-7-thread-11] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:36:50.040 [pool-7-thread-11] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:36:50.040 [pool-7-thread-11] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:36:55.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:36:55.003 [pool-7-thread-12] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:36:55.003 [pool-7-thread-12] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:36:55.003 [pool-7-thread-12] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:36:55.003 [pool-7-thread-12] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:36:55.023 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:37:00.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:37:00.002 [pool-7-thread-13] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:37:00.002 [pool-7-thread-13] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:00.002 [pool-7-thread-13] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:37:00.002 [pool-7-thread-13] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:37:00.034 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:37:05.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:37:05.014 [pool-7-thread-14] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:37:05.014 [pool-7-thread-14] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:05.014 [pool-7-thread-14] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:37:05.014 [pool-7-thread-14] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:37:05.030 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:37:10.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:37:10.002 [pool-7-thread-15] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:37:10.002 [pool-7-thread-15] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:10.002 [pool-7-thread-15] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:37:10.002 [pool-7-thread-15] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:37:10.019 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:37:15.003 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:37:15.022 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:37:15.043 [pool-7-thread-16] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:37:15.043 [pool-7-thread-16] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:15.043 [pool-7-thread-16] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:37:15.043 [pool-7-thread-16] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:37:15.209 [http-nio-8091-exec-5] INFO  RaffleActivityController - 活动抽奖 userId:lyt activityId:101
24-09-02.20:37:15.232 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Logic SQL: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order where activity_id = ? and user_id = ? and order_state = 'create'
24-09-02.20:37:15.232 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:15.232 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order_0 where activity_id = ? and user_id = ? and order_state = 'create' ::: [101, lyt]
24-09-02.20:37:15.250 [http-nio-8091-exec-5] INFO  AbstractRaffleActivityPartake - 创建参与活动【已存在未消费】userId:lyt activityId:101 userRaffleEntity:{"activityName":"测试","orderId":"182735359748","orderState":"create","orderTime":"2024-08-24 22:33:41","strategyId":100004,"userId":"lyt"}
24-09-02.20:37:15.250 [http-nio-8091-exec-5] INFO  RaffleActivityController - 活动抽奖，创建订单 userId:lyt activityId:101 orderId:182735359748
24-09-02.20:37:15.306 [http-nio-8091-exec-5] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userId: lyt strategyId: 100004 ruleModel: rule_default awardId: 100
24-09-02.20:37:15.306 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Logic SQL: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ?
24-09-02.20:37:15.306 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:15.306 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ? ::: [100004, 100]
24-09-02.20:37:15.344 [http-nio-8091-exec-5] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:lyt strategyId:100004 awardId:100
24-09-02.20:37:15.345 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Logic SQL: select activity_id
        from raffle_activity where strategy_id = ?;
24-09-02.20:37:15.345 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:15.345 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select activity_id
        from raffle_activity where strategy_id = ?; ::: [100004]
24-09-02.20:37:15.364 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:37:15.364 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:15.364 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:37:15.384 [http-nio-8091-exec-5] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0001
24-09-02.20:37:15.384 [http-nio-8091-exec-5] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:lyt strategyId:100004 awardId:100 ruleValue:100:1,100
24-09-02.20:37:15.384 [http-nio-8091-exec-5] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-09-02.20:37:15.384 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 lyt 100004 100 1,100
24-09-02.20:37:15.407 [http-nio-8091-exec-5] INFO  SnowflakeUUIDUtils     - 11位数字的UUID:18305857806
24-09-02.20:37:15.409 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_award_record(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state) values(?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?);
24-09-02.20:37:15.409 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:37:15.409 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_award_record_0(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state, id) values(?, ?, ?, ?, ?, ?, ?, ?, ?); ::: [lyt, 101, 100004, 182735359748, 100, 随机积分, 2024-09-02 20:37:15.406, create, 1037465437220614144]
24-09-02.20:37:15.463 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Logic SQL: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        ) values (?,
                 ?,
                 ?,
                 ?,
                 ?);
24-09-02.20:37:15.463 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:37:15.463 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        , id) values (?, ?, ?, ?, ?, ?); ::: [send_award, lyt, {"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305857806","timeStamp":"2024-09-02 20:37:15.407"}, 18305857806, create, 1037465437447106561]
24-09-02.20:37:15.516 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Logic SQL: update user_raffle_order set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create';
24-09-02.20:37:15.517 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:15.517 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update user_raffle_order_0 set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create'; ::: [lyt, 182735359748]
24-09-02.20:37:15.638 [pool-7-thread-17] INFO  EventPublisher         - 发送 MQ 消息 topic:send_award, message:{"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305857806","timeStamp":"2024-09-02 20:37:15.407"}
24-09-02.20:37:15.640 [pool-7-thread-17] INFO  ShardingSphere-SQL     - Logic SQL: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?;
24-09-02.20:37:15.640 [pool-7-thread-17] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:15.640 [pool-7-thread-17] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305857806]
24-09-02.20:37:15.641 [pool-7-thread-17] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305857806]
24-09-02.20:37:15.673 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-1] INFO  SendAwardCustomer      - 监听用户奖品发送消息 topic:send_award message:{"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305857806","timeStamp":"2024-09-02 20:37:15.407"}
24-09-02.20:37:20.010 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:37:20.029 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:37:20.048 [pool-7-thread-18] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:37:20.048 [pool-7-thread-18] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:20.048 [pool-7-thread-18] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:37:20.048 [pool-7-thread-18] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:37:23.037 [http-nio-8091-exec-6] INFO  RaffleActivityController - 活动抽奖 userId:lyt activityId:101
24-09-02.20:37:23.064 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order where activity_id = ? and user_id = ? and order_state = 'create'
24-09-02.20:37:23.064 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:23.064 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order_0 where activity_id = ? and user_id = ? and order_state = 'create' ::: [101, lyt]
24-09-02.20:37:23.120 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account where user_id = ? and activity_id = ?
24-09-02.20:37:23.120 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:23.120 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account_0 where user_id = ? and activity_id = ? ::: [lyt, 101]
24-09-02.20:37:23.162 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month
        where user_id = ?
          and activity_id = ?
          and `month` = ?;
24-09-02.20:37:23.162 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:23.162 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month_0
        where user_id = ?
          and activity_id = ?
          and `month` = ?; ::: [lyt, 101, 2024-09]
24-09-02.20:37:23.184 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:37:23.184 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:23.184 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:37:23.226 [http-nio-8091-exec-6] INFO  SnowflakeUUIDUtils     - 12位数字的UUID:183058581346
24-09-02.20:37:23.230 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0;
24-09-02.20:37:23.230 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:23.230 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_0 set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0; ::: [lyt, 101]
24-09-02.20:37:23.293 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: insert into raffle_activity_account_month(
            user_id, activity_id, month, month_count, month_count_surplus, create_time, update_time)
        values (
                   ?, ?, ?, ?, ?, now(), now())
24-09-02.20:37:23.293 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:37:23.293 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into raffle_activity_account_month_0(
            user_id, activity_id, month, month_count, month_count_surplus, create_time, update_time, id)
        values (?, ?, ?, ?, ?, now(), now(), ?) ::: [lyt, 101, 2024-09, 20, 14, 1037465470288506880]
24-09-02.20:37:23.333 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account
        set month_count_surplus = ?, update_time = now()
        where user_id = ? and activity_id = ?
24-09-02.20:37:23.333 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:23.333 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_0
        set month_count_surplus = ?, update_time = now()
        where user_id = ? and activity_id = ? ::: [14, lyt, 101]
24-09-02.20:37:23.375 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: insert into raffle_activity_account_day(
            user_id, activity_id, day, day_count, day_count_surplus, create_time, update_time)
        values
            (?, ?, ?, ?, ?, now(), now())
24-09-02.20:37:23.375 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:37:23.375 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into raffle_activity_account_day_0(
            user_id, activity_id, day, day_count, day_count_surplus, create_time, update_time, id)
        values
            (?, ?, ?, ?, ?, now(), now(), ?) ::: [lyt, 101, 2024-09-02, 20, 14, 1037465470624051201]
24-09-02.20:37:23.415 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account
        set day_count_surplus = ?, update_time = now()
        where user_id = ? and activity_id = ?
24-09-02.20:37:23.415 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:23.415 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_0
        set day_count_surplus = ?, update_time = now()
        where user_id = ? and activity_id = ? ::: [14, lyt, 101]
24-09-02.20:37:23.452 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_raffle_order(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        )
        values(
                  ?, ?, ?, ?, ?, ?, ?, now(), now()
              )
24-09-02.20:37:23.452 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:37:23.452 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_raffle_order_0(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        , id)
        values(?, ?, ?, ?, ?, ?, ?, now(), now(), ?) ::: [lyt, 101, 测试, 100004, 183058581346, 2024-09-02 20:37:23.037, create, 1037465470955401216]
24-09-02.20:37:23.529 [http-nio-8091-exec-6] INFO  RaffleActivityController - 活动抽奖，创建订单 userId:lyt activityId:101 orderId:183058581346
24-09-02.20:37:23.587 [http-nio-8091-exec-6] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userId: lyt strategyId: 100004 ruleModel: rule_default awardId: 101
24-09-02.20:37:23.588 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ?
24-09-02.20:37:23.588 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:23.588 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ? ::: [100004, 101]
24-09-02.20:37:23.642 [http-nio-8091-exec-6] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:lyt strategyId:100004 awardId:101
24-09-02.20:37:23.644 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: select activity_id
        from raffle_activity where strategy_id = ?;
24-09-02.20:37:23.644 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:23.644 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select activity_id
        from raffle_activity where strategy_id = ?; ::: [100004]
24-09-02.20:37:23.663 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:37:23.663 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:23.663 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:37:23.682 [http-nio-8091-exec-6] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0000
24-09-02.20:37:23.682 [http-nio-8091-exec-6] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:lyt strategyId:100004 awardId:101
24-09-02.20:37:23.724 [http-nio-8091-exec-6] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:lyt strategyId:100004 awardId:101
24-09-02.20:37:23.788 [http-nio-8091-exec-6] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_stock code:0001
24-09-02.20:37:23.788 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 lyt 100004 101 null
24-09-02.20:37:23.809 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: select strategy_id,
               award_id,
               award_title,
               award_subtitle,
               award_count,
               award_count_surplus,
               award_rate,
               sort
        from strategy_award
        where strategy_id = ?
        and award_id = ?
24-09-02.20:37:23.809 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:23.809 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select strategy_id,
               award_id,
               award_title,
               award_subtitle,
               award_count,
               award_count_surplus,
               award_rate,
               sort
        from strategy_award
        where strategy_id = ?
        and award_id = ? ::: [100004, 101]
24-09-02.20:37:23.851 [http-nio-8091-exec-6] INFO  SnowflakeUUIDUtils     - 11位数字的UUID:18305858160
24-09-02.20:37:23.852 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_award_record(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state) values(?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?);
24-09-02.20:37:23.852 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:37:23.852 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_award_record_0(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state, id) values(?, ?, ?, ?, ?, ?, ?, ?, ?); ::: [lyt, 101, 100004, 183058581346, 101, 10000积分, 2024-09-02 20:37:23.851, create, 1037465472633122817]
24-09-02.20:37:23.908 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        ) values (?,
                 ?,
                 ?,
                 ?,
                 ?);
24-09-02.20:37:23.908 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:37:23.908 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        , id) values (?, ?, ?, ?, ?, ?); ::: [send_award, lyt, {"data":{"awardId":101,"awardTitle":"10000积分","userId":"lyt"},"id":"18305858160","timeStamp":"2024-09-02 20:37:23.851"}, 18305858160, create, 1037465472868003840]
24-09-02.20:37:23.960 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: update user_raffle_order set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create';
24-09-02.20:37:23.960 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:23.960 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update user_raffle_order_0 set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create'; ::: [lyt, 183058581346]
24-09-02.20:37:24.075 [pool-7-thread-19] INFO  EventPublisher         - 发送 MQ 消息 topic:send_award, message:{"data":{"awardId":101,"awardTitle":"10000积分","userId":"lyt"},"id":"18305858160","timeStamp":"2024-09-02 20:37:23.851"}
24-09-02.20:37:24.075 [pool-7-thread-19] INFO  ShardingSphere-SQL     - Logic SQL: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?;
24-09-02.20:37:24.075 [pool-7-thread-19] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:24.075 [pool-7-thread-19] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305858160]
24-09-02.20:37:24.076 [pool-7-thread-19] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305858160]
24-09-02.20:37:24.095 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-1] INFO  SendAwardCustomer      - 监听用户奖品发送消息 topic:send_award message:{"data":{"awardId":101,"awardTitle":"10000积分","userId":"lyt"},"id":"18305858160","timeStamp":"2024-09-02 20:37:23.851"}
24-09-02.20:37:25.008 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:37:25.030 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:37:25.049 [pool-7-thread-20] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:37:25.049 [pool-7-thread-20] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:25.049 [pool-7-thread-20] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:37:25.049 [pool-7-thread-20] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:37:26.254 [http-nio-8091-exec-7] INFO  RaffleActivityController - 活动抽奖 userId:lyt activityId:101
24-09-02.20:37:26.274 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order where activity_id = ? and user_id = ? and order_state = 'create'
24-09-02.20:37:26.274 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:26.274 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order_0 where activity_id = ? and user_id = ? and order_state = 'create' ::: [101, lyt]
24-09-02.20:37:26.311 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account where user_id = ? and activity_id = ?
24-09-02.20:37:26.311 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:26.311 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account_0 where user_id = ? and activity_id = ? ::: [lyt, 101]
24-09-02.20:37:26.330 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month
        where user_id = ?
          and activity_id = ?
          and `month` = ?;
24-09-02.20:37:26.330 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:26.330 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month_0
        where user_id = ?
          and activity_id = ?
          and `month` = ?; ::: [lyt, 101, 2024-09]
24-09-02.20:37:26.351 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:37:26.351 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:26.351 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:37:26.390 [http-nio-8091-exec-7] INFO  SnowflakeUUIDUtils     - 12位数字的UUID:183058582673
24-09-02.20:37:26.392 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0;
24-09-02.20:37:26.392 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:26.392 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_0 set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0; ::: [lyt, 101]
24-09-02.20:37:26.447 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_month
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0
24-09-02.20:37:26.447 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:26.447 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_month_0
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0 ::: [lyt, 101, 2024-09]
24-09-02.20:37:26.490 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_day
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0
24-09-02.20:37:26.490 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:26.490 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_day_0
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0 ::: [lyt, 101, 2024-09-02]
24-09-02.20:37:26.537 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_raffle_order(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        )
        values(
                  ?, ?, ?, ?, ?, ?, ?, now(), now()
              )
24-09-02.20:37:26.537 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:37:26.537 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_raffle_order_0(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        , id)
        values(?, ?, ?, ?, ?, ?, ?, now(), now(), ?) ::: [lyt, 101, 测试, 100004, 183058582673, 2024-09-02 20:37:26.254, create, 1037465483890634753]
24-09-02.20:37:26.619 [http-nio-8091-exec-7] INFO  RaffleActivityController - 活动抽奖，创建订单 userId:lyt activityId:101 orderId:183058582673
24-09-02.20:37:26.676 [http-nio-8091-exec-7] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userId: lyt strategyId: 100004 ruleModel: rule_default awardId: 103
24-09-02.20:37:26.677 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ?
24-09-02.20:37:26.677 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:26.677 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ? ::: [100004, 103]
24-09-02.20:37:26.731 [http-nio-8091-exec-7] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:lyt strategyId:100004 awardId:103
24-09-02.20:37:26.732 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: select activity_id
        from raffle_activity where strategy_id = ?;
24-09-02.20:37:26.732 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:26.732 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select activity_id
        from raffle_activity where strategy_id = ?; ::: [100004]
24-09-02.20:37:26.751 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:37:26.751 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:26.751 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:37:26.770 [http-nio-8091-exec-7] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0000
24-09-02.20:37:26.771 [http-nio-8091-exec-7] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:lyt strategyId:100004 awardId:103
24-09-02.20:37:26.805 [http-nio-8091-exec-7] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:lyt strategyId:100004 awardId:103
24-09-02.20:37:26.824 [http-nio-8091-exec-7] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_stock code:0001
24-09-02.20:37:26.825 [http-nio-8091-exec-7] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 lyt 100004 103 null
24-09-02.20:37:26.842 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: select strategy_id,
               award_id,
               award_title,
               award_subtitle,
               award_count,
               award_count_surplus,
               award_rate,
               sort
        from strategy_award
        where strategy_id = ?
        and award_id = ?
24-09-02.20:37:26.842 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:26.842 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select strategy_id,
               award_id,
               award_title,
               award_subtitle,
               award_count,
               award_count_surplus,
               award_rate,
               sort
        from strategy_award
        where strategy_id = ?
        and award_id = ? ::: [100004, 103]
24-09-02.20:37:26.881 [http-nio-8091-exec-7] INFO  SnowflakeUUIDUtils     - 11位数字的UUID:18305858287
24-09-02.20:37:26.883 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_award_record(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state) values(?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?);
24-09-02.20:37:26.883 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:37:26.883 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_award_record_0(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state, id) values(?, ?, ?, ?, ?, ?, ?, ?, ?); ::: [lyt, 101, 100004, 183058582673, 103, 台灯一个, 2024-09-02 20:37:26.881, create, 1037465485341863936]
24-09-02.20:37:26.937 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        ) values (?,
                 ?,
                 ?,
                 ?,
                 ?);
24-09-02.20:37:26.937 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:37:26.938 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        , id) values (?, ?, ?, ?, ?, ?); ::: [send_award, lyt, {"data":{"awardId":103,"awardTitle":"台灯一个","userId":"lyt"},"id":"18305858287","timeStamp":"2024-09-02 20:37:26.881"}, 18305858287, create, 1037465485572550657]
24-09-02.20:37:26.990 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: update user_raffle_order set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create';
24-09-02.20:37:26.990 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:26.990 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update user_raffle_order_0 set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create'; ::: [lyt, 183058582673]
24-09-02.20:37:27.105 [pool-7-thread-1 ] INFO  EventPublisher         - 发送 MQ 消息 topic:send_award, message:{"data":{"awardId":103,"awardTitle":"台灯一个","userId":"lyt"},"id":"18305858287","timeStamp":"2024-09-02 20:37:26.881"}
24-09-02.20:37:27.106 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Logic SQL: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?;
24-09-02.20:37:27.106 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:27.106 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305858287]
24-09-02.20:37:27.106 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305858287]
24-09-02.20:37:27.125 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-1] INFO  SendAwardCustomer      - 监听用户奖品发送消息 topic:send_award message:{"data":{"awardId":103,"awardTitle":"台灯一个","userId":"lyt"},"id":"18305858287","timeStamp":"2024-09-02 20:37:26.881"}
24-09-02.20:37:28.397 [http-nio-8091-exec-8] INFO  RaffleActivityController - 活动抽奖 userId:lyt activityId:101
24-09-02.20:37:28.417 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order where activity_id = ? and user_id = ? and order_state = 'create'
24-09-02.20:37:28.417 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:28.417 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order_0 where activity_id = ? and user_id = ? and order_state = 'create' ::: [101, lyt]
24-09-02.20:37:28.455 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account where user_id = ? and activity_id = ?
24-09-02.20:37:28.455 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:28.455 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account_0 where user_id = ? and activity_id = ? ::: [lyt, 101]
24-09-02.20:37:28.475 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month
        where user_id = ?
          and activity_id = ?
          and `month` = ?;
24-09-02.20:37:28.475 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:28.475 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month_0
        where user_id = ?
          and activity_id = ?
          and `month` = ?; ::: [lyt, 101, 2024-09]
24-09-02.20:37:28.496 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:37:28.496 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:28.496 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:37:28.538 [http-nio-8091-exec-8] INFO  SnowflakeUUIDUtils     - 12位数字的UUID:183058583574
24-09-02.20:37:28.538 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0;
24-09-02.20:37:28.538 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:28.538 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_0 set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0; ::: [lyt, 101]
24-09-02.20:37:28.595 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_month
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0
24-09-02.20:37:28.595 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:28.595 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_month_0
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0 ::: [lyt, 101, 2024-09]
24-09-02.20:37:28.632 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_day
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0
24-09-02.20:37:28.632 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:28.632 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_day_0
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0 ::: [lyt, 101, 2024-09-02]
24-09-02.20:37:28.668 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_raffle_order(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        )
        values(
                  ?, ?, ?, ?, ?, ?, ?, now(), now()
              )
24-09-02.20:37:28.668 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:37:28.668 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_raffle_order_0(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        , id)
        values(?, ?, ?, ?, ?, ?, ?, now(), now(), ?) ::: [lyt, 101, 测试, 100004, 183058583574, 2024-09-02 20:37:28.397, create, 1037465492832890880]
24-09-02.20:37:28.744 [http-nio-8091-exec-8] INFO  RaffleActivityController - 活动抽奖，创建订单 userId:lyt activityId:101 orderId:183058583574
24-09-02.20:37:28.798 [http-nio-8091-exec-8] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userId: lyt strategyId: 100004 ruleModel: rule_default awardId: 101
24-09-02.20:37:28.799 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ?
24-09-02.20:37:28.799 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:28.799 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ? ::: [100004, 101]
24-09-02.20:37:28.852 [http-nio-8091-exec-8] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:lyt strategyId:100004 awardId:101
24-09-02.20:37:28.853 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: select activity_id
        from raffle_activity where strategy_id = ?;
24-09-02.20:37:28.853 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:28.853 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select activity_id
        from raffle_activity where strategy_id = ?; ::: [100004]
24-09-02.20:37:28.872 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:37:28.872 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:28.872 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:37:28.891 [http-nio-8091-exec-8] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0000
24-09-02.20:37:28.891 [http-nio-8091-exec-8] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:lyt strategyId:100004 awardId:101
24-09-02.20:37:28.931 [http-nio-8091-exec-8] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:lyt strategyId:100004 awardId:101
24-09-02.20:37:28.953 [http-nio-8091-exec-8] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_stock code:0001
24-09-02.20:37:28.953 [http-nio-8091-exec-8] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 lyt 100004 101 null
24-09-02.20:37:28.979 [http-nio-8091-exec-8] INFO  SnowflakeUUIDUtils     - 11位数字的UUID:18305858375
24-09-02.20:37:28.981 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_award_record(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state) values(?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?);
24-09-02.20:37:28.981 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:37:28.981 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_award_record_0(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state, id) values(?, ?, ?, ?, ?, ?, ?, ?, ?); ::: [lyt, 101, 100004, 183058583574, 101, 10000积分, 2024-09-02 20:37:28.979, create, 1037465494141513729]
24-09-02.20:37:29.037 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        ) values (?,
                 ?,
                 ?,
                 ?,
                 ?);
24-09-02.20:37:29.037 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:37:29.037 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        , id) values (?, ?, ?, ?, ?, ?); ::: [send_award, lyt, {"data":{"awardId":101,"awardTitle":"10000积分","userId":"lyt"},"id":"18305858375","timeStamp":"2024-09-02 20:37:28.979"}, 18305858375, create, 1037465494380589056]
24-09-02.20:37:29.089 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: update user_raffle_order set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create';
24-09-02.20:37:29.090 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:29.090 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update user_raffle_order_0 set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create'; ::: [lyt, 183058583574]
24-09-02.20:37:29.204 [pool-7-thread-2 ] INFO  EventPublisher         - 发送 MQ 消息 topic:send_award, message:{"data":{"awardId":101,"awardTitle":"10000积分","userId":"lyt"},"id":"18305858375","timeStamp":"2024-09-02 20:37:28.979"}
24-09-02.20:37:29.205 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Logic SQL: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?;
24-09-02.20:37:29.205 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:29.205 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305858375]
24-09-02.20:37:29.205 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305858375]
24-09-02.20:37:29.222 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-1] INFO  SendAwardCustomer      - 监听用户奖品发送消息 topic:send_award message:{"data":{"awardId":101,"awardTitle":"10000积分","userId":"lyt"},"id":"18305858375","timeStamp":"2024-09-02 20:37:28.979"}
24-09-02.20:37:30.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:37:30.029 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100004 awardId:103
24-09-02.20:37:30.030 [scheduling-1    ] INFO  ShardingSphere-SQL     - Logic SQL: select award_count_surplus from strategy_award
        where strategy_id = ? and award_id = ?
24-09-02.20:37:30.030 [scheduling-1    ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:30.030 [scheduling-1    ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select award_count_surplus from strategy_award
        where strategy_id = ? and award_id = ? ::: [100004, 103]
24-09-02.20:37:30.067 [scheduling-1    ] INFO  ShardingSphere-SQL     - Logic SQL: update strategy_award set award_count_surplus = award_count_surplus - 1
        where strategy_id = ? and award_id = ?
24-09-02.20:37:30.067 [scheduling-1    ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:30.067 [scheduling-1    ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: update strategy_award set award_count_surplus = award_count_surplus - 1
        where strategy_id = ? and award_id = ? ::: [100004, 103]
24-09-02.20:37:30.107 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:37:30.108 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:37:30.108 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:30.108 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:37:30.108 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:37:30.588 [http-nio-8091-exec-9] INFO  RaffleActivityController - 活动抽奖 userId:lyt activityId:101
24-09-02.20:37:30.607 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order where activity_id = ? and user_id = ? and order_state = 'create'
24-09-02.20:37:30.607 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:30.607 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order_0 where activity_id = ? and user_id = ? and order_state = 'create' ::: [101, lyt]
24-09-02.20:37:30.644 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account where user_id = ? and activity_id = ?
24-09-02.20:37:30.644 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:30.644 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account_0 where user_id = ? and activity_id = ? ::: [lyt, 101]
24-09-02.20:37:30.664 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month
        where user_id = ?
          and activity_id = ?
          and `month` = ?;
24-09-02.20:37:30.664 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:30.664 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month_0
        where user_id = ?
          and activity_id = ?
          and `month` = ?; ::: [lyt, 101, 2024-09]
24-09-02.20:37:30.684 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:37:30.684 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:30.684 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:37:30.721 [http-nio-8091-exec-9] INFO  SnowflakeUUIDUtils     - 12位数字的UUID:183058584489
24-09-02.20:37:30.722 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0;
24-09-02.20:37:30.722 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:30.722 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_0 set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0; ::: [lyt, 101]
24-09-02.20:37:30.776 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_month
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0
24-09-02.20:37:30.776 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:30.776 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_month_0
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0 ::: [lyt, 101, 2024-09]
24-09-02.20:37:30.811 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_day
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0
24-09-02.20:37:30.811 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:30.811 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_day_0
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0 ::: [lyt, 101, 2024-09-02]
24-09-02.20:37:30.848 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_raffle_order(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        )
        values(
                  ?, ?, ?, ?, ?, ?, ?, now(), now()
              )
24-09-02.20:37:30.848 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:37:30.848 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_raffle_order_0(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        , id)
        values(?, ?, ?, ?, ?, ?, ?, now(), now(), ?) ::: [lyt, 101, 测试, 100004, 183058584489, 2024-09-02 20:37:30.588, create, 1037465501976473601]
24-09-02.20:37:30.924 [http-nio-8091-exec-9] INFO  RaffleActivityController - 活动抽奖，创建订单 userId:lyt activityId:101 orderId:183058584489
24-09-02.20:37:30.981 [http-nio-8091-exec-9] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userId: lyt strategyId: 100004 ruleModel: rule_default awardId: 100
24-09-02.20:37:30.982 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ?
24-09-02.20:37:30.982 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:30.982 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ? ::: [100004, 100]
24-09-02.20:37:31.038 [http-nio-8091-exec-9] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:lyt strategyId:100004 awardId:100
24-09-02.20:37:31.039 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: select activity_id
        from raffle_activity where strategy_id = ?;
24-09-02.20:37:31.039 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:31.039 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select activity_id
        from raffle_activity where strategy_id = ?; ::: [100004]
24-09-02.20:37:31.067 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:37:31.067 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:31.067 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:37:31.094 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0000
24-09-02.20:37:31.094 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:lyt strategyId:100004 awardId:100
24-09-02.20:37:31.129 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:lyt strategyId:100004 awardId:100
24-09-02.20:37:31.147 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_stock code:0001
24-09-02.20:37:31.147 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 lyt 100004 100 null
24-09-02.20:37:31.169 [http-nio-8091-exec-9] INFO  SnowflakeUUIDUtils     - 11位数字的UUID:18305858467
24-09-02.20:37:31.170 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_award_record(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state) values(?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?);
24-09-02.20:37:31.170 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:37:31.170 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_award_record_0(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state, id) values(?, ?, ?, ?, ?, ?, ?, ?, ?); ::: [lyt, 101, 100004, 183058584489, 100, 随机积分, 2024-09-02 20:37:31.169, create, 1037465503327039488]
24-09-02.20:37:31.226 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        ) values (?,
                 ?,
                 ?,
                 ?,
                 ?);
24-09-02.20:37:31.226 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:37:31.226 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        , id) values (?, ?, ?, ?, ?, ?); ::: [send_award, lyt, {"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305858467","timeStamp":"2024-09-02 20:37:31.169"}, 18305858467, create, 1037465503557726209]
24-09-02.20:37:31.279 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: update user_raffle_order set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create';
24-09-02.20:37:31.279 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:31.279 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update user_raffle_order_0 set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create'; ::: [lyt, 183058584489]
24-09-02.20:37:31.393 [pool-7-thread-4 ] INFO  EventPublisher         - 发送 MQ 消息 topic:send_award, message:{"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305858467","timeStamp":"2024-09-02 20:37:31.169"}
24-09-02.20:37:31.394 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Logic SQL: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?;
24-09-02.20:37:31.394 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:31.394 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305858467]
24-09-02.20:37:31.394 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305858467]
24-09-02.20:37:31.410 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-1] INFO  SendAwardCustomer      - 监听用户奖品发送消息 topic:send_award message:{"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305858467","timeStamp":"2024-09-02 20:37:31.169"}
24-09-02.20:37:32.641 [http-nio-8091-exec-10] INFO  RaffleActivityController - 活动抽奖 userId:lyt activityId:101
24-09-02.20:37:32.660 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Logic SQL: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order where activity_id = ? and user_id = ? and order_state = 'create'
24-09-02.20:37:32.660 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:32.660 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order_0 where activity_id = ? and user_id = ? and order_state = 'create' ::: [101, lyt]
24-09-02.20:37:32.700 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Logic SQL: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account where user_id = ? and activity_id = ?
24-09-02.20:37:32.700 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:32.700 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account_0 where user_id = ? and activity_id = ? ::: [lyt, 101]
24-09-02.20:37:32.720 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month
        where user_id = ?
          and activity_id = ?
          and `month` = ?;
24-09-02.20:37:32.720 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:32.720 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month_0
        where user_id = ?
          and activity_id = ?
          and `month` = ?; ::: [lyt, 101, 2024-09]
24-09-02.20:37:32.740 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:37:32.740 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:32.740 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:37:32.778 [http-nio-8091-exec-10] INFO  SnowflakeUUIDUtils     - 12位数字的UUID:183058585352
24-09-02.20:37:32.779 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0;
24-09-02.20:37:32.779 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:32.779 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_0 set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0; ::: [lyt, 101]
24-09-02.20:37:32.835 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_month
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0
24-09-02.20:37:32.835 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:32.835 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_month_0
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0 ::: [lyt, 101, 2024-09]
24-09-02.20:37:32.872 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_day
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0
24-09-02.20:37:32.872 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:32.872 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_day_0
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0 ::: [lyt, 101, 2024-09-02]
24-09-02.20:37:32.910 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_raffle_order(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        )
        values(
                  ?, ?, ?, ?, ?, ?, ?, now(), now()
              )
24-09-02.20:37:32.910 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:37:32.910 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_raffle_order_0(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        , id)
        values(?, ?, ?, ?, ?, ?, ?, now(), now(), ?) ::: [lyt, 101, 测试, 100004, 183058585352, 2024-09-02 20:37:32.641, create, 1037465510625128448]
24-09-02.20:37:32.985 [http-nio-8091-exec-10] INFO  RaffleActivityController - 活动抽奖，创建订单 userId:lyt activityId:101 orderId:183058585352
24-09-02.20:37:33.042 [http-nio-8091-exec-10] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userId: lyt strategyId: 100004 ruleModel: rule_default awardId: 104
24-09-02.20:37:33.043 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Logic SQL: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ?
24-09-02.20:37:33.043 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:33.043 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ? ::: [100004, 104]
24-09-02.20:37:33.097 [http-nio-8091-exec-10] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:lyt strategyId:100004 awardId:104
24-09-02.20:37:33.098 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Logic SQL: select activity_id
        from raffle_activity where strategy_id = ?;
24-09-02.20:37:33.098 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:33.098 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select activity_id
        from raffle_activity where strategy_id = ?; ::: [100004]
24-09-02.20:37:33.117 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:37:33.117 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:33.117 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:37:33.136 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0000
24-09-02.20:37:33.136 [http-nio-8091-exec-10] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:lyt strategyId:100004 awardId:104
24-09-02.20:37:33.171 [http-nio-8091-exec-10] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:lyt strategyId:100004 awardId:104
24-09-02.20:37:33.188 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_stock code:0001
24-09-02.20:37:33.188 [http-nio-8091-exec-10] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 lyt 100004 104 null
24-09-02.20:37:33.211 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Logic SQL: select strategy_id,
               award_id,
               award_title,
               award_subtitle,
               award_count,
               award_count_surplus,
               award_rate,
               sort
        from strategy_award
        where strategy_id = ?
        and award_id = ?
24-09-02.20:37:33.211 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:33.211 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select strategy_id,
               award_id,
               award_title,
               award_subtitle,
               award_count,
               award_count_surplus,
               award_rate,
               sort
        from strategy_award
        where strategy_id = ?
        and award_id = ? ::: [100004, 104]
24-09-02.20:37:33.247 [http-nio-8091-exec-10] INFO  SnowflakeUUIDUtils     - 11位数字的UUID:18305858554
24-09-02.20:37:33.249 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_award_record(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state) values(?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?);
24-09-02.20:37:33.249 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:37:33.249 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_award_record_0(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state, id) values(?, ?, ?, ?, ?, ?, ?, ?, ?); ::: [lyt, 101, 100004, 183058585352, 104, 增加5次抽奖机会, 2024-09-02 20:37:33.247, create, 1037465512042803201]
24-09-02.20:37:33.304 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Logic SQL: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        ) values (?,
                 ?,
                 ?,
                 ?,
                 ?);
24-09-02.20:37:33.304 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:37:33.304 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        , id) values (?, ?, ?, ?, ?, ?); ::: [send_award, lyt, {"data":{"awardId":104,"awardTitle":"增加5次抽奖机会","userId":"lyt"},"id":"18305858554","timeStamp":"2024-09-02 20:37:33.247"}, 18305858554, create, 1037465512273489920]
24-09-02.20:37:33.356 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Logic SQL: update user_raffle_order set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create';
24-09-02.20:37:33.356 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:33.356 [http-nio-8091-exec-10] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update user_raffle_order_0 set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create'; ::: [lyt, 183058585352]
24-09-02.20:37:33.470 [pool-7-thread-5 ] INFO  EventPublisher         - 发送 MQ 消息 topic:send_award, message:{"data":{"awardId":104,"awardTitle":"增加5次抽奖机会","userId":"lyt"},"id":"18305858554","timeStamp":"2024-09-02 20:37:33.247"}
24-09-02.20:37:33.471 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Logic SQL: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?;
24-09-02.20:37:33.471 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:33.471 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305858554]
24-09-02.20:37:33.471 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305858554]
24-09-02.20:37:33.487 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-1] INFO  SendAwardCustomer      - 监听用户奖品发送消息 topic:send_award message:{"data":{"awardId":104,"awardTitle":"增加5次抽奖机会","userId":"lyt"},"id":"18305858554","timeStamp":"2024-09-02 20:37:33.247"}
24-09-02.20:37:34.585 [http-nio-8091-exec-11] INFO  RaffleActivityController - 活动抽奖 userId:lyt activityId:101
24-09-02.20:37:34.604 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Logic SQL: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order where activity_id = ? and user_id = ? and order_state = 'create'
24-09-02.20:37:34.605 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:34.605 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order_0 where activity_id = ? and user_id = ? and order_state = 'create' ::: [101, lyt]
24-09-02.20:37:34.641 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Logic SQL: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account where user_id = ? and activity_id = ?
24-09-02.20:37:34.641 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:34.641 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account_0 where user_id = ? and activity_id = ? ::: [lyt, 101]
24-09-02.20:37:34.662 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month
        where user_id = ?
          and activity_id = ?
          and `month` = ?;
24-09-02.20:37:34.662 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:34.662 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month_0
        where user_id = ?
          and activity_id = ?
          and `month` = ?; ::: [lyt, 101, 2024-09]
24-09-02.20:37:34.682 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:37:34.682 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:34.682 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:37:34.719 [http-nio-8091-exec-11] INFO  SnowflakeUUIDUtils     - 12位数字的UUID:183058586166
24-09-02.20:37:34.721 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0;
24-09-02.20:37:34.721 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:34.721 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_0 set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0; ::: [lyt, 101]
24-09-02.20:37:34.775 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_month
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0
24-09-02.20:37:34.775 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:34.775 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_month_0
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0 ::: [lyt, 101, 2024-09]
24-09-02.20:37:34.811 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_day
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0
24-09-02.20:37:34.811 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:34.811 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_day_0
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0 ::: [lyt, 101, 2024-09-02]
24-09-02.20:37:34.847 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_raffle_order(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        )
        values(
                  ?, ?, ?, ?, ?, ?, ?, now(), now()
              )
24-09-02.20:37:34.847 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:37:34.847 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_raffle_order_0(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        , id)
        values(?, ?, ?, ?, ?, ?, ?, now(), now(), ?) ::: [lyt, 101, 测试, 100004, 183058586166, 2024-09-02 20:37:34.585, create, 1037465518745300993]
24-09-02.20:37:34.922 [http-nio-8091-exec-11] INFO  RaffleActivityController - 活动抽奖，创建订单 userId:lyt activityId:101 orderId:183058586166
24-09-02.20:37:34.979 [http-nio-8091-exec-11] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userId: lyt strategyId: 100004 ruleModel: rule_default awardId: 100
24-09-02.20:37:34.980 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Logic SQL: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ?
24-09-02.20:37:34.980 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:34.980 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ? ::: [100004, 100]
24-09-02.20:37:35.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:37:35.031 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100004 awardId:100
24-09-02.20:37:35.032 [scheduling-1    ] INFO  ShardingSphere-SQL     - Logic SQL: select award_count_surplus from strategy_award
        where strategy_id = ? and award_id = ?
24-09-02.20:37:35.032 [scheduling-1    ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:35.032 [scheduling-1    ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select award_count_surplus from strategy_award
        where strategy_id = ? and award_id = ? ::: [100004, 100]
24-09-02.20:37:35.033 [http-nio-8091-exec-11] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:lyt strategyId:100004 awardId:100
24-09-02.20:37:35.034 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Logic SQL: select activity_id
        from raffle_activity where strategy_id = ?;
24-09-02.20:37:35.034 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:35.034 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select activity_id
        from raffle_activity where strategy_id = ?; ::: [100004]
24-09-02.20:37:35.050 [scheduling-1    ] INFO  ShardingSphere-SQL     - Logic SQL: update strategy_award set award_count_surplus = award_count_surplus - 1
        where strategy_id = ? and award_id = ?
24-09-02.20:37:35.050 [scheduling-1    ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:35.050 [scheduling-1    ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: update strategy_award set award_count_surplus = award_count_surplus - 1
        where strategy_id = ? and award_id = ? ::: [100004, 100]
24-09-02.20:37:35.070 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:37:35.070 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:35.070 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:37:35.089 [http-nio-8091-exec-11] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0000
24-09-02.20:37:35.089 [http-nio-8091-exec-11] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:lyt strategyId:100004 awardId:100
24-09-02.20:37:35.090 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:37:35.091 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:37:35.091 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:35.091 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:37:35.091 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:37:35.124 [http-nio-8091-exec-11] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:lyt strategyId:100004 awardId:100
24-09-02.20:37:35.142 [http-nio-8091-exec-11] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_stock code:0001
24-09-02.20:37:35.142 [http-nio-8091-exec-11] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 lyt 100004 100 null
24-09-02.20:37:35.160 [http-nio-8091-exec-11] INFO  SnowflakeUUIDUtils     - 11位数字的UUID:18305858635
24-09-02.20:37:35.161 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_award_record(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state) values(?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?);
24-09-02.20:37:35.161 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:37:35.161 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_award_record_0(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state, id) values(?, ?, ?, ?, ?, ?, ?, ?, ?); ::: [lyt, 101, 100004, 183058586166, 100, 随机积分, 2024-09-02 20:37:35.16, create, 1037465520066506752]
24-09-02.20:37:35.216 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Logic SQL: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        ) values (?,
                 ?,
                 ?,
                 ?,
                 ?);
24-09-02.20:37:35.216 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:37:35.216 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        , id) values (?, ?, ?, ?, ?, ?); ::: [send_award, lyt, {"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305858635","timeStamp":"2024-09-02 20:37:35.16"}, 18305858635, create, 1037465520297193473]
24-09-02.20:37:35.269 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Logic SQL: update user_raffle_order set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create';
24-09-02.20:37:35.269 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:35.269 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update user_raffle_order_0 set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create'; ::: [lyt, 183058586166]
24-09-02.20:37:35.382 [pool-7-thread-7 ] INFO  EventPublisher         - 发送 MQ 消息 topic:send_award, message:{"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305858635","timeStamp":"2024-09-02 20:37:35.16"}
24-09-02.20:37:35.383 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Logic SQL: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?;
24-09-02.20:37:35.383 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:35.383 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305858635]
24-09-02.20:37:35.383 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305858635]
24-09-02.20:37:35.398 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-1] INFO  SendAwardCustomer      - 监听用户奖品发送消息 topic:send_award message:{"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305858635","timeStamp":"2024-09-02 20:37:35.16"}
24-09-02.20:37:40.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:37:40.035 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100004 awardId:100
24-09-02.20:37:40.036 [scheduling-1    ] INFO  ShardingSphere-SQL     - Logic SQL: select award_count_surplus from strategy_award
        where strategy_id = ? and award_id = ?
24-09-02.20:37:40.036 [scheduling-1    ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:40.036 [scheduling-1    ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select award_count_surplus from strategy_award
        where strategy_id = ? and award_id = ? ::: [100004, 100]
24-09-02.20:37:40.072 [scheduling-1    ] INFO  ShardingSphere-SQL     - Logic SQL: update strategy_award set award_count_surplus = award_count_surplus - 1
        where strategy_id = ? and award_id = ?
24-09-02.20:37:40.072 [scheduling-1    ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:37:40.072 [scheduling-1    ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: update strategy_award set award_count_surplus = award_count_surplus - 1
        where strategy_id = ? and award_id = ? ::: [100004, 100]
24-09-02.20:37:40.112 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:37:40.112 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:37:40.112 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:40.112 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:37:40.112 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:37:45.012 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:37:45.012 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:37:45.012 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:45.012 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:37:45.012 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:37:45.030 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:37:50.013 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:37:50.031 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:37:50.032 [pool-7-thread-10] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:37:50.032 [pool-7-thread-10] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:50.032 [pool-7-thread-10] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:37:50.032 [pool-7-thread-10] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:37:55.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:37:55.028 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:37:55.047 [pool-7-thread-11] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:37:55.047 [pool-7-thread-11] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:37:55.047 [pool-7-thread-11] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:37:55.047 [pool-7-thread-11] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:38:00.014 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:38:00.031 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:38:00.031 [pool-7-thread-12] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:38:00.031 [pool-7-thread-12] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:38:00.031 [pool-7-thread-12] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:38:00.031 [pool-7-thread-12] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:38:05.001 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:38:05.021 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:38:05.022 [pool-7-thread-13] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:38:05.022 [pool-7-thread-13] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:38:05.022 [pool-7-thread-13] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:38:05.022 [pool-7-thread-13] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:38:10.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:38:10.027 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:38:10.044 [pool-7-thread-14] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:38:10.044 [pool-7-thread-14] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:38:10.044 [pool-7-thread-14] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:38:10.044 [pool-7-thread-14] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:38:15.005 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:38:15.022 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:38:15.023 [pool-7-thread-15] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:38:15.023 [pool-7-thread-15] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:38:15.023 [pool-7-thread-15] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:38:15.023 [pool-7-thread-15] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:38:20.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:38:20.019 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:38:20.037 [pool-7-thread-16] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:38:20.037 [pool-7-thread-16] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@285f661b], lock=Optional.empty, window=Optional.empty)
24-09-02.20:38:20.037 [pool-7-thread-16] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:38:20.037 [pool-7-thread-16] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:38:22.402 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-2] INFO  SimpleMessageListenerContainer - Waiting for workers to finish.
24-09-02.20:38:22.419 [SpringApplicationShutdownHook] INFO  QuartzScheduler        - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
24-09-02.20:38:22.419 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-2] INFO  SimpleMessageListenerContainer - Waiting for workers to finish.
24-09-02.20:38:22.466 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-2] INFO  SimpleMessageListenerContainer - Successfully waited for workers to finish.
24-09-02.20:38:22.894 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-2] INFO  SimpleMessageListenerContainer - Successfully waited for workers to finish.
24-09-02.20:38:23.128 [SpringApplicationShutdownHook] INFO  SchedulerFactoryBean   - Shutting down Quartz Scheduler
24-09-02.20:38:23.128 [SpringApplicationShutdownHook] INFO  QuartzScheduler        - Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
24-09-02.20:38:23.128 [SpringApplicationShutdownHook] INFO  QuartzScheduler        - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
24-09-02.20:38:23.129 [SpringApplicationShutdownHook] INFO  QuartzScheduler        - Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
24-09-02.20:38:23.129 [SpringApplicationShutdownHook] INFO  SimpleMessageListenerContainer - Shutdown ignored - container is already stopped
24-09-02.20:38:23.129 [SpringApplicationShutdownHook] INFO  SimpleMessageListenerContainer - Shutdown ignored - container is already stopped
24-09-02.20:38:23.213 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown initiated...
24-09-02.20:38:23.218 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown completed.
24-09-02.20:38:23.218 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-2 - Shutdown initiated...
24-09-02.20:38:23.223 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-2 - Shutdown completed.
24-09-02.20:39:42.914 [main            ] INFO  Application            - Starting Application using Java 1.8.0_171 on LAPTOP-6UTBSJGB with PID 35116 (C:\Users\27132\Java\big-market\big-market-app\target\classes started by 27132 in C:\Users\27132\Java\big-market)
24-09-02.20:39:42.916 [main            ] INFO  Application            - The following 1 profile is active: "dev"
24-09-02.20:39:44.276 [main            ] INFO  RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
24-09-02.20:39:44.279 [main            ] INFO  RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
24-09-02.20:39:44.335 [main            ] INFO  RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 41 ms. Found 0 Redis repository interfaces.
24-09-02.20:39:44.692 [main            ] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
24-09-02.20:39:44.704 [main            ] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
24-09-02.20:39:44.914 [main            ] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$EnhancerBySpringCGLIB$$483f1dc6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
24-09-02.20:39:45.238 [main            ] INFO  TomcatWebServer        - Tomcat initialized with port(s): 8091 (http)
24-09-02.20:39:45.249 [main            ] INFO  Http11NioProtocol      - Initializing ProtocolHandler ["http-nio-8091"]
24-09-02.20:39:45.249 [main            ] INFO  StandardService        - Starting service [Tomcat]
24-09-02.20:39:45.249 [main            ] INFO  StandardEngine         - Starting Servlet engine: [Apache Tomcat/9.0.75]
24-09-02.20:39:45.480 [main            ] INFO  [/]                    - Initializing Spring embedded WebApplicationContext
24-09-02.20:39:45.480 [main            ] INFO  ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2389 ms
24-09-02.20:39:45.768 [main            ] INFO  HikariDataSource       - HikariPool-1 - Starting...
24-09-02.20:39:46.414 [main            ] INFO  HikariDataSource       - HikariPool-1 - Start completed.
24-09-02.20:39:46.427 [main            ] INFO  HikariDataSource       - HikariPool-2 - Starting...
24-09-02.20:39:46.680 [main            ] INFO  HikariDataSource       - HikariPool-2 - Start completed.
24-09-02.20:39:48.612 [main            ] INFO  Version                - Redisson 3.23.4
24-09-02.20:39:49.093 [redisson-netty-2-6] INFO  MasterPubSubConnectionPool - 1 connections initialized for 8.138.41.137/8.138.41.137:16379
24-09-02.20:39:49.248 [redisson-netty-2-13] INFO  MasterConnectionPool   - 5 connections initialized for 8.138.41.137/8.138.41.137:16379
24-09-02.20:39:50.136 [main            ] INFO  StdSchedulerFactory    - Using default implementation for ThreadExecutor
24-09-02.20:39:50.147 [main            ] INFO  SchedulerSignalerImpl  - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
24-09-02.20:39:50.147 [main            ] INFO  QuartzScheduler        - Quartz Scheduler v.2.3.2 created.
24-09-02.20:39:50.148 [main            ] INFO  RAMJobStore            - RAMJobStore initialized.
24-09-02.20:39:50.148 [main            ] INFO  QuartzScheduler        - Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

24-09-02.20:39:50.148 [main            ] INFO  StdSchedulerFactory    - Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
24-09-02.20:39:50.148 [main            ] INFO  StdSchedulerFactory    - Quartz scheduler version: 2.3.2
24-09-02.20:39:50.148 [main            ] INFO  QuartzScheduler        - JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@1f5aac08
24-09-02.20:39:50.432 [main            ] INFO  EndpointLinksResolver  - Exposing 1 endpoint(s) beneath base path '/actuator'
24-09-02.20:39:50.568 [main            ] INFO  Http11NioProtocol      - Starting ProtocolHandler ["http-nio-8091"]
24-09-02.20:39:50.586 [main            ] INFO  TomcatWebServer        - Tomcat started on port(s): 8091 (http) with context path ''
24-09-02.20:39:50.589 [main            ] INFO  CachingConnectionFactory - Attempting to connect to: [8.138.41.137:5672]
24-09-02.20:39:50.700 [main            ] INFO  CachingConnectionFactory - Created new connection: rabbitConnectionFactory#2bc52b08:0/SimpleConnection@681ba763 [delegate=amqp://admin@8.138.41.137:5672/, localPort= 60589]
24-09-02.20:39:50.988 [main            ] INFO  SchedulerFactoryBean   - Starting Quartz Scheduler now
24-09-02.20:39:50.988 [main            ] INFO  QuartzScheduler        - Scheduler quartzScheduler_$_NON_CLUSTERED started.
24-09-02.20:39:51.005 [main            ] INFO  Application            - Started Application in 8.608 seconds (JVM running for 9.783)
24-09-02.20:39:51.753 [RMI TCP Connection(3)-172.19.166.31] INFO  [/]                    - Initializing Spring DispatcherServlet 'dispatcherServlet'
24-09-02.20:39:51.753 [RMI TCP Connection(3)-172.19.166.31] INFO  DispatcherServlet      - Initializing Servlet 'dispatcherServlet'
24-09-02.20:39:51.754 [RMI TCP Connection(3)-172.19.166.31] INFO  DispatcherServlet      - Completed initialization in 1 ms
24-09-02.20:39:55.010 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:39:55.038 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:39:55.586 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:39:55.587 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@594e5c11], lock=Optional.empty, window=Optional.empty)
24-09-02.20:39:55.587 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:39:55.587 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:39:59.799 [http-nio-8091-exec-2] INFO  RaffleActivityController - 活动抽奖 userId:lyt activityId:101
24-09-02.20:39:59.928 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order where activity_id = ? and user_id = ? and order_state = 'create'
24-09-02.20:39:59.928 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:39:59.928 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order_0 where activity_id = ? and user_id = ? and order_state = 'create' ::: [101, lyt]
24-09-02.20:39:59.979 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account where user_id = ? and activity_id = ?
24-09-02.20:39:59.979 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:39:59.979 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account_0 where user_id = ? and activity_id = ? ::: [lyt, 101]
24-09-02.20:40:00.014 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:40:00.015 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month
        where user_id = ?
          and activity_id = ?
          and `month` = ?;
24-09-02.20:40:00.015 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:40:00.015 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month_0
        where user_id = ?
          and activity_id = ?
          and `month` = ?; ::: [lyt, 101, 2024-09]
24-09-02.20:40:00.015 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:40:00.015 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@594e5c11], lock=Optional.empty, window=Optional.empty)
24-09-02.20:40:00.015 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:40:00.015 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:40:00.034 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:40:00.047 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:40:00.047 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:40:00.047 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:40:00.134 [http-nio-8091-exec-2] INFO  SnowflakeUUIDUtils     - 12位数字的UUID:183058647158
24-09-02.20:40:00.151 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0;
24-09-02.20:40:00.151 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:40:00.152 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_0 set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0; ::: [lyt, 101]
24-09-02.20:40:00.209 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_month
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0
24-09-02.20:40:00.209 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:40:00.209 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_month_0
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0 ::: [lyt, 101, 2024-09]
24-09-02.20:40:00.250 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_day
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0
24-09-02.20:40:00.250 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:40:00.250 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_day_0
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0 ::: [lyt, 101, 2024-09-02]
24-09-02.20:40:00.304 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_raffle_order(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        )
        values(
                  ?, ?, ?, ?, ?, ?, ?, now(), now()
              )
24-09-02.20:40:00.304 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:40:00.304 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_raffle_order_0(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        , id)
        values(?, ?, ?, ?, ?, ?, ?, now(), now(), ?) ::: [lyt, 101, 测试, 100004, 183058647158, 2024-09-02 20:39:59.804, create, 1037466128823595008]
24-09-02.20:40:00.382 [http-nio-8091-exec-2] INFO  RaffleActivityController - 活动抽奖，创建订单 userId:lyt activityId:101 orderId:183058647158
24-09-02.20:40:00.469 [http-nio-8091-exec-2] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userId: lyt strategyId: 100004 ruleModel: rule_default awardId: 103
24-09-02.20:40:00.474 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ?
24-09-02.20:40:00.474 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:40:00.474 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ? ::: [100004, 103]
24-09-02.20:40:00.524 [http-nio-8091-exec-2] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:lyt strategyId:100004 awardId:103
24-09-02.20:40:06.938 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: select activity_id
        from raffle_activity where strategy_id = ?;
24-09-02.20:40:06.938 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:40:06.938 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select activity_id
        from raffle_activity where strategy_id = ?; ::: [100004]
24-09-02.20:40:06.975 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:40:06.975 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:40:06.975 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:40:14.532 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:40:15.852 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: select activity_id
        from raffle_activity where strategy_id = ?;
24-09-02.20:40:15.852 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:40:15.852 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select activity_id
        from raffle_activity where strategy_id = ?; ::: [100004]
24-09-02.20:40:15.871 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:40:15.873 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:40:15.873 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@594e5c11], lock=Optional.empty, window=Optional.empty)
24-09-02.20:40:15.873 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:40:15.873 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:40:20.398 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:40:23.655 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:40:23.655 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:40:23.655 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:40:23.669 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:40:23.670 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:40:23.670 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@594e5c11], lock=Optional.empty, window=Optional.empty)
24-09-02.20:40:23.670 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:40:23.670 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:40:38.295 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:40:38.296 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:40:38.296 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:41:03.305 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:41:03.305 [HikariPool-1 housekeeper] WARN  HikariPool             - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=45s286ms726µs600ns).
24-09-02.20:41:03.305 [HikariPool-2 housekeeper] WARN  HikariPool             - HikariPool-2 - Thread starvation or clock leap detected (housekeeper delta=45s286ms728µs400ns).
24-09-02.20:41:03.307 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:41:03.307 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@594e5c11], lock=Optional.empty, window=Optional.empty)
24-09-02.20:41:03.307 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:41:03.307 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:41:03.307 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0000
24-09-02.20:41:03.309 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:lyt strategyId:100004 awardId:103
24-09-02.20:41:03.324 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:41:03.345 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:41:03.345 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@594e5c11], lock=Optional.empty, window=Optional.empty)
24-09-02.20:41:03.345 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:41:03.345 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:41:03.350 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:lyt strategyId:100004 awardId:103
24-09-02.20:41:03.410 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_stock code:0001
24-09-02.20:41:03.410 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 lyt 100004 103 null
24-09-02.20:41:03.439 [http-nio-8091-exec-2] INFO  SnowflakeUUIDUtils     - 11位数字的UUID:18305867371
24-09-02.20:41:03.554 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_award_record(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state) values(?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?);
24-09-02.20:41:03.555 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:41:03.555 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_award_record_0(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state, id) values(?, ?, ?, ?, ?, ?, ?, ?, ?); ::: [lyt, 101, 100004, 183058647158, 103, 台灯一个, 2024-09-02 20:41:03.438, create, 1037466394088157185]
24-09-02.20:41:03.619 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        ) values (?,
                 ?,
                 ?,
                 ?,
                 ?);
24-09-02.20:41:03.619 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:41:03.619 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        , id) values (?, ?, ?, ?, ?, ?); ::: [send_award, lyt, {"data":{"awardId":103,"awardTitle":"台灯一个","userId":"lyt"},"id":"18305867371","timeStamp":"2024-09-02 20:41:03.44"}, 18305867371, create, 1037466394360786944]
24-09-02.20:41:03.671 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: update user_raffle_order set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create';
24-09-02.20:41:03.671 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:41:03.671 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update user_raffle_order_0 set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create'; ::: [lyt, 183058647158]
24-09-02.20:41:03.792 [pool-7-thread-7 ] INFO  EventPublisher         - 发送 MQ 消息 topic:send_award, message:{"data":{"awardId":103,"awardTitle":"台灯一个","userId":"lyt"},"id":"18305867371","timeStamp":"2024-09-02 20:41:03.44"}
24-09-02.20:41:03.794 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Logic SQL: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?;
24-09-02.20:41:03.794 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:41:03.794 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305867371]
24-09-02.20:41:03.794 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305867371]
24-09-02.20:41:03.818 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-1] INFO  SendAwardCustomer      - 监听用户奖品发送消息 topic:send_award message:{"data":{"awardId":103,"awardTitle":"台灯一个","userId":"lyt"},"id":"18305867371","timeStamp":"2024-09-02 20:41:03.44"}
24-09-02.20:41:05.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:41:05.021 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:41:05.041 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:41:05.041 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@594e5c11], lock=Optional.empty, window=Optional.empty)
24-09-02.20:41:05.041 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:41:05.041 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:41:10.004 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:41:10.023 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:41:10.024 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:41:10.024 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@594e5c11], lock=Optional.empty, window=Optional.empty)
24-09-02.20:41:10.024 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:41:10.024 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:41:14.396 [http-nio-8091-exec-3] INFO  RaffleActivityController - 活动抽奖 userId:lyt activityId:101
24-09-02.20:41:14.416 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order where activity_id = ? and user_id = ? and order_state = 'create'
24-09-02.20:41:14.416 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:41:14.417 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order_0 where activity_id = ? and user_id = ? and order_state = 'create' ::: [101, lyt]
24-09-02.20:41:14.455 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account where user_id = ? and activity_id = ?
24-09-02.20:41:14.455 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:41:14.455 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account_0 where user_id = ? and activity_id = ? ::: [lyt, 101]
24-09-02.20:41:14.474 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month
        where user_id = ?
          and activity_id = ?
          and `month` = ?;
24-09-02.20:41:14.474 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:41:14.475 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month_0
        where user_id = ?
          and activity_id = ?
          and `month` = ?; ::: [lyt, 101, 2024-09]
24-09-02.20:41:14.495 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:41:14.495 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:41:14.495 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:41:14.533 [http-nio-8091-exec-3] INFO  SnowflakeUUIDUtils     - 12位数字的UUID:183058678363
24-09-02.20:41:14.534 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0;
24-09-02.20:41:14.535 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:41:14.535 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_0 set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0; ::: [lyt, 101]
24-09-02.20:41:14.589 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_month
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0
24-09-02.20:41:14.589 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:41:14.589 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_month_0
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0 ::: [lyt, 101, 2024-09]
24-09-02.20:41:14.626 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_day
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0
24-09-02.20:41:14.627 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:41:14.627 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_day_0
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0 ::: [lyt, 101, 2024-09-02]
24-09-02.20:41:14.664 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_raffle_order(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        )
        values(
                  ?, ?, ?, ?, ?, ?, ?, now(), now()
              )
24-09-02.20:41:14.664 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:41:14.664 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_raffle_order_0(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        , id)
        values(?, ?, ?, ?, ?, ?, ?, now(), now(), ?) ::: [lyt, 101, 测试, 100004, 183058678363, 2024-09-02 20:41:14.396, create, 1037466440724623361]
24-09-02.20:41:14.743 [http-nio-8091-exec-3] INFO  RaffleActivityController - 活动抽奖，创建订单 userId:lyt activityId:101 orderId:183058678363
24-09-02.20:41:14.801 [http-nio-8091-exec-3] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userId: lyt strategyId: 100004 ruleModel: rule_default awardId: 103
24-09-02.20:41:14.801 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ?
24-09-02.20:41:14.801 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:41:14.801 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ? ::: [100004, 103]
24-09-02.20:41:14.855 [http-nio-8091-exec-3] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:lyt strategyId:100004 awardId:103
24-09-02.20:41:21.829 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:41:22.823 [pool-7-thread-10] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:41:22.823 [pool-7-thread-10] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@594e5c11], lock=Optional.empty, window=Optional.empty)
24-09-02.20:41:22.823 [pool-7-thread-10] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:41:22.824 [pool-7-thread-10] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:41:22.825 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: select activity_id
        from raffle_activity where strategy_id = ?;
24-09-02.20:41:22.827 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:41:22.827 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select activity_id
        from raffle_activity where strategy_id = ?; ::: [100004]
24-09-02.20:41:22.841 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:41:24.628 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:41:24.629 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:41:24.629 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:41:25.097 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:41:46.465 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:42:03.946 [http-nio-8091-exec-3] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0000
24-09-02.20:42:03.946 [http-nio-8091-exec-3] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:lyt strategyId:100004 awardId:103
24-09-02.20:42:03.947 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:42:03.947 [pool-7-thread-11] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:42:03.947 [pool-7-thread-11] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@594e5c11], lock=Optional.empty, window=Optional.empty)
24-09-02.20:42:03.948 [pool-7-thread-11] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:42:03.948 [pool-7-thread-11] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:42:03.981 [http-nio-8091-exec-3] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:lyt strategyId:100004 awardId:103
24-09-02.20:42:04.001 [http-nio-8091-exec-3] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_stock code:0001
24-09-02.20:42:04.001 [http-nio-8091-exec-3] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 lyt 100004 103 null
24-09-02.20:42:04.024 [http-nio-8091-exec-3] INFO  SnowflakeUUIDUtils     - 11位数字的UUID:18305869912
24-09-02.20:42:04.026 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_award_record(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state) values(?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?);
24-09-02.20:42:04.026 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:42:04.026 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_award_record_0(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state, id) values(?, ?, ?, ?, ?, ?, ?, ?, ?); ::: [lyt, 101, 100004, 183058678363, 103, 台灯一个, 2024-09-02 20:42:04.024, create, 1037466647768051712]
24-09-02.20:42:04.083 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        ) values (?,
                 ?,
                 ?,
                 ?,
                 ?);
24-09-02.20:42:04.083 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:42:04.083 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        , id) values (?, ?, ?, ?, ?, ?); ::: [send_award, lyt, {"data":{"awardId":103,"awardTitle":"台灯一个","userId":"lyt"},"id":"18305869912","timeStamp":"2024-09-02 20:42:04.024"}, 18305869912, create, 1037466648007127041]
24-09-02.20:42:04.154 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: update user_raffle_order set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create';
24-09-02.20:42:04.154 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:42:04.154 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update user_raffle_order_0 set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create'; ::: [lyt, 183058678363]
24-09-02.20:42:04.269 [pool-7-thread-12] INFO  EventPublisher         - 发送 MQ 消息 topic:send_award, message:{"data":{"awardId":103,"awardTitle":"台灯一个","userId":"lyt"},"id":"18305869912","timeStamp":"2024-09-02 20:42:04.024"}
24-09-02.20:42:04.270 [pool-7-thread-12] INFO  ShardingSphere-SQL     - Logic SQL: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?;
24-09-02.20:42:04.270 [pool-7-thread-12] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:42:04.270 [pool-7-thread-12] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305869912]
24-09-02.20:42:04.270 [pool-7-thread-12] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305869912]
24-09-02.20:42:04.287 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-1] INFO  SendAwardCustomer      - 监听用户奖品发送消息 topic:send_award message:{"data":{"awardId":103,"awardTitle":"台灯一个","userId":"lyt"},"id":"18305869912","timeStamp":"2024-09-02 20:42:04.024"}
24-09-02.20:42:05.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:42:05.024 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:42:05.043 [pool-7-thread-13] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:42:05.043 [pool-7-thread-13] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@594e5c11], lock=Optional.empty, window=Optional.empty)
24-09-02.20:42:05.043 [pool-7-thread-13] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:42:05.043 [pool-7-thread-13] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:42:10.011 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:42:10.029 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:42:10.052 [pool-7-thread-14] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:42:10.052 [pool-7-thread-14] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@594e5c11], lock=Optional.empty, window=Optional.empty)
24-09-02.20:42:10.052 [pool-7-thread-14] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:42:10.052 [pool-7-thread-14] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:42:15.002 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:42:15.020 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:42:15.039 [pool-7-thread-15] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:42:15.040 [pool-7-thread-15] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@594e5c11], lock=Optional.empty, window=Optional.empty)
24-09-02.20:42:15.040 [pool-7-thread-15] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:42:15.040 [pool-7-thread-15] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:42:20.010 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:42:20.011 [pool-7-thread-16] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:42:20.011 [pool-7-thread-16] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@594e5c11], lock=Optional.empty, window=Optional.empty)
24-09-02.20:42:20.011 [pool-7-thread-16] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:42:20.011 [pool-7-thread-16] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:42:20.028 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:42:25.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:42:25.009 [pool-7-thread-17] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:42:25.009 [pool-7-thread-17] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@594e5c11], lock=Optional.empty, window=Optional.empty)
24-09-02.20:42:25.009 [pool-7-thread-17] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:42:25.009 [pool-7-thread-17] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:42:25.030 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:42:29.791 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-2] INFO  SimpleMessageListenerContainer - Waiting for workers to finish.
24-09-02.20:42:29.809 [SpringApplicationShutdownHook] INFO  QuartzScheduler        - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
24-09-02.20:42:29.809 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-2] INFO  SimpleMessageListenerContainer - Waiting for workers to finish.
24-09-02.20:42:30.011 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:42:30.029 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:42:30.030 [pool-7-thread-18] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:42:30.030 [pool-7-thread-18] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@594e5c11], lock=Optional.empty, window=Optional.empty)
24-09-02.20:42:30.030 [pool-7-thread-18] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:42:30.030 [pool-7-thread-18] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:42:30.207 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-2] INFO  SimpleMessageListenerContainer - Successfully waited for workers to finish.
24-09-02.20:42:30.507 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-2] INFO  SimpleMessageListenerContainer - Successfully waited for workers to finish.
24-09-02.20:42:30.727 [SpringApplicationShutdownHook] INFO  SchedulerFactoryBean   - Shutting down Quartz Scheduler
24-09-02.20:42:30.727 [SpringApplicationShutdownHook] INFO  QuartzScheduler        - Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
24-09-02.20:42:30.727 [SpringApplicationShutdownHook] INFO  QuartzScheduler        - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
24-09-02.20:42:30.728 [SpringApplicationShutdownHook] INFO  QuartzScheduler        - Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
24-09-02.20:42:30.728 [SpringApplicationShutdownHook] INFO  SimpleMessageListenerContainer - Shutdown ignored - container is already stopped
24-09-02.20:42:30.728 [SpringApplicationShutdownHook] INFO  SimpleMessageListenerContainer - Shutdown ignored - container is already stopped
24-09-02.20:42:30.868 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown initiated...
24-09-02.20:42:30.876 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown completed.
24-09-02.20:42:30.876 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-2 - Shutdown initiated...
24-09-02.20:42:30.881 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-2 - Shutdown completed.
24-09-02.20:42:33.880 [main            ] INFO  Application            - Starting Application using Java 1.8.0_171 on LAPTOP-6UTBSJGB with PID 36564 (C:\Users\27132\Java\big-market\big-market-app\target\classes started by 27132 in C:\Users\27132\Java\big-market)
24-09-02.20:42:33.882 [main            ] INFO  Application            - The following 1 profile is active: "dev"
24-09-02.20:42:35.252 [main            ] INFO  RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
24-09-02.20:42:35.254 [main            ] INFO  RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
24-09-02.20:42:35.316 [main            ] INFO  RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 45 ms. Found 0 Redis repository interfaces.
24-09-02.20:42:35.711 [main            ] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'stringToNoneShardingStrategyConfigurationConverter' of type [org.apache.shardingsphere.spring.boot.converter.StringToNoneShardingStrategyConfigurationConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
24-09-02.20:42:35.726 [main            ] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.shardingsphere-org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration' of type [org.apache.shardingsphere.spring.boot.prop.SpringBootPropertiesConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
24-09-02.20:42:35.983 [main            ] INFO  PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration' of type [org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration$$EnhancerBySpringCGLIB$$c2174d5d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
24-09-02.20:42:36.516 [main            ] INFO  TomcatWebServer        - Tomcat initialized with port(s): 8091 (http)
24-09-02.20:42:36.533 [main            ] INFO  Http11NioProtocol      - Initializing ProtocolHandler ["http-nio-8091"]
24-09-02.20:42:36.533 [main            ] INFO  StandardService        - Starting service [Tomcat]
24-09-02.20:42:36.534 [main            ] INFO  StandardEngine         - Starting Servlet engine: [Apache Tomcat/9.0.75]
24-09-02.20:42:36.835 [main            ] INFO  [/]                    - Initializing Spring embedded WebApplicationContext
24-09-02.20:42:36.835 [main            ] INFO  ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2775 ms
24-09-02.20:42:37.274 [main            ] INFO  HikariDataSource       - HikariPool-1 - Starting...
24-09-02.20:42:38.026 [main            ] INFO  HikariDataSource       - HikariPool-1 - Start completed.
24-09-02.20:42:38.039 [main            ] INFO  HikariDataSource       - HikariPool-2 - Starting...
24-09-02.20:42:38.278 [main            ] INFO  HikariDataSource       - HikariPool-2 - Start completed.
24-09-02.20:42:40.236 [main            ] INFO  Version                - Redisson 3.23.4
24-09-02.20:42:40.762 [redisson-netty-2-4] INFO  MasterPubSubConnectionPool - 1 connections initialized for 8.138.41.137/8.138.41.137:16379
24-09-02.20:42:40.920 [redisson-netty-2-13] INFO  MasterConnectionPool   - 5 connections initialized for 8.138.41.137/8.138.41.137:16379
24-09-02.20:42:41.912 [main            ] INFO  StdSchedulerFactory    - Using default implementation for ThreadExecutor
24-09-02.20:42:41.921 [main            ] INFO  SchedulerSignalerImpl  - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
24-09-02.20:42:41.922 [main            ] INFO  QuartzScheduler        - Quartz Scheduler v.2.3.2 created.
24-09-02.20:42:41.922 [main            ] INFO  RAMJobStore            - RAMJobStore initialized.
24-09-02.20:42:41.923 [main            ] INFO  QuartzScheduler        - Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

24-09-02.20:42:41.923 [main            ] INFO  StdSchedulerFactory    - Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
24-09-02.20:42:41.923 [main            ] INFO  StdSchedulerFactory    - Quartz scheduler version: 2.3.2
24-09-02.20:42:41.923 [main            ] INFO  QuartzScheduler        - JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@6da14f7f
24-09-02.20:42:42.211 [main            ] INFO  EndpointLinksResolver  - Exposing 1 endpoint(s) beneath base path '/actuator'
24-09-02.20:42:42.328 [main            ] INFO  Http11NioProtocol      - Starting ProtocolHandler ["http-nio-8091"]
24-09-02.20:42:42.342 [main            ] INFO  TomcatWebServer        - Tomcat started on port(s): 8091 (http) with context path ''
24-09-02.20:42:42.346 [main            ] INFO  CachingConnectionFactory - Attempting to connect to: [8.138.41.137:5672]
24-09-02.20:42:42.456 [main            ] INFO  CachingConnectionFactory - Created new connection: rabbitConnectionFactory#2719139f:0/SimpleConnection@7ae5f795 [delegate=amqp://admin@8.138.41.137:5672/, localPort= 60730]
24-09-02.20:42:42.727 [main            ] INFO  SchedulerFactoryBean   - Starting Quartz Scheduler now
24-09-02.20:42:42.727 [main            ] INFO  QuartzScheduler        - Scheduler quartzScheduler_$_NON_CLUSTERED started.
24-09-02.20:42:42.744 [main            ] INFO  Application            - Started Application in 9.382 seconds (JVM running for 10.58)
24-09-02.20:42:43.349 [RMI TCP Connection(1)-172.19.166.31] INFO  [/]                    - Initializing Spring DispatcherServlet 'dispatcherServlet'
24-09-02.20:42:43.349 [RMI TCP Connection(1)-172.19.166.31] INFO  DispatcherServlet      - Initializing Servlet 'dispatcherServlet'
24-09-02.20:42:43.350 [RMI TCP Connection(1)-172.19.166.31] INFO  DispatcherServlet      - Completed initialization in 1 ms
24-09-02.20:42:45.005 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:42:45.035 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:42:45.687 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:42:45.687 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@2c72f969], lock=Optional.empty, window=Optional.empty)
24-09-02.20:42:45.687 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:42:45.687 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:42:50.002 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:42:50.020 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:42:50.021 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:42:50.021 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@2c72f969], lock=Optional.empty, window=Optional.empty)
24-09-02.20:42:50.021 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:42:50.021 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:42:54.215 [http-nio-8091-exec-2] INFO  RaffleActivityController - 活动装配，数据预热，开始 activityId:101
24-09-02.20:42:54.232 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: select sku,
               activity_id,
               activity_count_id,
               stock_count,
               stock_count_surplus
        from raffle_activity_sku where activity_id = ?;
24-09-02.20:42:54.232 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:42:54.232 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select sku,
               activity_id,
               activity_count_id,
               stock_count,
               stock_count_surplus
        from raffle_activity_sku where activity_id = ?; ::: [101]
24-09-02.20:42:54.338 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: select id,
               activity_count_id,
               total_count,
               day_count,
               month_count,
               create_time,
               update_time
        from raffle_activity_count where activity_count_id = ?;
24-09-02.20:42:54.338 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:42:54.338 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select id,
               activity_count_id,
               total_count,
               day_count,
               month_count,
               create_time,
               update_time
        from raffle_activity_count where activity_count_id = ?; ::: [101]
24-09-02.20:42:54.407 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: select id,
               activity_id,
               activity_name,
               activity_desc,
               begin_date_time,
               end_date_time,
               stock_count,
               stock_count_surplus,
               activity_count_id,
               strategy_id,
               `state`,
               create_time,
               update_time
        from raffle_activity where activity_id = ?;
24-09-02.20:42:54.407 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:42:54.407 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select id,
               activity_id,
               activity_name,
               activity_desc,
               begin_date_time,
               end_date_time,
               stock_count,
               stock_count_surplus,
               activity_count_id,
               strategy_id,
               `state`,
               create_time,
               update_time
        from raffle_activity where activity_id = ?; ::: [101]
24-09-02.20:42:54.452 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: select strategy_id
        from raffle_activity where activity_id = ?;
24-09-02.20:42:54.452 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:42:54.452 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select strategy_id
        from raffle_activity where activity_id = ?; ::: [101]
24-09-02.20:42:54.495 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: select strategy_id,
               award_id,
               award_title,
               award_subtitle,
               award_count,
               award_count_surplus,
               award_rate,
               sort
        from strategy_award
        where strategy_id = ?
24-09-02.20:42:54.495 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:42:54.495 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select strategy_id,
               award_id,
               award_title,
               award_subtitle,
               award_count,
               award_count_surplus,
               award_rate,
               sort
        from strategy_award
        where strategy_id = ? ::: [100004]
24-09-02.20:42:54.785 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Logic SQL: select
            id,
            strategy_id,
            strategy_desc,
            rule_models,
            create_time,
            update_time
        from strategy
        where strategy_id = ?
24-09-02.20:42:54.786 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:42:54.786 [http-nio-8091-exec-2] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select
            id,
            strategy_id,
            strategy_desc,
            rule_models,
            create_time,
            update_time
        from strategy
        where strategy_id = ? ::: [100004]
24-09-02.20:42:54.828 [http-nio-8091-exec-2] INFO  RaffleActivityController - 活动装配，数据预热，完成 activityId:101
24-09-02.20:42:55.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:42:55.023 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:42:55.044 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:42:55.044 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@2c72f969], lock=Optional.empty, window=Optional.empty)
24-09-02.20:42:55.044 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:42:55.044 [pool-7-thread-3 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:42:57.198 [http-nio-8091-exec-5] INFO  RaffleActivityController - 活动抽奖 userId:lyt activityId:101
24-09-02.20:42:57.337 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Logic SQL: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order where activity_id = ? and user_id = ? and order_state = 'create'
24-09-02.20:42:57.337 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:42:57.337 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order_0 where activity_id = ? and user_id = ? and order_state = 'create' ::: [101, lyt]
24-09-02.20:42:57.393 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Logic SQL: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account where user_id = ? and activity_id = ?
24-09-02.20:42:57.394 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:42:57.394 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account_0 where user_id = ? and activity_id = ? ::: [lyt, 101]
24-09-02.20:42:57.430 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month
        where user_id = ?
          and activity_id = ?
          and `month` = ?;
24-09-02.20:42:57.430 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:42:57.430 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month_0
        where user_id = ?
          and activity_id = ?
          and `month` = ?; ::: [lyt, 101, 2024-09]
24-09-02.20:42:57.465 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:42:57.466 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:42:57.466 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:42:57.560 [http-nio-8091-exec-5] INFO  SnowflakeUUIDUtils     - 12位数字的UUID:183058721576
24-09-02.20:42:57.581 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0;
24-09-02.20:42:57.581 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:42:57.582 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_0 set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0; ::: [lyt, 101]
24-09-02.20:42:57.639 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_month
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0
24-09-02.20:42:57.639 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:42:57.639 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_month_0
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0 ::: [lyt, 101, 2024-09]
24-09-02.20:42:57.683 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_day
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0
24-09-02.20:42:57.684 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:42:57.684 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_day_0
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0 ::: [lyt, 101, 2024-09-02]
24-09-02.20:42:57.739 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_raffle_order(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        )
        values(
                  ?, ?, ?, ?, ?, ?, ?, now(), now()
              )
24-09-02.20:42:57.739 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:42:57.739 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_raffle_order_0(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        , id)
        values(?, ?, ?, ?, ?, ?, ?, now(), now(), ?) ::: [lyt, 101, 测试, 100004, 183058721576, 2024-09-02 20:42:57.204, create, 1037466873035730944]
24-09-02.20:42:57.820 [http-nio-8091-exec-5] INFO  RaffleActivityController - 活动抽奖，创建订单 userId:lyt activityId:101 orderId:183058721576
24-09-02.20:42:57.901 [http-nio-8091-exec-5] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userId: lyt strategyId: 100004 ruleModel: rule_default awardId: 100
24-09-02.20:42:57.905 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Logic SQL: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ?
24-09-02.20:42:57.905 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:42:57.905 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ? ::: [100004, 100]
24-09-02.20:42:57.963 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Logic SQL: select
            tree_id,
            tree_name,
            tree_desc,
            tree_root_rule_key
        from rule_tree
        where tree_id = ?;
24-09-02.20:42:57.963 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:42:57.963 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select
            tree_id,
            tree_name,
            tree_desc,
            tree_root_rule_key
        from rule_tree
        where tree_id = ?; ::: [tree_lock]
24-09-02.20:42:57.983 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Logic SQL: select
            tree_id,
            rule_key,
            rule_desc,
            rule_value
        from rule_tree_node
        where tree_id = ?;
24-09-02.20:42:57.983 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:42:57.984 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select
            tree_id,
            rule_key,
            rule_desc,
            rule_value
        from rule_tree_node
        where tree_id = ?; ::: [tree_lock]
24-09-02.20:42:58.004 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Logic SQL: select
            tree_id,
            rule_node_from,
            rule_node_to,
            rule_limit_type,
            rule_limit_value
        from rule_tree_node_line
        where tree_id = ?;
24-09-02.20:42:58.004 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:42:58.004 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select
            tree_id,
            rule_node_from,
            rule_node_to,
            rule_limit_type,
            rule_limit_value
        from rule_tree_node_line
        where tree_id = ?; ::: [tree_lock]
24-09-02.20:42:58.052 [http-nio-8091-exec-5] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:lyt strategyId:100004 awardId:100
24-09-02.20:43:01.179 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:43:04.349 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:43:04.350 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@2c72f969], lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:04.350 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:43:04.350 [pool-7-thread-4 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:43:04.350 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Logic SQL: select activity_id
        from raffle_activity where strategy_id = ?;
24-09-02.20:43:04.350 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:04.350 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select activity_id
        from raffle_activity where strategy_id = ?; ::: [100004]
24-09-02.20:43:04.367 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:43:04.387 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:43:04.387 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:04.387 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:43:08.647 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:43:25.493 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:43:29.689 [http-nio-8091-exec-5] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0001
24-09-02.20:43:30.589 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:43:30.589 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:43:30.589 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@2c72f969], lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:30.589 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:43:30.589 [pool-7-thread-5 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:43:32.956 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:43:32.955 [http-nio-8091-exec-5] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:lyt strategyId:100004 awardId:100 ruleValue:100:1,100
24-09-02.20:43:42.620 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:43:43.235 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:43:43.254 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@2c72f969], lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:43.256 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:43:43.256 [pool-7-thread-6 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:43:45.309 [http-nio-8091-exec-5] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-09-02.20:43:45.309 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:43:45.309 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 lyt 100004 100 1,100
24-09-02.20:43:45.310 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:43:45.310 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@2c72f969], lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:45.310 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:43:45.310 [pool-7-thread-7 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:43:45.327 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:43:45.328 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Logic SQL: select strategy_id,
               award_id,
               award_title,
               award_subtitle,
               award_count,
               award_count_surplus,
               award_rate,
               sort
        from strategy_award
        where strategy_id = ?
        and award_id = ?
24-09-02.20:43:45.328 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:45.328 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select strategy_id,
               award_id,
               award_title,
               award_subtitle,
               award_count,
               award_count_surplus,
               award_rate,
               sort
        from strategy_award
        where strategy_id = ?
        and award_id = ? ::: [100004, 100]
24-09-02.20:43:45.373 [http-nio-8091-exec-5] INFO  SnowflakeUUIDUtils     - 11位数字的UUID:18305874163
24-09-02.20:43:45.493 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_award_record(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state) values(?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?);
24-09-02.20:43:45.493 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:43:45.493 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_award_record_0(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state, id) values(?, ?, ?, ?, ?, ?, ?, ?, ?); ::: [lyt, 101, 100004, 183058721576, 100, 随机积分, 2024-09-02 20:43:45.371, create, 1037467073313746945]
24-09-02.20:43:45.575 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Logic SQL: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        ) values (?,
                 ?,
                 ?,
                 ?,
                 ?);
24-09-02.20:43:45.575 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:43:45.575 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        , id) values (?, ?, ?, ?, ?, ?); ::: [send_award, lyt, {"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305874163","timeStamp":"2024-09-02 20:43:45.373"}, 18305874163, create, 1037467073653485568]
24-09-02.20:43:45.629 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Logic SQL: update user_raffle_order set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create';
24-09-02.20:43:45.630 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:43:45.631 [http-nio-8091-exec-5] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update user_raffle_order_0 set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create'; ::: [lyt, 183058721576]
24-09-02.20:43:45.751 [pool-7-thread-8 ] INFO  EventPublisher         - 发送 MQ 消息 topic:send_award, message:{"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305874163","timeStamp":"2024-09-02 20:43:45.373"}
24-09-02.20:43:45.753 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Logic SQL: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?;
24-09-02.20:43:45.753 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:43:45.753 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305874163]
24-09-02.20:43:45.753 [pool-7-thread-8 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305874163]
24-09-02.20:43:45.778 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-1] INFO  SendAwardCustomer      - 监听用户奖品发送消息 topic:send_award message:{"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305874163","timeStamp":"2024-09-02 20:43:45.373"}
24-09-02.20:43:50.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:43:50.007 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:43:50.007 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@2c72f969], lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:50.007 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:43:50.007 [pool-7-thread-9 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:43:50.024 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:43:55.006 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:43:55.028 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:43:55.029 [pool-7-thread-10] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:43:55.029 [pool-7-thread-10] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@2c72f969], lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:55.029 [pool-7-thread-10] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:43:55.029 [pool-7-thread-10] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:43:55.928 [http-nio-8091-exec-6] INFO  RaffleActivityController - 活动抽奖 userId:lyt activityId:101
24-09-02.20:43:55.947 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order where activity_id = ? and user_id = ? and order_state = 'create'
24-09-02.20:43:55.947 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:55.947 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order_0 where activity_id = ? and user_id = ? and order_state = 'create' ::: [101, lyt]
24-09-02.20:43:55.985 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account where user_id = ? and activity_id = ?
24-09-02.20:43:55.985 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:55.985 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account_0 where user_id = ? and activity_id = ? ::: [lyt, 101]
24-09-02.20:43:56.005 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month
        where user_id = ?
          and activity_id = ?
          and `month` = ?;
24-09-02.20:43:56.006 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:56.006 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month_0
        where user_id = ?
          and activity_id = ?
          and `month` = ?; ::: [lyt, 101, 2024-09]
24-09-02.20:43:56.025 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:43:56.025 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:56.025 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:43:56.062 [http-nio-8091-exec-6] INFO  SnowflakeUUIDUtils     - 12位数字的UUID:183058746113
24-09-02.20:43:56.064 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0;
24-09-02.20:43:56.064 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:43:56.064 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_0 set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0; ::: [lyt, 101]
24-09-02.20:43:56.118 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_month
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0
24-09-02.20:43:56.118 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:43:56.118 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_month_0
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0 ::: [lyt, 101, 2024-09]
24-09-02.20:43:56.155 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_day
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0
24-09-02.20:43:56.156 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:43:56.156 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_day_0
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0 ::: [lyt, 101, 2024-09-02]
24-09-02.20:43:56.193 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_raffle_order(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        )
        values(
                  ?, ?, ?, ?, ?, ?, ?, now(), now()
              )
24-09-02.20:43:56.193 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:43:56.193 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_raffle_order_0(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        , id)
        values(?, ?, ?, ?, ?, ?, ?, now(), now(), ?) ::: [lyt, 101, 测试, 100004, 183058746113, 2024-09-02 20:43:55.928, create, 1037467118226354177]
24-09-02.20:43:56.269 [http-nio-8091-exec-6] INFO  RaffleActivityController - 活动抽奖，创建订单 userId:lyt activityId:101 orderId:183058746113
24-09-02.20:43:56.323 [http-nio-8091-exec-6] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userId: lyt strategyId: 100004 ruleModel: rule_default awardId: 101
24-09-02.20:43:56.324 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ?
24-09-02.20:43:56.324 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:56.324 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ? ::: [100004, 101]
24-09-02.20:43:56.386 [http-nio-8091-exec-6] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:lyt strategyId:100004 awardId:101
24-09-02.20:43:56.386 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: select activity_id
        from raffle_activity where strategy_id = ?;
24-09-02.20:43:56.386 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:56.386 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select activity_id
        from raffle_activity where strategy_id = ?; ::: [100004]
24-09-02.20:43:56.406 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:43:56.406 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:56.406 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:43:56.425 [http-nio-8091-exec-6] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0001
24-09-02.20:43:56.425 [http-nio-8091-exec-6] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:lyt strategyId:100004 awardId:101 ruleValue:100:1,100
24-09-02.20:43:56.425 [http-nio-8091-exec-6] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-09-02.20:43:56.425 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 lyt 100004 100 1,100
24-09-02.20:43:56.447 [http-nio-8091-exec-6] INFO  SnowflakeUUIDUtils     - 11位数字的UUID:18305874627
24-09-02.20:43:56.449 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_award_record(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state) values(?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?);
24-09-02.20:43:56.449 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:43:56.449 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_award_record_0(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state, id) values(?, ?, ?, ?, ?, ?, ?, ?, ?); ::: [lyt, 101, 100004, 183058746113, 100, 随机积分, 2024-09-02 20:43:56.447, create, 1037467119300096000]
24-09-02.20:43:56.504 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        ) values (?,
                 ?,
                 ?,
                 ?,
                 ?);
24-09-02.20:43:56.504 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:43:56.504 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        , id) values (?, ?, ?, ?, ?, ?); ::: [send_award, lyt, {"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305874627","timeStamp":"2024-09-02 20:43:56.447"}, 18305874627, create, 1037467119534977025]
24-09-02.20:43:56.558 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Logic SQL: update user_raffle_order set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create';
24-09-02.20:43:56.558 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:43:56.558 [http-nio-8091-exec-6] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update user_raffle_order_0 set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create'; ::: [lyt, 183058746113]
24-09-02.20:43:56.675 [pool-7-thread-11] INFO  EventPublisher         - 发送 MQ 消息 topic:send_award, message:{"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305874627","timeStamp":"2024-09-02 20:43:56.447"}
24-09-02.20:43:56.675 [pool-7-thread-11] INFO  ShardingSphere-SQL     - Logic SQL: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?;
24-09-02.20:43:56.677 [pool-7-thread-11] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:43:56.677 [pool-7-thread-11] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305874627]
24-09-02.20:43:56.677 [pool-7-thread-11] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305874627]
24-09-02.20:43:56.694 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-1] INFO  SendAwardCustomer      - 监听用户奖品发送消息 topic:send_award message:{"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305874627","timeStamp":"2024-09-02 20:43:56.447"}
24-09-02.20:43:57.957 [http-nio-8091-exec-3] INFO  RaffleActivityController - 活动抽奖 userId:lyt activityId:101
24-09-02.20:43:57.976 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order where activity_id = ? and user_id = ? and order_state = 'create'
24-09-02.20:43:57.977 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:57.977 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order_0 where activity_id = ? and user_id = ? and order_state = 'create' ::: [101, lyt]
24-09-02.20:43:58.015 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account where user_id = ? and activity_id = ?
24-09-02.20:43:58.015 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:58.015 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account_0 where user_id = ? and activity_id = ? ::: [lyt, 101]
24-09-02.20:43:58.036 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month
        where user_id = ?
          and activity_id = ?
          and `month` = ?;
24-09-02.20:43:58.036 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:58.036 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month_0
        where user_id = ?
          and activity_id = ?
          and `month` = ?; ::: [lyt, 101, 2024-09]
24-09-02.20:43:58.055 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:43:58.055 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:58.055 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:43:58.094 [http-nio-8091-exec-3] INFO  SnowflakeUUIDUtils     - 12位数字的UUID:183058746965
24-09-02.20:43:58.095 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0;
24-09-02.20:43:58.095 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:43:58.095 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_0 set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0; ::: [lyt, 101]
24-09-02.20:43:58.149 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_month
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0
24-09-02.20:43:58.149 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:43:58.149 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_month_0
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0 ::: [lyt, 101, 2024-09]
24-09-02.20:43:58.186 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_day
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0
24-09-02.20:43:58.186 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:43:58.186 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_day_0
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0 ::: [lyt, 101, 2024-09-02]
24-09-02.20:43:58.222 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_raffle_order(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        )
        values(
                  ?, ?, ?, ?, ?, ?, ?, now(), now()
              )
24-09-02.20:43:58.222 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:43:58.222 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_raffle_order_0(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        , id)
        values(?, ?, ?, ?, ?, ?, ?, now(), now(), ?) ::: [lyt, 101, 测试, 100004, 183058746965, 2024-09-02 20:43:57.957, create, 1037467126740791296]
24-09-02.20:43:58.298 [http-nio-8091-exec-3] INFO  RaffleActivityController - 活动抽奖，创建订单 userId:lyt activityId:101 orderId:183058746965
24-09-02.20:43:58.352 [http-nio-8091-exec-3] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userId: lyt strategyId: 100004 ruleModel: rule_default awardId: 100
24-09-02.20:43:58.353 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ?
24-09-02.20:43:58.353 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:58.353 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ? ::: [100004, 100]
24-09-02.20:43:58.406 [http-nio-8091-exec-3] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:lyt strategyId:100004 awardId:100
24-09-02.20:43:58.407 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: select activity_id
        from raffle_activity where strategy_id = ?;
24-09-02.20:43:58.407 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:58.407 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select activity_id
        from raffle_activity where strategy_id = ?; ::: [100004]
24-09-02.20:43:58.426 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:43:58.426 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:58.426 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:43:58.445 [http-nio-8091-exec-3] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0001
24-09-02.20:43:58.445 [http-nio-8091-exec-3] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:lyt strategyId:100004 awardId:100 ruleValue:100:1,100
24-09-02.20:43:58.446 [http-nio-8091-exec-3] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-09-02.20:43:58.446 [http-nio-8091-exec-3] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 lyt 100004 100 1,100
24-09-02.20:43:58.464 [http-nio-8091-exec-3] INFO  SnowflakeUUIDUtils     - 11位数字的UUID:18305874712
24-09-02.20:43:58.465 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_award_record(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state) values(?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?);
24-09-02.20:43:58.465 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:43:58.465 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_award_record_0(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state, id) values(?, ?, ?, ?, ?, ?, ?, ?, ?); ::: [lyt, 101, 100004, 183058746965, 100, 随机积分, 2024-09-02 20:43:58.464, create, 1037467127760007169]
24-09-02.20:43:58.519 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        ) values (?,
                 ?,
                 ?,
                 ?,
                 ?);
24-09-02.20:43:58.520 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:43:58.520 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        , id) values (?, ?, ?, ?, ?, ?); ::: [send_award, lyt, {"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305874712","timeStamp":"2024-09-02 20:43:58.464"}, 18305874712, create, 1037467127986499584]
24-09-02.20:43:58.574 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Logic SQL: update user_raffle_order set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create';
24-09-02.20:43:58.574 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:43:58.574 [http-nio-8091-exec-3] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update user_raffle_order_0 set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create'; ::: [lyt, 183058746965]
24-09-02.20:43:58.689 [pool-7-thread-12] INFO  EventPublisher         - 发送 MQ 消息 topic:send_award, message:{"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305874712","timeStamp":"2024-09-02 20:43:58.464"}
24-09-02.20:43:58.690 [pool-7-thread-12] INFO  ShardingSphere-SQL     - Logic SQL: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?;
24-09-02.20:43:58.690 [pool-7-thread-12] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:43:58.690 [pool-7-thread-12] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305874712]
24-09-02.20:43:58.690 [pool-7-thread-12] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305874712]
24-09-02.20:43:58.707 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-1] INFO  SendAwardCustomer      - 监听用户奖品发送消息 topic:send_award message:{"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305874712","timeStamp":"2024-09-02 20:43:58.464"}
24-09-02.20:43:59.598 [http-nio-8091-exec-4] INFO  RaffleActivityController - 活动抽奖 userId:lyt activityId:101
24-09-02.20:43:59.617 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Logic SQL: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order where activity_id = ? and user_id = ? and order_state = 'create'
24-09-02.20:43:59.617 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:59.617 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order_0 where activity_id = ? and user_id = ? and order_state = 'create' ::: [101, lyt]
24-09-02.20:43:59.654 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Logic SQL: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account where user_id = ? and activity_id = ?
24-09-02.20:43:59.655 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:59.655 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account_0 where user_id = ? and activity_id = ? ::: [lyt, 101]
24-09-02.20:43:59.674 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month
        where user_id = ?
          and activity_id = ?
          and `month` = ?;
24-09-02.20:43:59.674 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:59.674 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month_0
        where user_id = ?
          and activity_id = ?
          and `month` = ?; ::: [lyt, 101, 2024-09]
24-09-02.20:43:59.695 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:43:59.695 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:59.695 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:43:59.732 [http-nio-8091-exec-4] INFO  SnowflakeUUIDUtils     - 12位数字的UUID:183058747652
24-09-02.20:43:59.734 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0;
24-09-02.20:43:59.734 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:43:59.734 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_0 set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0; ::: [lyt, 101]
24-09-02.20:43:59.788 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_month
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0
24-09-02.20:43:59.789 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:43:59.789 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_month_0
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0 ::: [lyt, 101, 2024-09]
24-09-02.20:43:59.826 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_day
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0
24-09-02.20:43:59.826 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:43:59.826 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_day_0
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0 ::: [lyt, 101, 2024-09-02]
24-09-02.20:43:59.862 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_raffle_order(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        )
        values(
                  ?, ?, ?, ?, ?, ?, ?, now(), now()
              )
24-09-02.20:43:59.862 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:43:59.862 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_raffle_order_0(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        , id)
        values(?, ?, ?, ?, ?, ?, ?, now(), now(), ?) ::: [lyt, 101, 测试, 100004, 183058747652, 2024-09-02 20:43:59.598, create, 1037467133619449857]
24-09-02.20:43:59.938 [http-nio-8091-exec-4] INFO  RaffleActivityController - 活动抽奖，创建订单 userId:lyt activityId:101 orderId:183058747652
24-09-02.20:43:59.992 [http-nio-8091-exec-4] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userId: lyt strategyId: 100004 ruleModel: rule_default awardId: 100
24-09-02.20:43:59.993 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Logic SQL: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ?
24-09-02.20:43:59.993 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:43:59.993 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ? ::: [100004, 100]
24-09-02.20:44:00.005 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:44:00.022 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:44:00.042 [pool-7-thread-13] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:44:00.042 [pool-7-thread-13] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@2c72f969], lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:00.042 [pool-7-thread-13] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:44:00.042 [pool-7-thread-13] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:44:00.046 [http-nio-8091-exec-4] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:lyt strategyId:100004 awardId:100
24-09-02.20:44:00.046 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Logic SQL: select activity_id
        from raffle_activity where strategy_id = ?;
24-09-02.20:44:00.046 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:00.046 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select activity_id
        from raffle_activity where strategy_id = ?; ::: [100004]
24-09-02.20:44:00.083 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:44:00.083 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:00.083 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:44:00.103 [http-nio-8091-exec-4] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0001
24-09-02.20:44:00.103 [http-nio-8091-exec-4] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:lyt strategyId:100004 awardId:100 ruleValue:100:1,100
24-09-02.20:44:00.103 [http-nio-8091-exec-4] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-09-02.20:44:00.103 [http-nio-8091-exec-4] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 lyt 100004 100 1,100
24-09-02.20:44:00.121 [http-nio-8091-exec-4] INFO  SnowflakeUUIDUtils     - 11位数字的UUID:18305874781
24-09-02.20:44:00.122 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_award_record(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state) values(?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?);
24-09-02.20:44:00.122 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:44:00.122 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_award_record_0(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state, id) values(?, ?, ?, ?, ?, ?, ?, ?, ?); ::: [lyt, 101, 100004, 183058747652, 100, 随机积分, 2024-09-02 20:44:00.121, create, 1037467134709968896]
24-09-02.20:44:00.176 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Logic SQL: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        ) values (?,
                 ?,
                 ?,
                 ?,
                 ?);
24-09-02.20:44:00.176 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:44:00.176 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        , id) values (?, ?, ?, ?, ?, ?); ::: [send_award, lyt, {"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305874781","timeStamp":"2024-09-02 20:44:00.121"}, 18305874781, create, 1037467134936461313]
24-09-02.20:44:00.230 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Logic SQL: update user_raffle_order set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create';
24-09-02.20:44:00.230 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:44:00.230 [http-nio-8091-exec-4] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update user_raffle_order_0 set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create'; ::: [lyt, 183058747652]
24-09-02.20:44:00.349 [pool-7-thread-14] INFO  EventPublisher         - 发送 MQ 消息 topic:send_award, message:{"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305874781","timeStamp":"2024-09-02 20:44:00.121"}
24-09-02.20:44:00.349 [pool-7-thread-14] INFO  ShardingSphere-SQL     - Logic SQL: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?;
24-09-02.20:44:00.349 [pool-7-thread-14] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:44:00.349 [pool-7-thread-14] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305874781]
24-09-02.20:44:00.349 [pool-7-thread-14] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305874781]
24-09-02.20:44:00.366 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-1] INFO  SendAwardCustomer      - 监听用户奖品发送消息 topic:send_award message:{"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305874781","timeStamp":"2024-09-02 20:44:00.121"}
24-09-02.20:44:01.207 [http-nio-8091-exec-7] INFO  RaffleActivityController - 活动抽奖 userId:lyt activityId:101
24-09-02.20:44:01.227 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order where activity_id = ? and user_id = ? and order_state = 'create'
24-09-02.20:44:01.227 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:01.227 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order_0 where activity_id = ? and user_id = ? and order_state = 'create' ::: [101, lyt]
24-09-02.20:44:01.265 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account where user_id = ? and activity_id = ?
24-09-02.20:44:01.265 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:01.265 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account_0 where user_id = ? and activity_id = ? ::: [lyt, 101]
24-09-02.20:44:01.285 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month
        where user_id = ?
          and activity_id = ?
          and `month` = ?;
24-09-02.20:44:01.285 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:01.285 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month_0
        where user_id = ?
          and activity_id = ?
          and `month` = ?; ::: [lyt, 101, 2024-09]
24-09-02.20:44:01.305 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:44:01.305 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:01.305 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:44:01.342 [http-nio-8091-exec-7] INFO  SnowflakeUUIDUtils     - 12位数字的UUID:183058748328
24-09-02.20:44:01.344 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0;
24-09-02.20:44:01.344 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:44:01.344 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_0 set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0; ::: [lyt, 101]
24-09-02.20:44:01.399 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_month
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0
24-09-02.20:44:01.399 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:44:01.399 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_month_0
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0 ::: [lyt, 101, 2024-09]
24-09-02.20:44:01.437 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_day
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0
24-09-02.20:44:01.437 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:44:01.437 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_day_0
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0 ::: [lyt, 101, 2024-09-02]
24-09-02.20:44:01.474 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_raffle_order(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        )
        values(
                  ?, ?, ?, ?, ?, ?, ?, now(), now()
              )
24-09-02.20:44:01.474 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:44:01.474 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_raffle_order_0(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        , id)
        values(?, ?, ?, ?, ?, ?, ?, now(), now(), ?) ::: [lyt, 101, 测试, 100004, 183058748328, 2024-09-02 20:44:01.207, create, 1037467140376473600]
24-09-02.20:44:01.551 [http-nio-8091-exec-7] INFO  RaffleActivityController - 活动抽奖，创建订单 userId:lyt activityId:101 orderId:183058748328
24-09-02.20:44:01.605 [http-nio-8091-exec-7] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userId: lyt strategyId: 100004 ruleModel: rule_default awardId: 104
24-09-02.20:44:01.606 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ?
24-09-02.20:44:01.606 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:01.606 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ? ::: [100004, 104]
24-09-02.20:44:01.660 [http-nio-8091-exec-7] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:lyt strategyId:100004 awardId:104
24-09-02.20:44:01.662 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: select activity_id
        from raffle_activity where strategy_id = ?;
24-09-02.20:44:01.662 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:01.662 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select activity_id
        from raffle_activity where strategy_id = ?; ::: [100004]
24-09-02.20:44:01.681 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:44:01.681 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:01.681 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:44:01.700 [http-nio-8091-exec-7] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0001
24-09-02.20:44:01.700 [http-nio-8091-exec-7] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:lyt strategyId:100004 awardId:104 ruleValue:100:1,100
24-09-02.20:44:01.700 [http-nio-8091-exec-7] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-09-02.20:44:01.700 [http-nio-8091-exec-7] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 lyt 100004 100 1,100
24-09-02.20:44:01.718 [http-nio-8091-exec-7] INFO  SnowflakeUUIDUtils     - 11位数字的UUID:18305874848
24-09-02.20:44:01.720 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_award_record(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state) values(?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?);
24-09-02.20:44:01.720 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:44:01.720 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_award_record_0(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state, id) values(?, ?, ?, ?, ?, ?, ?, ?, ?); ::: [lyt, 101, 100004, 183058748328, 100, 随机积分, 2024-09-02 20:44:01.718, create, 1037467141408272385]
24-09-02.20:44:01.776 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        ) values (?,
                 ?,
                 ?,
                 ?,
                 ?);
24-09-02.20:44:01.776 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:44:01.776 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        , id) values (?, ?, ?, ?, ?, ?); ::: [send_award, lyt, {"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305874848","timeStamp":"2024-09-02 20:44:01.719"}, 18305874848, create, 1037467141647347712]
24-09-02.20:44:01.829 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Logic SQL: update user_raffle_order set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create';
24-09-02.20:44:01.829 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:44:01.829 [http-nio-8091-exec-7] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update user_raffle_order_0 set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create'; ::: [lyt, 183058748328]
24-09-02.20:44:01.943 [pool-7-thread-15] INFO  EventPublisher         - 发送 MQ 消息 topic:send_award, message:{"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305874848","timeStamp":"2024-09-02 20:44:01.719"}
24-09-02.20:44:01.945 [pool-7-thread-15] INFO  ShardingSphere-SQL     - Logic SQL: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?;
24-09-02.20:44:01.945 [pool-7-thread-15] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:44:01.945 [pool-7-thread-15] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305874848]
24-09-02.20:44:01.945 [pool-7-thread-15] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305874848]
24-09-02.20:44:01.962 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-1] INFO  SendAwardCustomer      - 监听用户奖品发送消息 topic:send_award message:{"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305874848","timeStamp":"2024-09-02 20:44:01.719"}
24-09-02.20:44:02.870 [http-nio-8091-exec-8] INFO  RaffleActivityController - 活动抽奖 userId:lyt activityId:101
24-09-02.20:44:02.890 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order where activity_id = ? and user_id = ? and order_state = 'create'
24-09-02.20:44:02.890 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:02.890 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order_0 where activity_id = ? and user_id = ? and order_state = 'create' ::: [101, lyt]
24-09-02.20:44:02.927 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account where user_id = ? and activity_id = ?
24-09-02.20:44:02.927 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:02.927 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account_0 where user_id = ? and activity_id = ? ::: [lyt, 101]
24-09-02.20:44:02.948 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month
        where user_id = ?
          and activity_id = ?
          and `month` = ?;
24-09-02.20:44:02.948 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:02.948 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month_0
        where user_id = ?
          and activity_id = ?
          and `month` = ?; ::: [lyt, 101, 2024-09]
24-09-02.20:44:02.969 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:44:02.969 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:02.969 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:44:03.006 [http-nio-8091-exec-8] INFO  SnowflakeUUIDUtils     - 12位数字的UUID:183058749026
24-09-02.20:44:03.007 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0;
24-09-02.20:44:03.007 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:44:03.007 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_0 set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0; ::: [lyt, 101]
24-09-02.20:44:03.062 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_month
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0
24-09-02.20:44:03.062 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:44:03.062 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_month_0
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0 ::: [lyt, 101, 2024-09]
24-09-02.20:44:03.098 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_day
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0
24-09-02.20:44:03.098 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:44:03.098 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_day_0
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0 ::: [lyt, 101, 2024-09-02]
24-09-02.20:44:03.136 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_raffle_order(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        )
        values(
                  ?, ?, ?, ?, ?, ?, ?, now(), now()
              )
24-09-02.20:44:03.136 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:44:03.136 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_raffle_order_0(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        , id)
        values(?, ?, ?, ?, ?, ?, ?, now(), now(), ?) ::: [lyt, 101, 测试, 100004, 183058749026, 2024-09-02 20:44:02.87, create, 1037467147351601153]
24-09-02.20:44:03.213 [http-nio-8091-exec-8] INFO  RaffleActivityController - 活动抽奖，创建订单 userId:lyt activityId:101 orderId:183058749026
24-09-02.20:44:03.265 [http-nio-8091-exec-8] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userId: lyt strategyId: 100004 ruleModel: rule_default awardId: 100
24-09-02.20:44:03.266 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ?
24-09-02.20:44:03.266 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:03.266 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ? ::: [100004, 100]
24-09-02.20:44:03.322 [http-nio-8091-exec-8] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:lyt strategyId:100004 awardId:100
24-09-02.20:44:03.323 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: select activity_id
        from raffle_activity where strategy_id = ?;
24-09-02.20:44:03.323 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:03.323 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select activity_id
        from raffle_activity where strategy_id = ?; ::: [100004]
24-09-02.20:44:03.341 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:44:03.342 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:03.342 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:44:03.360 [http-nio-8091-exec-8] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0001
24-09-02.20:44:03.360 [http-nio-8091-exec-8] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:lyt strategyId:100004 awardId:100 ruleValue:100:1,100
24-09-02.20:44:03.360 [http-nio-8091-exec-8] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-09-02.20:44:03.360 [http-nio-8091-exec-8] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 lyt 100004 100 1,100
24-09-02.20:44:03.379 [http-nio-8091-exec-8] INFO  SnowflakeUUIDUtils     - 11位数字的UUID:18305874918
24-09-02.20:44:03.380 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_award_record(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state) values(?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?);
24-09-02.20:44:03.380 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:44:03.380 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_award_record_0(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state, id) values(?, ?, ?, ?, ?, ?, ?, ?, ?); ::: [lyt, 101, 100004, 183058749026, 100, 随机积分, 2024-09-02 20:44:03.379, create, 1037467148375011328]
24-09-02.20:44:03.435 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        ) values (?,
                 ?,
                 ?,
                 ?,
                 ?);
24-09-02.20:44:03.435 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:44:03.435 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        , id) values (?, ?, ?, ?, ?, ?); ::: [send_award, lyt, {"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305874918","timeStamp":"2024-09-02 20:44:03.379"}, 18305874918, create, 1037467148605698049]
24-09-02.20:44:03.488 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Logic SQL: update user_raffle_order set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create';
24-09-02.20:44:03.488 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:44:03.488 [http-nio-8091-exec-8] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update user_raffle_order_0 set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create'; ::: [lyt, 183058749026]
24-09-02.20:44:03.603 [pool-7-thread-16] INFO  EventPublisher         - 发送 MQ 消息 topic:send_award, message:{"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305874918","timeStamp":"2024-09-02 20:44:03.379"}
24-09-02.20:44:03.604 [pool-7-thread-16] INFO  ShardingSphere-SQL     - Logic SQL: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?;
24-09-02.20:44:03.604 [pool-7-thread-16] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:44:03.604 [pool-7-thread-16] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305874918]
24-09-02.20:44:03.604 [pool-7-thread-16] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305874918]
24-09-02.20:44:03.621 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-1] INFO  SendAwardCustomer      - 监听用户奖品发送消息 topic:send_award message:{"data":{"awardId":100,"awardTitle":"随机积分","userId":"lyt"},"id":"18305874918","timeStamp":"2024-09-02 20:44:03.379"}
24-09-02.20:44:04.488 [http-nio-8091-exec-9] INFO  RaffleActivityController - 活动抽奖 userId:lyt activityId:101
24-09-02.20:44:04.507 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order where activity_id = ? and user_id = ? and order_state = 'create'
24-09-02.20:44:04.507 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:04.507 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order_0 where activity_id = ? and user_id = ? and order_state = 'create' ::: [101, lyt]
24-09-02.20:44:04.544 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account where user_id = ? and activity_id = ?
24-09-02.20:44:04.544 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:04.544 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account_0 where user_id = ? and activity_id = ? ::: [lyt, 101]
24-09-02.20:44:04.564 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month
        where user_id = ?
          and activity_id = ?
          and `month` = ?;
24-09-02.20:44:04.564 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:04.564 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month_0
        where user_id = ?
          and activity_id = ?
          and `month` = ?; ::: [lyt, 101, 2024-09]
24-09-02.20:44:04.584 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:44:04.584 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:04.584 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:44:04.622 [http-nio-8091-exec-9] INFO  SnowflakeUUIDUtils     - 12位数字的UUID:183058749703
24-09-02.20:44:04.623 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0;
24-09-02.20:44:04.623 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:44:04.623 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_0 set total_count_surplus = total_count_surplus - 1,
                                           day_count_surplus = day_count_surplus - 1,
                                           month_count_surplus = month_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ?
        and total_count_surplus > 0 and day_count_surplus > 0 and month_count_surplus > 0; ::: [lyt, 101]
24-09-02.20:44:04.678 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_month
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0
24-09-02.20:44:04.678 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:44:04.678 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_month_0
        set month_count_surplus = month_count_surplus - 1,update_time = now()
        where user_id = ? and activity_id = ?
        and `month` = ? and month_count_surplus > 0 ::: [lyt, 101, 2024-09]
24-09-02.20:44:04.714 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: update raffle_activity_account_day
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0
24-09-02.20:44:04.714 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:44:04.714 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update raffle_activity_account_day_0
        set day_count_surplus = day_count_surplus - 1, update_time = now()
        where user_id = ? and activity_id = ? and day = ? and day_count_surplus > 0 ::: [lyt, 101, 2024-09-02]
24-09-02.20:44:04.752 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_raffle_order(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        )
        values(
                  ?, ?, ?, ?, ?, ?, ?, now(), now()
              )
24-09-02.20:44:04.752 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:44:04.752 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_raffle_order_0(
            user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state, create_time, update_time
        , id)
        values(?, ?, ?, ?, ?, ?, ?, now(), now(), ?) ::: [lyt, 101, 测试, 100004, 183058749703, 2024-09-02 20:44:04.488, create, 1037467154125402112]
24-09-02.20:44:04.828 [http-nio-8091-exec-9] INFO  RaffleActivityController - 活动抽奖，创建订单 userId:lyt activityId:101 orderId:183058749703
24-09-02.20:44:04.881 [http-nio-8091-exec-9] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userId: lyt strategyId: 100004 ruleModel: rule_default awardId: 101
24-09-02.20:44:04.882 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ?
24-09-02.20:44:04.882 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:04.883 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select rule_models
        from strategy_award
        where strategy_id = ?
          and award_id = ? ::: [100004, 101]
24-09-02.20:44:04.936 [http-nio-8091-exec-9] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:lyt strategyId:100004 awardId:101
24-09-02.20:44:04.937 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: select activity_id
        from raffle_activity where strategy_id = ?;
24-09-02.20:44:04.937 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:04.937 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select activity_id
        from raffle_activity where strategy_id = ?; ::: [100004]
24-09-02.20:44:04.956 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day
        where user_id = ?
          and activity_id = ?
          and `day` = ?;
24-09-02.20:44:04.956 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:04.956 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `day`,
               day_count,
               day_count_surplus
        from raffle_activity_account_day_0
        where user_id = ?
          and activity_id = ?
          and `day` = ?; ::: [lyt, 101, 2024-09-02]
24-09-02.20:44:04.975 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0000
24-09-02.20:44:04.975 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:lyt strategyId:100004 awardId:101
24-09-02.20:44:05.005 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:44:05.011 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId:lyt strategyId:100004 awardId:101
24-09-02.20:44:05.023 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:44:05.042 [pool-7-thread-17] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:44:05.042 [pool-7-thread-17] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@2c72f969], lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:05.042 [pool-7-thread-17] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:44:05.042 [pool-7-thread-17] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:44:05.069 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_stock code:0001
24-09-02.20:44:05.070 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 lyt 100004 101 null
24-09-02.20:44:05.088 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: select strategy_id,
               award_id,
               award_title,
               award_subtitle,
               award_count,
               award_count_surplus,
               award_rate,
               sort
        from strategy_award
        where strategy_id = ?
        and award_id = ?
24-09-02.20:44:05.088 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:05.088 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select strategy_id,
               award_id,
               award_title,
               award_subtitle,
               award_count,
               award_count_surplus,
               award_rate,
               sort
        from strategy_award
        where strategy_id = ?
        and award_id = ? ::: [100004, 101]
24-09-02.20:44:05.126 [http-nio-8091-exec-9] INFO  SnowflakeUUIDUtils     - 11位数字的UUID:18305874991
24-09-02.20:44:05.127 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: insert into user_award_record(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state) values(?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?,
                                ?);
24-09-02.20:44:05.127 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:44:05.127 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: insert into user_award_record_0(user_id,
            activity_id,
            strategy_id,
            order_id,
            award_id,
            award_title,
            award_time,
            award_state, id) values(?, ?, ?, ?, ?, ?, ?, ?, ?); ::: [lyt, 101, 100004, 183058749703, 101, 10000积分, 2024-09-02 20:44:05.126, create, 1037467155702460417]
24-09-02.20:44:05.181 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        ) values (?,
                 ?,
                 ?,
                 ?,
                 ?);
24-09-02.20:44:05.181 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLInsertStatement(setAssignment=Optional.empty, onDuplicateKeyColumns=Optional.empty)
24-09-02.20:44:05.181 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: insert into task(
            topic,
            user_id,
            message,
            message_id,
            state
        , id) values (?, ?, ?, ?, ?, ?); ::: [send_award, lyt, {"data":{"awardId":101,"awardTitle":"10000积分","userId":"lyt"},"id":"18305874991","timeStamp":"2024-09-02 20:44:05.126"}, 18305874991, create, 1037467155928952832]
24-09-02.20:44:05.235 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Logic SQL: update user_raffle_order set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create';
24-09-02.20:44:05.235 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:44:05.235 [http-nio-8091-exec-9] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update user_raffle_order_0 set order_state = 'used',update_time = now()
                                              where user_id = ? and order_id = ? and order_state = 'create'; ::: [lyt, 183058749703]
24-09-02.20:44:05.352 [pool-7-thread-18] INFO  EventPublisher         - 发送 MQ 消息 topic:send_award, message:{"data":{"awardId":101,"awardTitle":"10000积分","userId":"lyt"},"id":"18305874991","timeStamp":"2024-09-02 20:44:05.126"}
24-09-02.20:44:05.353 [pool-7-thread-18] INFO  ShardingSphere-SQL     - Logic SQL: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?;
24-09-02.20:44:05.353 [pool-7-thread-18] INFO  ShardingSphere-SQL     - SQLStatement: MySQLUpdateStatement(orderBy=Optional.empty, limit=Optional.empty)
24-09-02.20:44:05.353 [pool-7-thread-18] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305874991]
24-09-02.20:44:05.353 [pool-7-thread-18] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: update task set state = 'completed', update_time = now()
        where user_id = ? and message_id = ?; ::: [lyt, 18305874991]
24-09-02.20:44:05.369 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-1] INFO  SendAwardCustomer      - 监听用户奖品发送消息 topic:send_award message:{"data":{"awardId":101,"awardTitle":"10000积分","userId":"lyt"},"id":"18305874991","timeStamp":"2024-09-02 20:44:05.126"}
24-09-02.20:44:08.418 [http-nio-8091-exec-15] INFO  RaffleActivityController - 活动抽奖 userId:lyt activityId:101
24-09-02.20:44:08.438 [http-nio-8091-exec-15] INFO  ShardingSphere-SQL     - Logic SQL: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order where activity_id = ? and user_id = ? and order_state = 'create'
24-09-02.20:44:08.438 [http-nio-8091-exec-15] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:08.438 [http-nio-8091-exec-15] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order_0 where activity_id = ? and user_id = ? and order_state = 'create' ::: [101, lyt]
24-09-02.20:44:08.477 [http-nio-8091-exec-15] INFO  ShardingSphere-SQL     - Logic SQL: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account where user_id = ? and activity_id = ?
24-09-02.20:44:08.477 [http-nio-8091-exec-15] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:08.477 [http-nio-8091-exec-15] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account_0 where user_id = ? and activity_id = ? ::: [lyt, 101]
24-09-02.20:44:08.497 [http-nio-8091-exec-15] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month
        where user_id = ?
          and activity_id = ?
          and `month` = ?;
24-09-02.20:44:08.497 [http-nio-8091-exec-15] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:08.497 [http-nio-8091-exec-15] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month_0
        where user_id = ?
          and activity_id = ?
          and `month` = ?; ::: [lyt, 101, 2024-09]
24-09-02.20:44:08.520 [http-nio-8091-exec-15] ERROR RaffleActivityController - 活动抽奖失败 userId:lyt activityId:101
com.big.market.infrastructure.types.exception.AppException: null
	at com.big.market.infrastructure.domain.activity.service.partake.RaffleActivityPartakeService.doFilter(RaffleActivityPartakeService.java:44)
	at com.big.market.infrastructure.domain.activity.service.partake.AbstractRaffleActivityPartake.createOrder(AbstractRaffleActivityPartake.java:64)
	at com.big.market.infrastructure.domain.activity.service.partake.AbstractRaffleActivityPartake.createOrder(AbstractRaffleActivityPartake.java:33)
	at com.big.market.infrastructure.trigger.http.RaffleActivityController.draw(RaffleActivityController.java:117)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:926)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1791)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
24-09-02.20:44:10.004 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:44:10.004 [pool-7-thread-19] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:44:10.005 [pool-7-thread-19] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@2c72f969], lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:10.005 [pool-7-thread-19] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:44:10.005 [pool-7-thread-19] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:44:10.022 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:44:10.709 [http-nio-8091-exec-11] INFO  RaffleActivityController - 活动抽奖 userId:lyt activityId:101
24-09-02.20:44:10.729 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Logic SQL: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order where activity_id = ? and user_id = ? and order_state = 'create'
24-09-02.20:44:10.729 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:10.729 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select activity_name,
               strategy_id,
               order_id,
               order_time,
               order_state
        from user_raffle_order_0 where activity_id = ? and user_id = ? and order_state = 'create' ::: [101, lyt]
24-09-02.20:44:10.766 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Logic SQL: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account where user_id = ? and activity_id = ?
24-09-02.20:44:10.766 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:10.766 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select total_count,
               total_count_surplus,
               day_count,
               day_count_surplus,
               month_count,
               month_count_surplus
        from raffle_activity_account_0 where user_id = ? and activity_id = ? ::: [lyt, 101]
24-09-02.20:44:10.787 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Logic SQL: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month
        where user_id = ?
          and activity_id = ?
          and `month` = ?;
24-09-02.20:44:10.787 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional.empty, lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:10.787 [http-nio-8091-exec-11] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select user_id,
               activity_id,
               `month`,
               month_count,
               month_count_surplus
        from raffle_activity_account_month_0
        where user_id = ?
          and activity_id = ?
          and `month` = ?; ::: [lyt, 101, 2024-09]
24-09-02.20:44:10.805 [http-nio-8091-exec-11] ERROR RaffleActivityController - 活动抽奖失败 userId:lyt activityId:101
com.big.market.infrastructure.types.exception.AppException: null
	at com.big.market.infrastructure.domain.activity.service.partake.RaffleActivityPartakeService.doFilter(RaffleActivityPartakeService.java:44)
	at com.big.market.infrastructure.domain.activity.service.partake.AbstractRaffleActivityPartake.createOrder(AbstractRaffleActivityPartake.java:64)
	at com.big.market.infrastructure.domain.activity.service.partake.AbstractRaffleActivityPartake.createOrder(AbstractRaffleActivityPartake.java:33)
	at com.big.market.infrastructure.trigger.http.RaffleActivityController.draw(RaffleActivityController.java:117)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:926)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1791)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
24-09-02.20:44:15.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:44:15.006 [pool-7-thread-20] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:44:15.006 [pool-7-thread-20] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@2c72f969], lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:15.006 [pool-7-thread-20] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:44:15.006 [pool-7-thread-20] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:44:15.023 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:44:20.015 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:44:20.015 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:44:20.015 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@2c72f969], lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:20.015 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:44:20.015 [pool-7-thread-1 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:44:20.033 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:44:25.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:44:25.003 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Logic SQL: select topic,
               user_id,
               message,
               message_id
        from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) limit 10;;
24-09-02.20:44:25.003 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - SQLStatement: MySQLSelectStatement(limit=Optional[org.apache.shardingsphere.sql.parser.sql.common.segment.dml.pagination.limit.LimitSegment@2c72f969], lock=Optional.empty, window=Optional.empty)
24-09-02.20:44:25.003 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Actual SQL: ds0 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:44:25.003 [pool-7-thread-2 ] INFO  ShardingSphere-SQL     - Actual SQL: ds1 ::: select topic,
               user_id,
               message,
               message_id
, id AS ORDER_BY_DERIVED_0         from task where state = 'fail' or(state = 'create' and now() - update_time > 60000000000000) ORDER BY id ASC  limit 10;;
24-09-02.20:44:25.022 [scheduling-1    ] INFO  UpdateActivitySkuStockJob - 定时任务，更新活动sku库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-09-02.20:44:25.121 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-2] INFO  SimpleMessageListenerContainer - Waiting for workers to finish.
24-09-02.20:44:25.138 [SpringApplicationShutdownHook] INFO  QuartzScheduler        - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
24-09-02.20:44:25.138 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-2] INFO  SimpleMessageListenerContainer - Waiting for workers to finish.
24-09-02.20:44:25.590 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-2] INFO  SimpleMessageListenerContainer - Successfully waited for workers to finish.
24-09-02.20:44:25.722 [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-2] INFO  SimpleMessageListenerContainer - Successfully waited for workers to finish.
24-09-02.20:44:25.957 [SpringApplicationShutdownHook] INFO  SchedulerFactoryBean   - Shutting down Quartz Scheduler
24-09-02.20:44:25.957 [SpringApplicationShutdownHook] INFO  QuartzScheduler        - Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
24-09-02.20:44:25.957 [SpringApplicationShutdownHook] INFO  QuartzScheduler        - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
24-09-02.20:44:25.958 [SpringApplicationShutdownHook] INFO  QuartzScheduler        - Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
24-09-02.20:44:25.958 [SpringApplicationShutdownHook] INFO  SimpleMessageListenerContainer - Shutdown ignored - container is already stopped
24-09-02.20:44:25.958 [SpringApplicationShutdownHook] INFO  SimpleMessageListenerContainer - Shutdown ignored - container is already stopped
24-09-02.20:44:26.039 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown initiated...
24-09-02.20:44:26.046 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown completed.
24-09-02.20:44:26.047 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-2 - Shutdown initiated...
24-09-02.20:44:26.052 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-2 - Shutdown completed.
