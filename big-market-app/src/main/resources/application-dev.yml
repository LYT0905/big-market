server:
  port: 8091
  tomcat:
    threads:
      max: 200        # 设定处理客户请求的线程的最大数目，决定了服务器可以同时响应客户请求的数,默认200
      min-spare: 50   # 初始化线程数,最小空闲线程数,默认是10
    accept-count: 10  # 等待队列长度


# 应用配置
app:
  config:
    # 版本，方便通过接口版本升级
    api-version: v1
    # 跨域，开发阶段可以设置为 * 不限制
    cross-origin: '*'


# 线程池配置
thread:
  pool:
    executor:
      config:
        core-pool-size: 20
        max-pool-size: 50
        keep-alive-time: 5000
        block-queue-size: 5000
        policy: CallerRunsPolicy

spring:
  shardingsphere:
    props:
      sql-show: true
    datasource:
      # 数据库
      ds0:
        username: root
        password: Vt!4uNp?z6B*
        jdbc-url: jdbc:mysql://8.138.41.137:13306/big_market?useUnicode=true&characterEncoding=utf8&autoReconnect=true&zeroDateTimeBehavior=convertToNull&serverTimezone=UTC&useSSL=true
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
      ds1:
        username: root
        password: Vt!4uNp?z6B*
        jdbc-url: jdbc:mysql://8.138.41.137:13306/big_market_01?useUnicode=true&characterEncoding=utf8&autoReconnect=true&zeroDateTimeBehavior=convertToNull&serverTimezone=UTC&useSSL=true
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
      names: ds0,ds1
    rules:
      sharding:
        sharding-algorithms:
          # 分表算法
          raffle-activity-account-table-inline:
            type: INLINE
            props:
              algorithm-expression: raffle_activity_account_$->{user_id.hashCode() % 3}
          raffle-activity-order-table-line:
            type: INLINE
            props:
              algorithm-expression: raffle_activity_order_$->{user_id.hashCode() % 3}
          # 分库算法
          database-inline:
            type: INLINE
            props:
              algorithm-expression: ds$->{user_id.hashCode() % 2}

        tables:
          raffle_activity_account:
            actual-data-nodes: ds$->{0..1}.raffle_activity_account_$->{0..2}
            key-generate-strategy:
              column: id
              key-generator-name: snowflake
            # 分库策略
            database-strategy:
              standard:
                sharding-column: user_id
                sharding-algorithm-name: database-inline
            # 分表策略
            table-strategy:
              standard:
                sharding-column: user_id
                sharding-algorithm-name: raffle-activity-account-table-inline
          raffle_activity_order:
            actual-data-nodes: ds$->{0..1}.raffle_activity_order_$->{0..2}
            key-generate-strategy:
              column: id
              key-generator-name: SNOWFLAKE
            # 分库策略
            database-strategy:
              standard:
                sharding-column: user_id
                sharding-algorithm-name: database-inline
            # 分表策略
            table-strategy:
              standard:
                sharding-column: user_id
                sharding-algorithm-name: raffle-activity-order-table-line
        key-generators:
          snowflake:
            type: SNOWFLAKE
            props:
              worker-id: 123
    mode:
      type: Standalone
      repository:
        type: File
      overwrite: true



# MyBatis 配置【如需使用记得打开】
mybatis:
  mapper-locations: classpath:/mybatis/mapper/*.xml
  config-location:  classpath:/mybatis/config/mybatis-config.xml


#redis配置
redis:
  sdk:
    config:
      host: 8.138.41.137
      port: 16379
      password: Vt!4uNp?z6B*
      pool-size: 10
      min-idle-size: 5
      idle-timeout: 30000
      connect-timeout: 5000
      retry-attempts: 3
      retry-interval: 1000
      ping-interval: 60000
      keep-alive: true


# 日志
logging:
  level:
    root: info
  config: classpath:logback-spring.xml